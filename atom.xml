<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>smallsilver&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangdongen.cn/"/>
  <updated>2016-09-18T07:48:55.000Z</updated>
  <id>http://wangdongen.cn/</id>
  
  <author>
    <name>dongen_wang@163.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>makefile</title>
    <link href="http://wangdongen.cn/2016/09/18/makefile/"/>
    <id>http://wangdongen.cn/2016/09/18/makefile/</id>
    <published>2016-09-18T06:55:41.000Z</published>
    <updated>2016-09-18T07:48:55.000Z</updated>
    
    <content type="html">&lt;div class=&quot;shortcontents&quot;&gt;&lt;br&gt;&lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Overview-of-make&quot; href=&quot;#toc-Overview-of-make&quot;&gt;1 Overview of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-An-Introduction-to-Makefiles&quot; href=&quot;#toc-An-Introduction-to-Makefiles&quot;&gt;2 An Introduction to Makefiles&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Writing-Makefiles&quot; href=&quot;#toc-Writing-Makefiles&quot;&gt;3 Writing Makefiles&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Writing-Rules&quot; href=&quot;#toc-Writing-Rules&quot;&gt;4 Writing Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Writing-Recipes-in-Rules&quot; href=&quot;#toc-Writing-Recipes-in-Rules&quot;&gt;5 Writing Recipes in Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-How-to-Use-Variables&quot; href=&quot;#toc-How-to-Use-Variables&quot;&gt;6 How to Use Variables&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Conditional-Parts-of-Makefiles&quot; href=&quot;#toc-Conditional-Parts-of-Makefiles&quot;&gt;7 Conditional Parts of Makefiles&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Functions-for-Transforming-Text&quot; href=&quot;#toc-Functions-for-Transforming-Text&quot;&gt;8 Functions for Transforming Text&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-How-to-Run-make&quot; href=&quot;#toc-How-to-Run-make&quot;&gt;9 How to Run &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Using-Implicit-Rules&quot; href=&quot;#toc-Using-Implicit-Rules&quot;&gt;10 Using Implicit Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Using-make-to-Update-Archive-Files&quot; href=&quot;#toc-Using-make-to-Update-Archive-Files&quot;&gt;11 Using &lt;code&gt;make&lt;/code&gt; to Update Archive Files&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Extending-GNU-make&quot; href=&quot;#toc-Extending-GNU-make&quot;&gt;12 Extending GNU &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Integrating-GNU-make&quot; href=&quot;#toc-Integrating-GNU-make&quot;&gt;13 Integrating GNU &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Features-of-GNU-make&quot; href=&quot;#toc-Features-of-GNU-make&quot;&gt;14 Features of GNU &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Incompatibilities-and-Missing-Features&quot; href=&quot;#toc-Incompatibilities-and-Missing-Features&quot;&gt;15 Incompatibilities and Missing Features&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Makefile-Conventions-1&quot; href=&quot;#toc-Makefile-Conventions-1&quot;&gt;16 Makefile Conventions&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Quick-Reference-1&quot; href=&quot;#toc-Quick-Reference-1&quot;&gt;Appendix A Quick Reference&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Errors-Generated-by-Make&quot; href=&quot;#toc-Errors-Generated-by-Make&quot;&gt;Appendix B Errors Generated by Make&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Complex-Makefile-Example&quot; href=&quot;#toc-Complex-Makefile-Example&quot;&gt;Appendix C Complex Makefile Example&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Index-of-Concepts&quot; href=&quot;#toc-Index-of-Concepts&quot;&gt;Index of Concepts&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Index-of-Functions_002c-Variables_002c-_0026-Directives&quot; href=&quot;#toc-Index-of-Functions_002c-Variables_002c-_0026-Directives&quot;&gt;Index of Functions, Variables, &amp;amp; Directives&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;SEC_Contents&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&quot;contents-heading&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;div class=&quot;contents&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Overview-of-make&quot; href=&quot;#Overview&quot;&gt;1 Overview of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-How-to-Read-This-Manual&quot; href=&quot;#Reading&quot;&gt;1.1 How to Read This Manual&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Problems-and-Bugs&quot; href=&quot;#Bugs&quot;&gt;1.2 Problems and Bugs&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-An-Introduction-to-Makefiles&quot; href=&quot;#Introduction&quot;&gt;2 An Introduction to Makefiles&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-What-a-Rule-Looks-Like&quot; href=&quot;#Rule-Introduction&quot;&gt;2.1 What a Rule Looks Like&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-A-Simple-Makefile&quot; href=&quot;#Simple-Makefile&quot;&gt;2.2 A Simple Makefile&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-How-make-Processes-a-Makefile&quot; href=&quot;#How-Make-Works&quot;&gt;2.3 How &lt;code&gt;make&lt;/code&gt; Processes a Makefile&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Variables-Make-Makefiles-Simpler&quot; href=&quot;#Variables-Simplify&quot;&gt;2.4 Variables Make Makefiles Simpler&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Letting-make-Deduce-the-Recipes&quot; href=&quot;#make-Deduces&quot;&gt;2.5 Letting &lt;code&gt;make&lt;/code&gt; Deduce the Recipes&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Another-Style-of-Makefile&quot; href=&quot;#Combine-By-Prerequisite&quot;&gt;2.6 Another Style of Makefile&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Rules-for-Cleaning-the-Directory&quot; href=&quot;#Cleanup&quot;&gt;2.7 Rules for Cleaning the Directory&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Writing-Makefiles&quot; href=&quot;#Makefiles&quot;&gt;3 Writing Makefiles&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-What-Makefiles-Contain&quot; href=&quot;#Makefile-Contents&quot;&gt;3.1 What Makefiles Contain&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Splitting-Long-Lines&quot; href=&quot;#Splitting-Lines&quot;&gt;3.1.1 Splitting Long Lines&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-What-Name-to-Give-Your-Makefile&quot; href=&quot;#Makefile-Names&quot;&gt;3.2 What Name to Give Your Makefile&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Including-Other-Makefiles&quot; href=&quot;#Include&quot;&gt;3.3 Including Other Makefiles&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-Variable-MAKEFILES&quot; href=&quot;#MAKEFILES-Variable&quot;&gt;3.4 The Variable &lt;code&gt;MAKEFILES&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-How-Makefiles-Are-Remade&quot; href=&quot;#Remaking-Makefiles&quot;&gt;3.5 How Makefiles Are Remade&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Overriding-Part-of-Another-Makefile&quot; href=&quot;#Overriding-Makefiles&quot;&gt;3.6 Overriding Part of Another Makefile&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-How-make-Reads-a-Makefile&quot; href=&quot;#Reading-Makefiles&quot;&gt;3.7 How &lt;code&gt;make&lt;/code&gt; Reads a Makefile&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Secondary-Expansion-1&quot; href=&quot;#Secondary-Expansion&quot;&gt;3.8 Secondary Expansion&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Writing-Rules&quot; href=&quot;#Rules&quot;&gt;4 Writing Rules&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Rule-Example-1&quot; href=&quot;#Rule-Example&quot;&gt;4.1 Rule Example&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Rule-Syntax-1&quot; href=&quot;#Rule-Syntax&quot;&gt;4.2 Rule Syntax&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Types-of-Prerequisites&quot; href=&quot;#Prerequisite-Types&quot;&gt;4.3 Types of Prerequisites&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Using-Wildcard-Characters-in-File-Names&quot; href=&quot;#Wildcards&quot;&gt;4.4 Using Wildcard Characters in File Names&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Wildcard-Examples-1&quot; href=&quot;#Wildcard-Examples&quot;&gt;4.4.1 Wildcard Examples&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Pitfalls-of-Using-Wildcards&quot; href=&quot;#Wildcard-Pitfall&quot;&gt;4.4.2 Pitfalls of Using Wildcards&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-The-Function-wildcard&quot; href=&quot;#Wildcard-Function&quot;&gt;4.4.3 The Function &lt;code&gt;wildcard&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Searching-Directories-for-Prerequisites&quot; href=&quot;#Directory-Search&quot;&gt;4.5 Searching Directories for Prerequisites&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-VPATH_003a-Search-Path-for-All-Prerequisites&quot; href=&quot;#General-Search&quot;&gt;4.5.1 &lt;code&gt;VPATH&lt;/code&gt;: Search Path for All Prerequisites&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-The-vpath-Directive&quot; href=&quot;#Selective-Search&quot;&gt;4.5.2 The &lt;code&gt;vpath&lt;/code&gt; Directive&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-How-Directory-Searches-are-Performed&quot; href=&quot;#Search-Algorithm&quot;&gt;4.5.3 How Directory Searches are Performed&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Writing-Recipes-with-Directory-Search&quot; href=&quot;#Recipes_002fSearch&quot;&gt;4.5.4 Writing Recipes with Directory Search&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Directory-Search-and-Implicit-Rules&quot; href=&quot;#Implicit_002fSearch&quot;&gt;4.5.5 Directory Search and Implicit Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Directory-Search-for-Link-Libraries&quot; href=&quot;#Libraries_002fSearch&quot;&gt;4.5.6 Directory Search for Link Libraries&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Phony-Targets-1&quot; href=&quot;#Phony-Targets&quot;&gt;4.6 Phony Targets&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Rules-without-Recipes-or-Prerequisites&quot; href=&quot;#Force-Targets&quot;&gt;4.7 Rules without Recipes or Prerequisites&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Empty-Target-Files-to-Record-Events&quot; href=&quot;#Empty-Targets&quot;&gt;4.8 Empty Target Files to Record Events&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Special-Built_002din-Target-Names&quot; href=&quot;#Special-Targets&quot;&gt;4.9 Special Built-in Target Names&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Multiple-Targets-in-a-Rule&quot; href=&quot;#Multiple-Targets&quot;&gt;4.10 Multiple Targets in a Rule&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Multiple-Rules-for-One-Target&quot; href=&quot;#Multiple-Rules&quot;&gt;4.11 Multiple Rules for One Target&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Static-Pattern-Rules&quot; href=&quot;#Static-Pattern&quot;&gt;4.12 Static Pattern Rules&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Syntax-of-Static-Pattern-Rules&quot; href=&quot;#Static-Usage&quot;&gt;4.12.1 Syntax of Static Pattern Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Static-Pattern-Rules-versus-Implicit-Rules&quot; href=&quot;#Static-versus-Implicit&quot;&gt;4.12.2 Static Pattern Rules versus Implicit Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Double_002dColon-Rules&quot; href=&quot;#Double_002dColon&quot;&gt;4.13 Double-Colon Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Generating-Prerequisites-Automatically&quot; href=&quot;#Automatic-Prerequisites&quot;&gt;4.14 Generating Prerequisites Automatically&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Writing-Recipes-in-Rules&quot; href=&quot;#Recipes&quot;&gt;5 Writing Recipes in Rules&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Recipe-Syntax-1&quot; href=&quot;#Recipe-Syntax&quot;&gt;5.1 Recipe Syntax&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Splitting-Recipe-Lines-1&quot; href=&quot;#Splitting-Recipe-Lines&quot;&gt;5.1.1 Splitting Recipe Lines&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Using-Variables-in-Recipes&quot; href=&quot;#Variables-in-Recipes&quot;&gt;5.1.2 Using Variables in Recipes&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Recipe-Echoing&quot; href=&quot;#Echoing&quot;&gt;5.2 Recipe Echoing&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Recipe-Execution&quot; href=&quot;#Execution&quot;&gt;5.3 Recipe Execution&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Using-One-Shell&quot; href=&quot;#One-Shell&quot;&gt;5.3.1 Using One Shell&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Choosing-the-Shell-1&quot; href=&quot;#Choosing-the-Shell&quot;&gt;5.3.2 Choosing the Shell&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Parallel-Execution&quot; href=&quot;#Parallel&quot;&gt;5.4 Parallel Execution&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Output-During-Parallel-Execution&quot; href=&quot;#Parallel-Output&quot;&gt;5.4.1 Output During Parallel Execution&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Input-During-Parallel-Execution&quot; href=&quot;#Parallel-Input&quot;&gt;5.4.2 Input During Parallel Execution&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Errors-in-Recipes&quot; href=&quot;#Errors&quot;&gt;5.5 Errors in Recipes&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Interrupting-or-Killing-make&quot; href=&quot;#Interrupts&quot;&gt;5.6 Interrupting or Killing &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Recursive-Use-of-make&quot; href=&quot;#Recursion&quot;&gt;5.7 Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-How-the-MAKE-Variable-Works&quot; href=&quot;#MAKE-Variable&quot;&gt;5.7.1 How the &lt;code&gt;MAKE&lt;/code&gt; Variable Works&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Communicating-Variables-to-a-Sub_002dmake&quot; href=&quot;#Variables_002fRecursion&quot;&gt;5.7.2 Communicating Variables to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Communicating-Options-to-a-Sub_002dmake&quot; href=&quot;#Options_002fRecursion&quot;&gt;5.7.3 Communicating Options to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-The-_002d_002dprint_002ddirectory-Option&quot; href=&quot;#g_t_002dw-Option&quot;&gt;5.7.4 The ‘&lt;samp&gt;–print-directory&lt;/samp&gt;’ Option&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Defining-Canned-Recipes&quot; href=&quot;#Canned-Recipes&quot;&gt;5.8 Defining Canned Recipes&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Using-Empty-Recipes&quot; href=&quot;#Empty-Recipes&quot;&gt;5.9 Using Empty Recipes&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-How-to-Use-Variables&quot; href=&quot;#Using-Variables&quot;&gt;6 How to Use Variables&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Basics-of-Variable-References&quot; href=&quot;#Reference&quot;&gt;6.1 Basics of Variable References&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-Two-Flavors-of-Variables&quot; href=&quot;#Flavors&quot;&gt;6.2 The Two Flavors of Variables&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Advanced-Features-for-Reference-to-Variables&quot; href=&quot;#Advanced&quot;&gt;6.3 Advanced Features for Reference to Variables&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Substitution-References&quot; href=&quot;#Substitution-Refs&quot;&gt;6.3.1 Substitution References&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Computed-Variable-Names&quot; href=&quot;#Computed-Names&quot;&gt;6.3.2 Computed Variable Names&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-How-Variables-Get-Their-Values&quot; href=&quot;#Values&quot;&gt;6.4 How Variables Get Their Values&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Setting-Variables&quot; href=&quot;#Setting&quot;&gt;6.5 Setting Variables&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Appending-More-Text-to-Variables&quot; href=&quot;#Appending&quot;&gt;6.6 Appending More Text to Variables&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-override-Directive&quot; href=&quot;#Override-Directive&quot;&gt;6.7 The &lt;code&gt;override&lt;/code&gt; Directive&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Defining-Multi_002dLine-Variables&quot; href=&quot;#Multi_002dLine&quot;&gt;6.8 Defining Multi-Line Variables&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Undefining-Variables&quot; href=&quot;#Undefine-Directive&quot;&gt;6.9 Undefining Variables&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Variables-from-the-Environment&quot; href=&quot;#Environment&quot;&gt;6.10 Variables from the Environment&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Target_002dspecific-Variable-Values&quot; href=&quot;#Target_002dspecific&quot;&gt;6.11 Target-specific Variable Values&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Pattern_002dspecific-Variable-Values&quot; href=&quot;#Pattern_002dspecific&quot;&gt;6.12 Pattern-specific Variable Values&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Suppressing-Inheritance-1&quot; href=&quot;#Suppressing-Inheritance&quot;&gt;6.13 Suppressing Inheritance&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Other-Special-Variables&quot; href=&quot;#Special-Variables&quot;&gt;6.14 Other Special Variables&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Conditional-Parts-of-Makefiles&quot; href=&quot;#Conditionals&quot;&gt;7 Conditional Parts of Makefiles&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Example-of-a-Conditional&quot; href=&quot;#Conditional-Example&quot;&gt;7.1 Example of a Conditional&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Syntax-of-Conditionals&quot; href=&quot;#Conditional-Syntax&quot;&gt;7.2 Syntax of Conditionals&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Conditionals-that-Test-Flags&quot; href=&quot;#Testing-Flags&quot;&gt;7.3 Conditionals that Test Flags&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Functions-for-Transforming-Text&quot; href=&quot;#Functions&quot;&gt;8 Functions for Transforming Text&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Function-Call-Syntax&quot; href=&quot;#Syntax-of-Functions&quot;&gt;8.1 Function Call Syntax&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Functions-for-String-Substitution-and-Analysis&quot; href=&quot;#Text-Functions&quot;&gt;8.2 Functions for String Substitution and Analysis&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Functions-for-File-Names&quot; href=&quot;#File-Name-Functions&quot;&gt;8.3 Functions for File Names&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Functions-for-Conditionals&quot; href=&quot;#Conditional-Functions&quot;&gt;8.4 Functions for Conditionals&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-foreach-Function&quot; href=&quot;#Foreach-Function&quot;&gt;8.5 The &lt;code&gt;foreach&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-file-Function&quot; href=&quot;#File-Function&quot;&gt;8.6 The &lt;code&gt;file&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-call-Function&quot; href=&quot;#Call-Function&quot;&gt;8.7 The &lt;code&gt;call&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-value-Function&quot; href=&quot;#Value-Function&quot;&gt;8.8 The &lt;code&gt;value&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-eval-Function&quot; href=&quot;#Eval-Function&quot;&gt;8.9 The &lt;code&gt;eval&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-origin-Function&quot; href=&quot;#Origin-Function&quot;&gt;8.10 The &lt;code&gt;origin&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-flavor-Function&quot; href=&quot;#Flavor-Function&quot;&gt;8.11 The &lt;code&gt;flavor&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Functions-That-Control-Make&quot; href=&quot;#Make-Control-Functions&quot;&gt;8.12 Functions That Control Make&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-shell-Function&quot; href=&quot;#Shell-Function&quot;&gt;8.13 The &lt;code&gt;shell&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-The-guile-Function&quot; href=&quot;#Guile-Function&quot;&gt;8.14 The &lt;code&gt;guile&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-How-to-Run-make&quot; href=&quot;#Running&quot;&gt;9 How to Run &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Arguments-to-Specify-the-Makefile&quot; href=&quot;#Makefile-Arguments&quot;&gt;9.1 Arguments to Specify the Makefile&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Arguments-to-Specify-the-Goals&quot; href=&quot;#Goals&quot;&gt;9.2 Arguments to Specify the Goals&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Instead-of-Executing-Recipes&quot; href=&quot;#Instead-of-Execution&quot;&gt;9.3 Instead of Executing Recipes&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Avoiding-Recompilation-of-Some-Files&quot; href=&quot;#Avoiding-Compilation&quot;&gt;9.4 Avoiding Recompilation of Some Files&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Overriding-Variables&quot; href=&quot;#Overriding&quot;&gt;9.5 Overriding Variables&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Testing-the-Compilation-of-a-Program&quot; href=&quot;#Testing&quot;&gt;9.6 Testing the Compilation of a Program&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Summary-of-Options&quot; href=&quot;#Options-Summary&quot;&gt;9.7 Summary of Options&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Using-Implicit-Rules&quot; href=&quot;#Implicit-Rules&quot;&gt;10 Using Implicit Rules&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Using-Implicit-Rules-1&quot; href=&quot;#Using-Implicit&quot;&gt;10.1 Using Implicit Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Catalogue-of-Built_002dIn-Rules&quot; href=&quot;#Catalogue-of-Rules&quot;&gt;10.2 Catalogue of Built-In Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Variables-Used-by-Implicit-Rules&quot; href=&quot;#Implicit-Variables&quot;&gt;10.3 Variables Used by Implicit Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Chains-of-Implicit-Rules&quot; href=&quot;#Chained-Rules&quot;&gt;10.4 Chains of Implicit Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Defining-and-Redefining-Pattern-Rules&quot; href=&quot;#Pattern-Rules&quot;&gt;10.5 Defining and Redefining Pattern Rules&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Introduction-to-Pattern-Rules&quot; href=&quot;#Pattern-Intro&quot;&gt;10.5.1 Introduction to Pattern Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Pattern-Rule-Examples&quot; href=&quot;#Pattern-Examples&quot;&gt;10.5.2 Pattern Rule Examples&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Automatic-Variables-1&quot; href=&quot;#Automatic-Variables&quot;&gt;10.5.3 Automatic Variables&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-How-Patterns-Match&quot; href=&quot;#Pattern-Match&quot;&gt;10.5.4 How Patterns Match&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Match_002dAnything-Pattern-Rules&quot; href=&quot;#Match_002dAnything-Rules&quot;&gt;10.5.5 Match-Anything Pattern Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Canceling-Implicit-Rules&quot; href=&quot;#Canceling-Rules&quot;&gt;10.5.6 Canceling Implicit Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Defining-Last_002dResort-Default-Rules&quot; href=&quot;#Last-Resort&quot;&gt;10.6 Defining Last-Resort Default Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Old_002dFashioned-Suffix-Rules&quot; href=&quot;#Suffix-Rules&quot;&gt;10.7 Old-Fashioned Suffix Rules&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Implicit-Rule-Search-Algorithm&quot; href=&quot;#Implicit-Rule-Search&quot;&gt;10.8 Implicit Rule Search Algorithm&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Using-make-to-Update-Archive-Files&quot; href=&quot;#Archives&quot;&gt;11 Using &lt;code&gt;make&lt;/code&gt; to Update Archive Files&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Archive-Members-as-Targets&quot; href=&quot;#Archive-Members&quot;&gt;11.1 Archive Members as Targets&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Implicit-Rule-for-Archive-Member-Targets&quot; href=&quot;#Archive-Update&quot;&gt;11.2 Implicit Rule for Archive Member Targets&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Updating-Archive-Symbol-Directories&quot; href=&quot;#Archive-Symbols&quot;&gt;11.2.1 Updating Archive Symbol Directories&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Dangers-When-Using-Archives&quot; href=&quot;#Archive-Pitfalls&quot;&gt;11.3 Dangers When Using Archives&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Suffix-Rules-for-Archive-Files&quot; href=&quot;#Archive-Suffix-Rules&quot;&gt;11.4 Suffix Rules for Archive Files&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Extending-GNU-make&quot; href=&quot;#Extending-make&quot;&gt;12 Extending GNU &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-GNU-Guile-Integration&quot; href=&quot;#Guile-Integration&quot;&gt;12.1 GNU Guile Integration&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Conversion-of-Guile-Types&quot; href=&quot;#Guile-Types&quot;&gt;12.1.1 Conversion of Guile Types&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Interfaces-from-Guile-to-make&quot; href=&quot;#Guile-Interface&quot;&gt;12.1.2 Interfaces from Guile to &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Example-Using-Guile-in-make&quot; href=&quot;#Guile-Example&quot;&gt;12.1.3 Example Using Guile in &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Loading-Dynamic-Objects&quot; href=&quot;#Loading-Objects&quot;&gt;12.2 Loading Dynamic Objects&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-The-load-Directive&quot; href=&quot;#load-Directive&quot;&gt;12.2.1 The &lt;code&gt;load&lt;/code&gt; Directive&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-How-Loaded-Objects-Are-Remade&quot; href=&quot;#Remaking-Loaded-Objects&quot;&gt;12.2.2 How Loaded Objects Are Remade&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Loaded-Object-Interface&quot; href=&quot;#Loaded-Object-API&quot;&gt;12.2.3 Loaded Object Interface&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Example-Loaded-Object&quot; href=&quot;#Loaded-Object-Example&quot;&gt;12.2.4 Example Loaded Object&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Integrating-GNU-make&quot; href=&quot;#Integrating-make&quot;&gt;13 Integrating GNU &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Sharing-Job-Slots-with-GNU-make&quot; href=&quot;#Job-Slots&quot;&gt;13.1 Sharing Job Slots with GNU &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;br&gt;    &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-POSIX-Jobserver-Interaction&quot; href=&quot;#POSIX-Jobserver&quot;&gt;13.1.1 POSIX Jobserver Interaction&lt;/a&gt;&lt;/li&gt;&lt;br&gt;      &lt;li&gt;&lt;a name=&quot;toc-Windows-Jobserver-Interaction&quot; href=&quot;#Windows-Jobserver&quot;&gt;13.1.2 Windows Jobserver Interaction&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Synchronized-Terminal-Output&quot; href=&quot;#Terminal-Output&quot;&gt;13.2 Synchronized Terminal Output&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Features-of-GNU-make&quot; href=&quot;#Features&quot;&gt;14 Features of GNU &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Incompatibilities-and-Missing-Features&quot; href=&quot;#Missing&quot;&gt;15 Incompatibilities and Missing Features&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Makefile-Conventions-1&quot; href=&quot;#Makefile-Conventions&quot;&gt;16 Makefile Conventions&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-General-Conventions-for-Makefiles&quot; href=&quot;#Makefile-Basics&quot;&gt;16.1 General Conventions for Makefiles&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Utilities-in-Makefiles-1&quot; href=&quot;#Utilities-in-Makefiles&quot;&gt;16.2 Utilities in Makefiles&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Variables-for-Specifying-Commands&quot; href=&quot;#Command-Variables&quot;&gt;16.3 Variables for Specifying Commands&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-DESTDIR_003a-Support-for-Staged-Installs&quot; href=&quot;#DESTDIR&quot;&gt;16.4 &lt;code&gt;DESTDIR&lt;/code&gt;: Support for Staged Installs&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Variables-for-Installation-Directories&quot; href=&quot;#Directory-Variables&quot;&gt;16.5 Variables for Installation Directories&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Standard-Targets-for-Users&quot; href=&quot;#Standard-Targets&quot;&gt;16.6 Standard Targets for Users&lt;/a&gt;&lt;/li&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-Install-Command-Categories-1&quot; href=&quot;#Install-Command-Categories&quot;&gt;16.7 Install Command Categories&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Quick-Reference-1&quot; href=&quot;#Quick-Reference&quot;&gt;Appendix A Quick Reference&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Errors-Generated-by-Make&quot; href=&quot;#Error-Messages&quot;&gt;Appendix B Errors Generated by Make&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Complex-Makefile-Example&quot; href=&quot;#Complex-Makefile&quot;&gt;Appendix C Complex Makefile Example&lt;/a&gt;&lt;br&gt;  &lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;    &lt;li&gt;&lt;a name=&quot;toc-GNU-Free-Documentation-License-1&quot; href=&quot;#GNU-Free-Documentation-License&quot;&gt;C.1 GNU Free Documentation License&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;/ul&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Index-of-Concepts&quot; href=&quot;#Concept-Index&quot;&gt;Index of Concepts&lt;/a&gt;&lt;/li&gt;&lt;br&gt;  &lt;li&gt;&lt;a name=&quot;toc-Index-of-Functions_002c-Variables_002c-_0026-Directives&quot; href=&quot;#Name-Index&quot;&gt;Index of Functions, Variables, &amp;amp; Directives&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name=&quot;Top&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Overview&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Overview&lt;/a&gt;, Previous: &lt;a href=&quot;dir.html#Top&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;(dir)&lt;/a&gt;, Up: &lt;a href=&quot;dir.html#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;(dir)&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;GNU-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h1 class=&quot;top&quot;&gt;GNU &lt;code&gt;make&lt;/code&gt;&lt;/h1&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This file documents the GNU &lt;code&gt;make&lt;/code&gt; utility, which determines&lt;br&gt;automatically which pieces of a large program need to be recompiled,&lt;br&gt;and issues the commands to recompile them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This is Edition 0.74, last updated 21 May 2016,&lt;br&gt;of &lt;cite&gt;The GNU Make Manual&lt;/cite&gt;, for GNU &lt;code&gt;make&lt;/code&gt; version 4.2.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Copyright © 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,&lt;br&gt;1996, 1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007,&lt;br&gt;2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016 Free Software&lt;br&gt;Foundation, Inc.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p&gt;Permission is granted to copy, distribute and/or modify this document&lt;br&gt;under the terms of the GNU Free Documentation License, Version 1.3 or&lt;br&gt;any later version published by the Free Software Foundation; with no&lt;br&gt;Invariant Sections, with the Front-Cover Texts being “A GNU Manual,”&lt;br&gt;and with the Back-Cover Texts as in (a) below.  A copy of the&lt;br&gt;license is included in the section entitled “GNU Free Documentation&lt;br&gt;License.”&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;(a) The FSF’s Back-Cover Text is: “You have the freedom to copy and&lt;br&gt;modify this GNU manual.  Buying copies from the FSF supports it in&lt;br&gt;developing GNU and promoting software freedom.”&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Overview&quot; accesskey=&quot;1&quot;&gt;Overview&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Overview of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Introduction&quot; accesskey=&quot;2&quot;&gt;Introduction&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;An introduction to &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;3&quot;&gt;Makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Makefiles tell &lt;code&gt;make&lt;/code&gt; what to do.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Rules&quot; accesskey=&quot;4&quot;&gt;Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Rules describe when a file must be remade.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Recipes&quot; accesskey=&quot;5&quot;&gt;Recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Recipes say how to remake a file.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;6&quot;&gt;Using Variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;You can use variables to avoid repetition.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Conditionals&quot; accesskey=&quot;7&quot;&gt;Conditionals&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Use or ignore parts of the makefile based&lt;br&gt;                                  on the values of variables.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Functions&quot; accesskey=&quot;8&quot;&gt;Functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Many powerful ways to manipulate text.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Running&quot; accesskey=&quot;9&quot;&gt;Invoking make&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to invoke &lt;code&gt;make&lt;/code&gt; on the command line.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Implicit-Rules&quot;&gt;Implicit Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Use implicit rules to treat many files alike,&lt;br&gt;                                  based on their file names.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Archives&quot;&gt;Archives&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How &lt;code&gt;make&lt;/code&gt; can update library archives.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Extending-make&quot;&gt;Extending make&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using extensions to &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Integrating-make&quot;&gt;Integrating make&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Integrating &lt;code&gt;make&lt;/code&gt; with other tools.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Features&quot;&gt;Features&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Features GNU &lt;code&gt;make&lt;/code&gt; has over other &lt;code&gt;make&lt;/code&gt;s.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Missing&quot;&gt;Missing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;What GNU &lt;code&gt;make&lt;/code&gt; lacks from other &lt;code&gt;make&lt;/code&gt;s.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Makefile-Conventions&quot;&gt;Makefile Conventions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Conventions for writing makefiles for&lt;br&gt;                                  GNU programs.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Quick-Reference&quot;&gt;Quick Reference&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;A quick reference for experienced users.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Error-Messages&quot;&gt;Error Messages&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;A list of common errors generated by &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Complex-Makefile&quot;&gt;Complex Makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;A real example of a straightforward,&lt;br&gt;                                  but nontrivial, makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#GNU-Free-Documentation-License&quot;&gt;GNU Free Documentation License&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;License for copying this manual.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Concept-Index&quot;&gt;Concept Index&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Index of Concepts.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Name-Index&quot;&gt;Name Index&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Index of Functions, Variables, &amp;amp; Directives.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt; — The Detailed Node Listing —&lt;br&gt;&lt;br&gt;Overview of &lt;code&gt;make&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Preparing&quot;&gt;Preparing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Preparing and running &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Reading&quot;&gt;Reading&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;On reading this text.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Bugs&quot;&gt;Bugs&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Problems and bugs.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;An Introduction to Makefiles&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Rule-Introduction&quot;&gt;Rule Introduction&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;What a rule looks like.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Simple-Makefile&quot;&gt;Simple Makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;A simple makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#How-Make-Works&quot;&gt;How Make Works&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How &lt;code&gt;make&lt;/code&gt; processes this makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Variables-Simplify&quot;&gt;Variables Simplify&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variables make makefiles simpler.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#make-Deduces&quot;&gt;make Deduces&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Letting &lt;code&gt;make&lt;/code&gt; deduce the recipes.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Combine-By-Prerequisite&quot;&gt;Combine By Prerequisite&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Another style of makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Cleanup&quot;&gt;Cleanup&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Rules for cleaning the directory.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Writing Makefiles&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Makefile-Contents&quot;&gt;Makefile Contents&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;What makefiles contain.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to name your makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How one makefile can use another makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#MAKEFILES-Variable&quot;&gt;MAKEFILES Variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The environment can specify extra makefiles.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Remaking-Makefiles&quot;&gt;Remaking Makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How makefiles get remade.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Overriding-Makefiles&quot;&gt;Overriding Makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to override part of one makefile&lt;br&gt;                                  with another makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How makefiles are parsed.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How and when secondary expansion is performed.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;What Makefiles Contain&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Splitting-Lines&quot;&gt;Splitting Lines&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Splitting long lines in makefiles&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Writing Rules&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Rule-Example&quot;&gt;Rule Example&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;An example explained.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;General syntax explained.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Prerequisite-Types&quot;&gt;Prerequisite Types&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;There are two types of prerequisites.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Wildcards&quot;&gt;Wildcards&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using wildcard characters such as ‘*’.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Directory-Search&quot;&gt;Directory Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Searching other directories for source files.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using a target that is not a real file’s name.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Force-Targets&quot;&gt;Force Targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;You can use a target without a recipe&lt;br&gt;                                  or prerequisites to mark other targets&lt;br&gt;                                  as phony.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Empty-Targets&quot;&gt;Empty Targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;When only the date matters and the&lt;br&gt;                                  files are empty.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Targets with special built-in meanings.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Multiple-Targets&quot;&gt;Multiple Targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;When to make use of several targets in a rule.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Multiple-Rules&quot;&gt;Multiple Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use several rules with the same target.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Static-Pattern&quot;&gt;Static Pattern&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Static pattern rules apply to multiple targets&lt;br&gt;                                  and can vary the prerequisites according to&lt;br&gt;                                  the target name.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Double_002dColon&quot;&gt;Double-Colon&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use a special kind of rule to allow&lt;br&gt;                                  several independent rules for one target.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to automatically generate rules giving&lt;br&gt;                                  prerequisites from source files themselves.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Using Wildcard Characters in File Names&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Wildcard-Examples&quot;&gt;Wildcard Examples&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Several examples.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Wildcard-Pitfall&quot;&gt;Wildcard Pitfall&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Problems to avoid.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Wildcard-Function&quot;&gt;Wildcard Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to cause wildcard expansion where&lt;br&gt;                                  it does not normally take place.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Searching Directories for Prerequisites&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#General-Search&quot;&gt;General Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Specifying a search path that applies&lt;br&gt;                                  to every prerequisite.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Selective-Search&quot;&gt;Selective Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Specifying a search path&lt;br&gt;                                  for a specified class of names.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Search-Algorithm&quot;&gt;Search Algorithm&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;When and how search paths are applied.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Recipes_002fSearch&quot;&gt;Recipes/Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to write recipes that work together&lt;br&gt;                                  with search paths.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Implicit_002fSearch&quot;&gt;Implicit/Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How search paths affect implicit rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Libraries/Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Directory search for link libraries.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Static Pattern Rules&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The syntax of static pattern rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Static-versus-Implicit&quot;&gt;Static versus Implicit&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;When are they better than implicit rules?&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Writing Recipes in Rules&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Recipe-Syntax&quot;&gt;Recipe Syntax&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Recipe syntax features and pitfalls.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to control when recipes are echoed.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Execution&quot;&gt;Execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How recipes are executed.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How recipes can be executed in parallel.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;What happens after a recipe execution error.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Interrupts&quot;&gt;Interrupts&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;What happens when a recipe is interrupted.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Recursion&quot;&gt;Recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Invoking &lt;code&gt;make&lt;/code&gt; from makefiles.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Canned-Recipes&quot;&gt;Canned Recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Defining canned recipes.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Empty-Recipes&quot;&gt;Empty Recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Defining useful, do-nothing recipes.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Recipe Syntax&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Splitting-Recipe-Lines&quot;&gt;Splitting Recipe Lines&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Breaking long recipe lines for readability.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Variables-in-Recipes&quot;&gt;Variables in Recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using &lt;code&gt;make&lt;/code&gt; variables in recipes.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Recipe Execution&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#One-Shell&quot;&gt;One Shell&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;One shell for all lines in a recipe.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How &lt;code&gt;make&lt;/code&gt; chooses the shell used&lt;br&gt;                                  to run recipes.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Parallel Execution&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Parallel-Output&quot;&gt;Parallel Output&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Handling output during parallel execution&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Parallel-Input&quot;&gt;Parallel Input&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Handling input during parallel execution&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#MAKE-Variable&quot;&gt;MAKE Variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The special effects of using ‘&lt;samp&gt;$(MAKE)&lt;/samp&gt;’.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to communicate variables to a sub-&lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to communicate options to a sub-&lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How the ‘&lt;samp&gt;-w&lt;/samp&gt;’ or ‘&lt;samp&gt;–print-directory&lt;/samp&gt;’ option&lt;br&gt;                                  helps debug use of recursive &lt;code&gt;make&lt;/code&gt; commands.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;How to Use Variables&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Reference&quot;&gt;Reference&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use the value of a variable.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variables come in two flavors.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Advanced&quot;&gt;Advanced&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Advanced features for referencing a variable.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Values&quot;&gt;Values&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;All the ways variables get their values.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Setting&quot;&gt;Setting&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to set a variable in the makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Appending&quot;&gt;Appending&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to append more text to the old value&lt;br&gt;                                  of a variable.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Override-Directive&quot;&gt;Override Directive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to set a variable in the makefile even if&lt;br&gt;                                  the user has set it with a command argument.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Multi_002dLine&quot;&gt;Multi-Line&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;An alternate way to set a variable&lt;br&gt;                                  to a multi-line string.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Undefine-Directive&quot;&gt;Undefine Directive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to undefine a variable so that it appears&lt;br&gt;                                  as if it was never set.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Environment&quot;&gt;Environment&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variable values can come from the environment.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Target_002dspecific&quot;&gt;Target-specific&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variable values can be defined on a per-target&lt;br&gt;                                  basis.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Pattern_002dspecific&quot;&gt;Pattern-specific&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Target-specific variable values can be applied&lt;br&gt;                                  to a group of targets that match a pattern.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Suppressing-Inheritance&quot;&gt;Suppressing Inheritance&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Suppress inheritance of variables.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variables with special meaning or behavior.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Advanced Features for Reference to Variables&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Substitution-Refs&quot;&gt;Substitution Refs&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Referencing a variable with&lt;br&gt;                                  substitutions on the value.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Computed-Names&quot;&gt;Computed Names&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Computing the name of the variable to refer to.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Conditional Parts of Makefiles&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Conditional-Example&quot;&gt;Conditional Example&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Example of a conditional&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Conditional-Syntax&quot;&gt;Conditional Syntax&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The syntax of conditionals.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Testing-Flags&quot;&gt;Testing Flags&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Conditionals that test flags.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Functions for Transforming Text&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Syntax-of-Functions&quot;&gt;Syntax of Functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to write a function call.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;General-purpose text manipulation functions.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Functions for manipulating file names.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Conditional-Functions&quot;&gt;Conditional Functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Functions that implement conditions.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Foreach-Function&quot;&gt;Foreach Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Repeat some text with controlled variation.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#File-Function&quot;&gt;File Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Write text to a file.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Call-Function&quot;&gt;Call Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Expand a user-defined function.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Value-Function&quot;&gt;Value Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Return the un-expanded value of a variable.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Eval-Function&quot;&gt;Eval Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Evaluate the arguments as makefile syntax.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Origin-Function&quot;&gt;Origin Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Find where a variable got its value.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Flavor-Function&quot;&gt;Flavor Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Find out the flavor of a variable.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Functions that control how make runs.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Shell-Function&quot;&gt;Shell Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Substitute the output of a shell command.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Guile-Function&quot;&gt;Guile Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Use GNU Guile embedded scripting language.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;How to Run &lt;code&gt;make&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Makefile-Arguments&quot;&gt;Makefile Arguments&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to specify which makefile to use.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use goal arguments to specify which&lt;br&gt;                                  parts of the makefile to use.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use mode flags to specify what&lt;br&gt;                                  kind of thing to do with the recipes&lt;br&gt;                                  in the makefile other than simply&lt;br&gt;                                  execute them.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Avoiding-Compilation&quot;&gt;Avoiding Compilation&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to avoid recompiling certain files.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Overriding&quot;&gt;Overriding&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to override a variable to specify&lt;br&gt;                                  an alternate compiler and other things.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Testing&quot;&gt;Testing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to proceed past some errors, to&lt;br&gt;                                  test compilation.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Summary of Options&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Using Implicit Rules&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Using-Implicit&quot;&gt;Using Implicit&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use an existing implicit rule&lt;br&gt;                                  to get the recipes for updating a file.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;A list of built-in rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to change what predefined rules do.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Chained-Rules&quot;&gt;Chained Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use a chain of implicit rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Pattern-Rules&quot;&gt;Pattern Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to define new implicit rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Last-Resort&quot;&gt;Last Resort&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to define a recipe for rules which&lt;br&gt;                                  cannot find any.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Suffix-Rules&quot;&gt;Suffix Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The old-fashioned style of implicit rule.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Implicit-Rule-Search&quot;&gt;Implicit Rule Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The precise algorithm for applying&lt;br&gt;                                  implicit rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Defining and Redefining Pattern Rules&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Pattern-Intro&quot;&gt;Pattern Intro&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;An introduction to pattern rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Pattern-Examples&quot;&gt;Pattern Examples&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Examples of pattern rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use automatic variables in the&lt;br&gt;                                  recipe of implicit rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Pattern-Match&quot;&gt;Pattern Match&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How patterns match.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Match_002dAnything-Rules&quot;&gt;Match-Anything Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Precautions you should take prior to&lt;br&gt;                                  defining rules that can match any&lt;br&gt;                                  target file whatever.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Canceling-Rules&quot;&gt;Canceling Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to override or cancel built-in rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Using &lt;code&gt;make&lt;/code&gt; to Update Archive Files&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Archive-Members&quot;&gt;Archive Members&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Archive members as targets.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Archive-Update&quot;&gt;Archive Update&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The implicit rule for archive member targets.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Archive-Pitfalls&quot;&gt;Archive Pitfalls&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Dangers to watch out for when using archives.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Archive-Suffix-Rules&quot;&gt;Archive Suffix Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;You can write a special kind of suffix rule&lt;br&gt;                                  for updating archives.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Implicit Rule for Archive Member Targets&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Archive-Symbols&quot;&gt;Archive Symbols&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to update archive symbol directories.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Extending GNU &lt;code&gt;make&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Guile-Integration&quot;&gt;Guile Integration&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using Guile as an embedded scripting language.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Loading-Objects&quot;&gt;Loading Objects&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Loading dynamic objects as extensions.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;GNU Guile Integration&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Guile-Types&quot;&gt;Guile Types&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Converting Guile types to &lt;code&gt;make&lt;/code&gt; strings.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Guile-Interface&quot;&gt;Guile Interface&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Invoking &lt;code&gt;make&lt;/code&gt; functions from Guile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Guile-Example&quot;&gt;Guile Example&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Example using Guile in &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Loading Dynamic Objects&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#load-Directive&quot;&gt;load Directive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Loading dynamic objects as extensions.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Remaking-Loaded-Objects&quot;&gt;Remaking Loaded Objects&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How loaded objects get remade.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Loaded-Object-API&quot;&gt;Loaded Object API&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Programmatic interface for loaded objects.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Loaded-Object-Example&quot;&gt;Loaded Object Example&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Example of a loaded object&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Integrating GNU &lt;code&gt;make&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Job-Slots&quot;&gt;Job Slots&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Share job slots with GNU &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Terminal-Output&quot;&gt;Terminal Output&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Control output to terminals.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;Sharing Job Slots with GNU &lt;code&gt;make&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#POSIX-Jobserver&quot;&gt;POSIX Jobserver&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using the jobserver on POSIX systems.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Windows-Jobserver&quot;&gt;Windows Jobserver&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using the jobserver on Windows systems.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th colspan=&quot;3&quot; align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;pre class=&quot;menu-comment&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Overview&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Introduction&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Introduction&lt;/a&gt;, Previous: &lt;a href=&quot;#Top&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Top&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Overview-of-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;1 Overview of &lt;code&gt;make&lt;/code&gt;&lt;/h2&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;make&lt;/code&gt; utility automatically determines which pieces of a large&lt;br&gt;program need to be recompiled, and issues commands to recompile them.&lt;br&gt;This manual describes GNU &lt;code&gt;make&lt;/code&gt;, which was implemented by Richard&lt;br&gt;Stallman and Roland McGrath.  Development since Version 3.76 has been&lt;br&gt;handled by Paul D. Smith.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;GNU &lt;code&gt;make&lt;/code&gt; conforms to section 6.2 of &lt;cite&gt;IEEE Standard&lt;br&gt;1003.2-1992&lt;/cite&gt; (POSIX.2).&lt;br&gt;&lt;a name=&quot;index-POSIX&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-IEEE-Standard-1003_002e2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-standards-conformance&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Our examples show C programs, since they are most common, but you can use&lt;br&gt;&lt;code&gt;make&lt;/code&gt; with any programming language whose compiler can be run with a&lt;br&gt;shell command.  Indeed, &lt;code&gt;make&lt;/code&gt; is not limited to programs.  You can&lt;br&gt;use it to describe any task where some files must be updated automatically&lt;br&gt;from others whenever the others change.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Preparing&quot; accesskey=&quot;1&quot;&gt;Preparing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Preparing and running &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Reading&quot; accesskey=&quot;2&quot;&gt;Reading&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;On reading this text.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Bugs&quot; accesskey=&quot;3&quot;&gt;Bugs&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Problems and bugs.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Preparing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Reading&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Reading&lt;/a&gt;, Previous: &lt;a href=&quot;#Overview&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Overview&lt;/a&gt;, Up: &lt;a href=&quot;#Overview&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Overview&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;h4 class=&quot;node-heading&quot;&gt;Preparing&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;Preparing-and-Running-Make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;heading&quot;&gt;Preparing and Running Make&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;To prepare to use &lt;code&gt;make&lt;/code&gt;, you must write a file called&lt;br&gt;the &lt;em&gt;makefile&lt;/em&gt; that describes the relationships among files&lt;br&gt;in your program and provides commands for updating each file.&lt;br&gt;In a program, typically, the executable file is updated from object&lt;br&gt;files, which are in turn made by compiling source files.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Once a suitable makefile exists, each time you change some source files,&lt;br&gt;this simple shell command:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;make&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;suffices to perform all necessary recompilations.  The &lt;code&gt;make&lt;/code&gt; program&lt;br&gt;uses the makefile data base and the last-modification times of the files to&lt;br&gt;decide which of the files need to be updated.  For each of those files, it&lt;br&gt;issues the recipes recorded in the data base.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can provide command line arguments to &lt;code&gt;make&lt;/code&gt; to control which&lt;br&gt;files should be recompiled, or how.  See &lt;a href=&quot;#Running&quot;&gt;How to Run&lt;br&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Reading&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Bugs&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Bugs&lt;/a&gt;, Previous: &lt;a href=&quot;#Preparing&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Preparing&lt;/a&gt;, Up: &lt;a href=&quot;#Overview&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Overview&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;How-to-Read-This-Manual&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;1.1 How to Read This Manual&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you are new to &lt;code&gt;make&lt;/code&gt;, or are looking for a general&lt;br&gt;introduction, read the first few sections of each chapter, skipping the&lt;br&gt;later sections.  In each chapter, the first few sections contain&lt;br&gt;introductory or general information and the later sections contain&lt;br&gt;specialized or technical information.&lt;br&gt;The exception is the second chapter, &lt;a href=&quot;#Introduction&quot;&gt;An&lt;br&gt;Introduction to Makefiles&lt;/a&gt;, all of which is introductory.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you are familiar with other &lt;code&gt;make&lt;/code&gt; programs, see &lt;a href=&quot;#Features&quot;&gt;Features of GNU &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;, which lists the enhancements GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt; has, and &lt;a href=&quot;#Missing&quot;&gt;Incompatibilities and Missing&lt;br&gt;Features&lt;/a&gt;, which explains the few things GNU &lt;code&gt;make&lt;/code&gt; lacks that&lt;br&gt;others have.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For a quick summary, see &lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;, &lt;a href=&quot;#Quick-Reference&quot;&gt;Quick Reference&lt;/a&gt;,&lt;br&gt;and &lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Bugs&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Reading&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Reading&lt;/a&gt;, Up: &lt;a href=&quot;#Overview&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Overview&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Problems-and-Bugs&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;1.2 Problems and Bugs&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-reporting-bugs&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-bugs_002c-reporting&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-problems-and-bugs_002c-reporting&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you have problems with GNU &lt;code&gt;make&lt;/code&gt; or think you’ve found a bug,&lt;br&gt;please report it to the developers; we cannot promise to do anything but&lt;br&gt;we might well want to fix it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Before reporting a bug, make sure you’ve actually found a real bug.&lt;br&gt;Carefully reread the documentation and see if it really says you can do&lt;br&gt;what you’re trying to do.  If it’s not clear whether you should be able&lt;br&gt;to do something or not, report that too; it’s a bug in the&lt;br&gt;documentation!&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Before reporting a bug or trying to fix it yourself, try to isolate it&lt;br&gt;to the smallest possible makefile that reproduces the problem.  Then&lt;br&gt;send us the makefile and the exact results &lt;code&gt;make&lt;/code&gt; gave you,&lt;br&gt;including any error or warning messages.  Please don’t paraphrase&lt;br&gt;these messages: it’s best to cut and paste them into your report.&lt;br&gt;When generating this small makefile, be sure to not use any non-free&lt;br&gt;or unusual tools in your recipes: you can almost always emulate what&lt;br&gt;such a tool would do with simple shell commands.  Finally, be sure to&lt;br&gt;explain what you expected to occur; this will help us decide whether&lt;br&gt;the problem was really in the documentation.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Once you have a precise problem you can report it in one of two ways.&lt;br&gt;Either send electronic mail to:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;    bug-make@gnu.org&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;or use our Web-based project management tool, at:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;    &lt;a href=&quot;http://savannah.gnu.org/projects/make/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://savannah.gnu.org/projects/make/&lt;/a&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In addition to the information above, please be careful to include the&lt;br&gt;version number of &lt;code&gt;make&lt;/code&gt; you are using.  You can get this&lt;br&gt;information with the command ‘&lt;samp&gt;make –version&lt;/samp&gt;’.  Be sure also to&lt;br&gt;include the type of machine and operating system you are using.  One&lt;br&gt;way to obtain this information is by looking at the final lines of&lt;br&gt;output from the command ‘&lt;samp&gt;make –help&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Introduction&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Makefiles&lt;/a&gt;, Previous: &lt;a href=&quot;#Overview&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Overview&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;An-Introduction-to-Makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;2 An Introduction to Makefiles&lt;/h2&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;You need a file called a &lt;em&gt;makefile&lt;/em&gt; to tell &lt;code&gt;make&lt;/code&gt; what to do.&lt;br&gt;Most often, the makefile tells &lt;code&gt;make&lt;/code&gt; how to compile and link a&lt;br&gt;program.&lt;br&gt;&lt;a name=&quot;index-makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In this chapter, we will discuss a simple makefile that describes how to&lt;br&gt;compile and link a text editor which consists of eight C source files&lt;br&gt;and three header files.  The makefile can also tell &lt;code&gt;make&lt;/code&gt; how to&lt;br&gt;run miscellaneous commands when explicitly asked (for example, to remove&lt;br&gt;certain files as a clean-up operation).  To see a more complex example&lt;br&gt;of a makefile, see &lt;a href=&quot;#Complex-Makefile&quot;&gt;Complex Makefile&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When &lt;code&gt;make&lt;/code&gt; recompiles the editor, each changed C source file&lt;br&gt;must be recompiled.  If a header file has changed, each C source file&lt;br&gt;that includes the header file must be recompiled to be safe.  Each&lt;br&gt;compilation produces an object file corresponding to the source file.&lt;br&gt;Finally, if any source file has been recompiled, all the object files,&lt;br&gt;whether newly made or saved from previous compilations, must be linked&lt;br&gt;together to produce the new executable editor.&lt;br&gt;&lt;a name=&quot;index-recompilation&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-editor&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Rule-Introduction&quot; accesskey=&quot;1&quot;&gt;Rule Introduction&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;What a rule looks like.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Simple-Makefile&quot; accesskey=&quot;2&quot;&gt;Simple Makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;A simple makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#How-Make-Works&quot; accesskey=&quot;3&quot;&gt;How Make Works&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How &lt;code&gt;make&lt;/code&gt; processes this makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Variables-Simplify&quot; accesskey=&quot;4&quot;&gt;Variables Simplify&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variables make makefiles simpler.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#make-Deduces&quot; accesskey=&quot;5&quot;&gt;make Deduces&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Letting &lt;code&gt;make&lt;/code&gt; deduce the recipes.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Combine-By-Prerequisite&quot; accesskey=&quot;6&quot;&gt;Combine By Prerequisite&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Another style of makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Cleanup&quot; accesskey=&quot;7&quot;&gt;Cleanup&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Rules for cleaning the directory.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Rule-Introduction&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Simple-Makefile&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Simple Makefile&lt;/a&gt;, Previous: &lt;a href=&quot;#Introduction&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Introduction&lt;/a&gt;, Up: &lt;a href=&quot;#Introduction&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Introduction&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;What-a-Rule-Looks-Like&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;2.1 What a Rule Looks Like&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-introduction-to&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makefile-rule-parts&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-parts-of-makefile-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A simple makefile consists of “rules” with the following shape:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-targets_002c-introduction-to&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-prerequisites_002c-introduction-to&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-introduction-to&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;target&lt;/var&gt; … : &lt;var&gt;prerequisites&lt;/var&gt; …&lt;br&gt;        &lt;var&gt;recipe&lt;/var&gt;&lt;br&gt;        …&lt;br&gt;        …&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A &lt;em&gt;target&lt;/em&gt; is usually the name of a file that is generated by a&lt;br&gt;program; examples of targets are executable or object files.  A target&lt;br&gt;can also be the name of an action to carry out, such as ‘&lt;samp&gt;clean&lt;/samp&gt;’&lt;br&gt;(see &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A &lt;em&gt;prerequisite&lt;/em&gt; is a file that is used as input to create the&lt;br&gt;target.  A target often depends on several files.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-tabs-in-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;A &lt;em&gt;recipe&lt;/em&gt; is an action that &lt;code&gt;make&lt;/code&gt; carries out.  A recipe&lt;br&gt;may have more than one command, either on the same line or each on its&lt;br&gt;own line.  &lt;strong&gt;Please note:&lt;/strong&gt; you need to put a tab character at&lt;br&gt;the beginning of every recipe line!  This is an obscurity that catches&lt;br&gt;the unwary.  If you prefer to prefix your recipes with a character&lt;br&gt;other than tab, you can set the &lt;code&gt;.RECIPEPREFIX&lt;/code&gt; variable to an&lt;br&gt;alternate character (see &lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Usually a recipe is in a rule with prerequisites and serves to create a&lt;br&gt;target file if any of the prerequisites change.  However, the rule that&lt;br&gt;specifies a recipe for the target need not have prerequisites.  For&lt;br&gt;example, the rule containing the delete command associated with the&lt;br&gt;target ‘&lt;samp&gt;clean&lt;/samp&gt;’ does not have prerequisites.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A &lt;em&gt;rule&lt;/em&gt;, then, explains how and when to remake certain files&lt;br&gt;which are the targets of the particular rule.  &lt;code&gt;make&lt;/code&gt; carries out&lt;br&gt;the recipe on the prerequisites to create or update the target.  A&lt;br&gt;rule can also explain how and when to carry out an action.&lt;br&gt;See &lt;a href=&quot;#Rules&quot;&gt;Writing Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A makefile may contain other text besides rules, but a simple makefile&lt;br&gt;need only contain rules.  Rules may look somewhat more complicated&lt;br&gt;than shown in this template, but all fit the pattern more or less.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Simple-Makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#How-Make-Works&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;How Make Works&lt;/a&gt;, Previous: &lt;a href=&quot;#Rule-Introduction&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Rule Introduction&lt;/a&gt;, Up: &lt;a href=&quot;#Introduction&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Introduction&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;A-Simple-Makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;2.2 A Simple Makefile&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-simple-makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makefile_002c-simple&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is a straightforward makefile that describes the way an&lt;br&gt;executable file called &lt;code&gt;edit&lt;/code&gt; depends on eight object files&lt;br&gt;which, in turn, depend on eight C source and three header files.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In this example, all the C files include &lt;samp&gt;defs.h&lt;/samp&gt;, but only those&lt;br&gt;defining editing commands include &lt;samp&gt;command.h&lt;/samp&gt;, and only low&lt;br&gt;level files that change the editor buffer include &lt;samp&gt;buffer.h&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;edit : main.o kbd.o command.o display.o \&lt;br&gt;       insert.o search.o files.o utils.o&lt;br&gt;        cc -o edit main.o kbd.o command.o display.o \&lt;br&gt;                   insert.o search.o files.o utils.o&lt;br&gt;&lt;br&gt;main.o : main.c defs.h&lt;br&gt;        cc -c main.c&lt;br&gt;kbd.o : kbd.c defs.h command.h&lt;br&gt;        cc -c kbd.c&lt;br&gt;command.o : command.c defs.h command.h&lt;br&gt;        cc -c command.c&lt;br&gt;display.o : display.c defs.h buffer.h&lt;br&gt;        cc -c display.c&lt;br&gt;insert.o : insert.c defs.h buffer.h&lt;br&gt;        cc -c insert.c&lt;br&gt;search.o : search.c defs.h buffer.h&lt;br&gt;        cc -c search.c&lt;br&gt;files.o : files.c defs.h buffer.h command.h&lt;br&gt;        cc -c files.c&lt;br&gt;utils.o : utils.c defs.h&lt;br&gt;        cc -c utils.c&lt;br&gt;clean :&lt;br&gt;        rm edit main.o kbd.o command.o display.o \&lt;br&gt;           insert.o search.o files.o utils.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;We split each long line into two lines using backslash/newline; this is&lt;br&gt;like using one long line, but is easier to read.  See &lt;a href=&quot;#Splitting-Lines&quot;&gt;Splitting Long Lines&lt;/a&gt;.&lt;br&gt;&lt;a name=&quot;index-continuation-lines&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_005c-_0028backslash_0029_002c-for-continuation-lines&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-backslash-_0028_005c_0029_002c-for-continuation-lines&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-quoting-newline_002c-in-makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-newline_002c-quoting_002c-in-makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To use this makefile to create the executable file called &lt;samp&gt;edit&lt;/samp&gt;,&lt;br&gt;type:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;make&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;To use this makefile to delete the executable file and all the object&lt;br&gt;files from the directory, type:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;make clean&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In the example makefile, the targets include the executable file&lt;br&gt;‘&lt;samp&gt;edit&lt;/samp&gt;’, and the object files ‘&lt;samp&gt;main.o&lt;/samp&gt;’ and ‘&lt;samp&gt;kbd.o&lt;/samp&gt;’.  The&lt;br&gt;prerequisites are files such as ‘&lt;samp&gt;main.c&lt;/samp&gt;’ and ‘&lt;samp&gt;defs.h&lt;/samp&gt;’.&lt;br&gt;In fact, each ‘&lt;samp&gt;.o&lt;/samp&gt;’ file is both a target and a prerequisite.&lt;br&gt;Recipes include ‘&lt;samp&gt;cc&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-c&lt;/span&gt;&amp;nbsp;main.c&lt;/samp&gt;’&lt;!-- /@w --&gt; and ‘&lt;samp&gt;cc&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-c&lt;/span&gt;&amp;nbsp;kbd.c&lt;/samp&gt;’&lt;!-- /@w --&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When a target is a file, it needs to be recompiled or relinked if any&lt;br&gt;of its prerequisites change.  In addition, any prerequisites that are&lt;br&gt;themselves automatically generated should be updated first.  In this&lt;br&gt;example, &lt;samp&gt;edit&lt;/samp&gt; depends on each of the eight object files; the&lt;br&gt;object file &lt;samp&gt;main.o&lt;/samp&gt; depends on the source file &lt;samp&gt;main.c&lt;/samp&gt; and&lt;br&gt;on the header file &lt;samp&gt;defs.h&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A recipe may follow each line that contains a target and&lt;br&gt;prerequisites.  These recipes say how to update the target file.  A&lt;br&gt;tab character (or whatever character is specified by the&lt;br&gt;&lt;code&gt;.RECIPEPREFIX&lt;/code&gt; variable; see &lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;) must come at&lt;br&gt;the beginning of every line in the recipe to distinguish recipes from&lt;br&gt;other lines in the makefile.  (Bear in mind that &lt;code&gt;make&lt;/code&gt; does not&lt;br&gt;know anything about how the recipes work.  It is up to you to supply&lt;br&gt;recipes that will update the target file properly.  All &lt;code&gt;make&lt;/code&gt;&lt;br&gt;does is execute the recipe you have specified when the target file&lt;br&gt;needs to be updated.)&lt;br&gt;&lt;a name=&quot;index-recipe&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The target ‘&lt;samp&gt;clean&lt;/samp&gt;’ is not a file, but merely the name of an&lt;br&gt;action.  Since you normally do not want to carry out the actions in&lt;br&gt;this rule, ‘&lt;samp&gt;clean&lt;/samp&gt;’ is not a prerequisite of any other rule.&lt;br&gt;Consequently, &lt;code&gt;make&lt;/code&gt; never does anything with it unless you tell&lt;br&gt;it specifically.  Note that this rule not only is not a prerequisite,&lt;br&gt;it also does not have any prerequisites, so the only purpose of the&lt;br&gt;rule is to run the specified recipe.  Targets that do not refer to&lt;br&gt;files but are just actions are called &lt;em&gt;phony targets&lt;/em&gt;.&lt;br&gt;See &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;, for information about this kind of target.&lt;br&gt;See &lt;a href=&quot;#Errors&quot;&gt;Errors in Recipes&lt;/a&gt;, to see how to cause &lt;code&gt;make&lt;/code&gt;&lt;br&gt;to ignore errors from &lt;code&gt;rm&lt;/code&gt; or any other command.&lt;br&gt;&lt;a name=&quot;index-clean-target&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rm-_0028shell-command_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;How-Make-Works&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Variables-Simplify&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Variables Simplify&lt;/a&gt;, Previous: &lt;a href=&quot;#Simple-Makefile&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Simple Makefile&lt;/a&gt;, Up: &lt;a href=&quot;#Introduction&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Introduction&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;How-make-Processes-a-Makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;2.3 How &lt;code&gt;make&lt;/code&gt; Processes a Makefile&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-processing-a-makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makefile_002c-how-make-processes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;By default, &lt;code&gt;make&lt;/code&gt; starts with the first target (not targets whose&lt;br&gt;names start with ‘&lt;samp&gt;.&lt;/samp&gt;’).  This is called the &lt;em&gt;default goal&lt;/em&gt;.&lt;br&gt;(&lt;em&gt;Goals&lt;/em&gt; are the targets that &lt;code&gt;make&lt;/code&gt; strives ultimately to&lt;br&gt;update.    You can override this behavior using the command line&lt;br&gt;(see &lt;a href=&quot;#Goals&quot;&gt;Arguments to Specify the Goals&lt;/a&gt;) or with the&lt;br&gt;&lt;code&gt;.DEFAULT_GOAL&lt;/code&gt; special variable (see &lt;a href=&quot;#Special-Variables&quot;&gt;Other Special Variables&lt;/a&gt;).&lt;br&gt;&lt;a name=&quot;index-default-goal&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-goal_002c-default&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-goal&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In the simple example of the previous section, the default goal is to&lt;br&gt;update the executable program &lt;samp&gt;edit&lt;/samp&gt;; therefore, we put that rule&lt;br&gt;first.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Thus, when you give the command:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;make&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; reads the makefile in the current directory and begins by&lt;br&gt;processing the first rule.  In the example, this rule is for relinking&lt;br&gt;&lt;samp&gt;edit&lt;/samp&gt;; but before &lt;code&gt;make&lt;/code&gt; can fully process this rule, it&lt;br&gt;must process the rules for the files that &lt;samp&gt;edit&lt;/samp&gt; depends on,&lt;br&gt;which in this case are the object files.  Each of these files is&lt;br&gt;processed according to its own rule.  These rules say to update each&lt;br&gt;‘&lt;samp&gt;.o&lt;/samp&gt;’ file by compiling its source file.  The recompilation must&lt;br&gt;be done if the source file, or any of the header files named as&lt;br&gt;prerequisites, is more recent than the object file, or if the object&lt;br&gt;file does not exist.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The other rules are processed because their targets appear as&lt;br&gt;prerequisites of the goal.  If some other rule is not depended on by the&lt;br&gt;goal (or anything it depends on, etc.), that rule is not processed,&lt;br&gt;unless you tell &lt;code&gt;make&lt;/code&gt; to do so (with a command such as&lt;br&gt;&lt;code&gt;make&amp;nbsp;clean&lt;/code&gt;&lt;!-- /@w --&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Before recompiling an object file, &lt;code&gt;make&lt;/code&gt; considers updating its&lt;br&gt;prerequisites, the source file and header files.  This makefile does not&lt;br&gt;specify anything to be done for them—the ‘&lt;samp&gt;.c&lt;/samp&gt;’ and ‘&lt;samp&gt;.h&lt;/samp&gt;’ files&lt;br&gt;are not the targets of any rules—so &lt;code&gt;make&lt;/code&gt; does nothing for these&lt;br&gt;files.  But &lt;code&gt;make&lt;/code&gt; would update automatically generated C programs,&lt;br&gt;such as those made by Bison or Yacc, by their own rules at this time.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;After recompiling whichever object files need it, &lt;code&gt;make&lt;/code&gt; decides&lt;br&gt;whether to relink &lt;samp&gt;edit&lt;/samp&gt;.  This must be done if the file&lt;br&gt;&lt;samp&gt;edit&lt;/samp&gt; does not exist, or if any of the object files are newer than&lt;br&gt;it.  If an object file was just recompiled, it is now newer than&lt;br&gt;&lt;samp&gt;edit&lt;/samp&gt;, so &lt;samp&gt;edit&lt;/samp&gt; is relinked.&lt;br&gt;&lt;a name=&quot;index-relinking&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Thus, if we change the file &lt;samp&gt;insert.c&lt;/samp&gt; and run &lt;code&gt;make&lt;/code&gt;,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; will compile that file to update &lt;samp&gt;insert.o&lt;/samp&gt;, and then&lt;br&gt;link &lt;samp&gt;edit&lt;/samp&gt;.  If we change the file &lt;samp&gt;command.h&lt;/samp&gt; and run&lt;br&gt;&lt;code&gt;make&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt; will recompile the object files &lt;samp&gt;kbd.o&lt;/samp&gt;,&lt;br&gt;&lt;samp&gt;command.o&lt;/samp&gt; and &lt;samp&gt;files.o&lt;/samp&gt; and then link the file &lt;samp&gt;edit&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Variables-Simplify&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#make-Deduces&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;make Deduces&lt;/a&gt;, Previous: &lt;a href=&quot;#How-Make-Works&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;How Make Works&lt;/a&gt;, Up: &lt;a href=&quot;#Introduction&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Introduction&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Variables-Make-Makefiles-Simpler&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;2.4 Variables Make Makefiles Simpler&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-simplifying-with-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In our example, we had to list all the object files twice in the rule for&lt;br&gt;&lt;samp&gt;edit&lt;/samp&gt; (repeated here):&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;edit : main.o kbd.o command.o display.o \&lt;br&gt;              insert.o search.o files.o utils.o&lt;br&gt;        cc -o edit main.o kbd.o command.o display.o \&lt;br&gt;                   insert.o search.o files.o utils.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-objects&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Such duplication is error-prone; if a new object file is added to the&lt;br&gt;system, we might add it to one list and forget the other.  We can eliminate&lt;br&gt;the risk and simplify the makefile by using a variable.  &lt;em&gt;Variables&lt;/em&gt;&lt;br&gt;allow a text string to be defined once and substituted in multiple places&lt;br&gt;later (see &lt;a href=&quot;#Using-Variables&quot;&gt;How to Use Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-OBJECTS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-objs&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-OBJS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-obj&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-OBJ&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;It is standard practice for every makefile to have a variable named&lt;br&gt;&lt;code&gt;objects&lt;/code&gt;, &lt;code&gt;OBJECTS&lt;/code&gt;, &lt;code&gt;objs&lt;/code&gt;, &lt;code&gt;OBJS&lt;/code&gt;, &lt;code&gt;obj&lt;/code&gt;,&lt;br&gt;or &lt;code&gt;OBJ&lt;/code&gt; which is a list of all object file names.  We would&lt;br&gt;define such a variable &lt;code&gt;objects&lt;/code&gt; with a line like this in the&lt;br&gt;makefile:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = main.o kbd.o command.o display.o \&lt;br&gt;          insert.o search.o files.o utils.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Then, each place we want to put a list of the object file names, we can&lt;br&gt;substitute the variable’s value by writing ‘&lt;samp&gt;$(objects)&lt;/samp&gt;’&lt;br&gt;(see &lt;a href=&quot;#Using-Variables&quot;&gt;How to Use Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is how the complete simple makefile looks when you use a variable&lt;br&gt;for the object files:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = main.o kbd.o command.o display.o \&lt;br&gt;          insert.o search.o files.o utils.o&lt;br&gt;&lt;br&gt;edit : $(objects)&lt;br&gt;        cc -o edit $(objects)&lt;br&gt;main.o : main.c defs.h&lt;br&gt;        cc -c main.c&lt;br&gt;kbd.o : kbd.c defs.h command.h&lt;br&gt;        cc -c kbd.c&lt;br&gt;command.o : command.c defs.h command.h&lt;br&gt;        cc -c command.c&lt;br&gt;display.o : display.c defs.h buffer.h&lt;br&gt;        cc -c display.c&lt;br&gt;insert.o : insert.c defs.h buffer.h&lt;br&gt;        cc -c insert.c&lt;br&gt;search.o : search.c defs.h buffer.h&lt;br&gt;        cc -c search.c&lt;br&gt;files.o : files.c defs.h buffer.h command.h&lt;br&gt;        cc -c files.c&lt;br&gt;utils.o : utils.c defs.h&lt;br&gt;        cc -c utils.c&lt;br&gt;clean :&lt;br&gt;        rm edit $(objects)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;make-Deduces&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Combine-By-Prerequisite&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Combine By Prerequisite&lt;/a&gt;, Previous: &lt;a href=&quot;#Variables-Simplify&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Variables Simplify&lt;/a&gt;, Up: &lt;a href=&quot;#Introduction&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Introduction&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Letting-make-Deduce-the-Recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;2.5 Letting &lt;code&gt;make&lt;/code&gt; Deduce the Recipes&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-deducing-recipes-_0028implicit-rules_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-implicit-rule_002c-introduction-to&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-implicit_002c-introduction-to&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;It is not necessary to spell out the recipes for compiling the individual&lt;br&gt;C source files, because &lt;code&gt;make&lt;/code&gt; can figure them out: it has an&lt;br&gt;&lt;em&gt;implicit rule&lt;/em&gt; for updating a ‘&lt;samp&gt;.o&lt;/samp&gt;’ file from a correspondingly&lt;br&gt;named ‘&lt;samp&gt;.c&lt;/samp&gt;’ file using a ‘&lt;samp&gt;cc -c&lt;/samp&gt;’ command.  For example, it will&lt;br&gt;use the recipe ‘&lt;samp&gt;cc -c main.c -o main.o&lt;/samp&gt;’ to compile &lt;samp&gt;main.c&lt;/samp&gt; into&lt;br&gt;&lt;samp&gt;main.o&lt;/samp&gt;.  We can therefore omit the recipes from the rules for the&lt;br&gt;object files.  See &lt;a href=&quot;#Implicit-Rules&quot;&gt;Using Implicit Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When a ‘&lt;samp&gt;.c&lt;/samp&gt;’ file is used automatically in this way, it is also&lt;br&gt;automatically added to the list of prerequisites.  We can therefore omit&lt;br&gt;the ‘&lt;samp&gt;.c&lt;/samp&gt;’ files from the prerequisites, provided we omit the recipe.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is the entire example, with both of these changes, and a variable&lt;br&gt;&lt;code&gt;objects&lt;/code&gt; as suggested above:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = main.o kbd.o command.o display.o \&lt;br&gt;          insert.o search.o files.o utils.o&lt;br&gt;&lt;br&gt;edit : $(objects)&lt;br&gt;        cc -o edit $(objects)&lt;br&gt;&lt;br&gt;main.o : defs.h&lt;br&gt;kbd.o : defs.h command.h&lt;br&gt;command.o : defs.h command.h&lt;br&gt;display.o : defs.h buffer.h&lt;br&gt;insert.o : defs.h buffer.h&lt;br&gt;search.o : defs.h buffer.h&lt;br&gt;files.o : defs.h buffer.h command.h&lt;br&gt;utils.o : defs.h&lt;br&gt;&lt;br&gt;.PHONY : clean&lt;br&gt;clean :&lt;br&gt;        rm edit $(objects)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This is how we would write the makefile in actual practice.  (The&lt;br&gt;complications associated with ‘&lt;samp&gt;clean&lt;/samp&gt;’ are described elsewhere.&lt;br&gt;See &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;, and &lt;a href=&quot;#Errors&quot;&gt;Errors in Recipes&lt;/a&gt;.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Because implicit rules are so convenient, they are important.  You&lt;br&gt;will see them used frequently.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Combine-By-Prerequisite&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Cleanup&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Cleanup&lt;/a&gt;, Previous: &lt;a href=&quot;#make-Deduces&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;make Deduces&lt;/a&gt;, Up: &lt;a href=&quot;#Introduction&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Introduction&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Another-Style-of-Makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;2.6 Another Style of Makefile&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-combining-rules-by-prerequisite&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When the objects of a makefile are created only by implicit rules, an&lt;br&gt;alternative style of makefile is possible.  In this style of makefile,&lt;br&gt;you group entries by their prerequisites instead of by their targets.&lt;br&gt;Here is what one looks like:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = main.o kbd.o command.o display.o \&lt;br&gt;          insert.o search.o files.o utils.o&lt;br&gt;&lt;br&gt;edit : $(objects)&lt;br&gt;        cc -o edit $(objects)&lt;br&gt;&lt;br&gt;$(objects) : defs.h&lt;br&gt;kbd.o command.o files.o : command.h&lt;br&gt;display.o insert.o search.o files.o : buffer.h&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here &lt;samp&gt;defs.h&lt;/samp&gt; is given as a prerequisite of all the object files;&lt;br&gt;&lt;samp&gt;command.h&lt;/samp&gt; and &lt;samp&gt;buffer.h&lt;/samp&gt; are prerequisites of the specific&lt;br&gt;object files listed for them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Whether this is better is a matter of taste: it is more compact, but some&lt;br&gt;people dislike it because they find it clearer to put all the information&lt;br&gt;about each target in one place.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Cleanup&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Combine-By-Prerequisite&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Combine By Prerequisite&lt;/a&gt;, Up: &lt;a href=&quot;#Introduction&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Introduction&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Rules-for-Cleaning-the-Directory&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;2.7 Rules for Cleaning the Directory&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-cleaning-up&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-removing_002c-to-clean-up&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Compiling a program is not the only thing you might want to write rules&lt;br&gt;for.  Makefiles commonly tell how to do a few other things besides&lt;br&gt;compiling a program: for example, how to delete all the object files&lt;br&gt;and executables so that the directory is ‘&lt;samp&gt;clean&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-clean-target-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Here is how we&lt;br&gt;could write a &lt;code&gt;make&lt;/code&gt; rule for cleaning our example editor:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;clean:&lt;br&gt;        rm edit $(objects)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In practice, we might want to write the rule in a somewhat more&lt;br&gt;complicated manner to handle unanticipated situations.  We would do this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.PHONY : clean&lt;br&gt;clean :&lt;br&gt;        -rm edit $(objects)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This prevents &lt;code&gt;make&lt;/code&gt; from getting confused by an actual file&lt;br&gt;called &lt;samp&gt;clean&lt;/samp&gt; and causes it to continue in spite of errors from&lt;br&gt;&lt;code&gt;rm&lt;/code&gt;.  (See &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;, and &lt;a href=&quot;#Errors&quot;&gt;Errors in&lt;br&gt;Recipes&lt;/a&gt;.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A rule such as this should not be placed at the beginning of the&lt;br&gt;makefile, because we do not want it to run by default!  Thus, in the&lt;br&gt;example makefile, we want the rule for &lt;code&gt;edit&lt;/code&gt;, which recompiles&lt;br&gt;the editor, to remain the default goal.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Since &lt;code&gt;clean&lt;/code&gt; is not a prerequisite of &lt;code&gt;edit&lt;/code&gt;, this rule will not&lt;br&gt;run at all if we give the command ‘&lt;samp&gt;make&lt;/samp&gt;’ with no arguments.  In&lt;br&gt;order to make the rule run, we have to type ‘&lt;samp&gt;make clean&lt;/samp&gt;’.&lt;br&gt;See &lt;a href=&quot;#Running&quot;&gt;How to Run &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Rules&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Rules&lt;/a&gt;, Previous: &lt;a href=&quot;#Introduction&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Introduction&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Writing-Makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;3 Writing Makefiles&lt;/h2&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-makefile_002c-how-to-write&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The information that tells &lt;code&gt;make&lt;/code&gt; how to recompile a system comes from&lt;br&gt;reading a data base called the &lt;em&gt;makefile&lt;/em&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Makefile-Contents&quot; accesskey=&quot;1&quot;&gt;Makefile Contents&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;What makefiles contain.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Makefile-Names&quot; accesskey=&quot;2&quot;&gt;Makefile Names&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to name your makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Include&quot; accesskey=&quot;3&quot;&gt;Include&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How one makefile can use another makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#MAKEFILES-Variable&quot; accesskey=&quot;4&quot;&gt;MAKEFILES Variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The environment can specify extra makefiles.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Remaking-Makefiles&quot; accesskey=&quot;5&quot;&gt;Remaking Makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How makefiles get remade.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Overriding-Makefiles&quot; accesskey=&quot;6&quot;&gt;Overriding Makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to override part of one makefile&lt;br&gt;                                  with another makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Reading-Makefiles&quot; accesskey=&quot;7&quot;&gt;Reading Makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How makefiles are parsed.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Secondary-Expansion&quot; accesskey=&quot;8&quot;&gt;Secondary Expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How and when secondary expansion is performed.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Makefile-Contents&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Makefile-Names&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Makefile Names&lt;/a&gt;, Previous: &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Makefiles&lt;/a&gt;, Up: &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefiles&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;What-Makefiles-Contain&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;3.1 What Makefiles Contain&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Makefiles contain five kinds of things: &lt;em&gt;explicit rules&lt;/em&gt;,&lt;br&gt;&lt;em&gt;implicit rules&lt;/em&gt;, &lt;em&gt;variable definitions&lt;/em&gt;, &lt;em&gt;directives&lt;/em&gt;,&lt;br&gt;and &lt;em&gt;comments&lt;/em&gt;.  Rules, variables, and directives are described at&lt;br&gt;length in later chapters.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; &lt;a name=&quot;index-rule_002c-explicit_002c-definition-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-explicit-rule_002c-definition-of&quot;&gt;&lt;/a&gt;&lt;br&gt;An &lt;em&gt;explicit rule&lt;/em&gt; says when and how to remake one or more files,&lt;br&gt;called the rule’s &lt;em&gt;targets&lt;/em&gt;.  It lists the other files that the&lt;br&gt;targets depend on, called the &lt;em&gt;prerequisites&lt;/em&gt; of the target, and&lt;br&gt;may also give a recipe to use to create or update the targets.&lt;br&gt;See &lt;a href=&quot;#Rules&quot;&gt;Writing Rules&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; &lt;a name=&quot;index-rule_002c-implicit_002c-definition-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-implicit-rule_002c-definition-of&quot;&gt;&lt;/a&gt;&lt;br&gt;An &lt;em&gt;implicit rule&lt;/em&gt; says when and how to remake a class of files&lt;br&gt;based on their names.  It describes how a target may depend on a file&lt;br&gt;with a name similar to the target and gives a recipe to create or&lt;br&gt;update such a target.  See &lt;a href=&quot;#Implicit-Rules&quot;&gt;Using Implicit Rules&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; &lt;a name=&quot;index-variable-definition&quot;&gt;&lt;/a&gt;&lt;br&gt;A &lt;em&gt;variable definition&lt;/em&gt; is a line that specifies a text string&lt;br&gt;value for a variable that can be substituted into the text later.  The&lt;br&gt;simple makefile example shows a variable definition for &lt;code&gt;objects&lt;/code&gt;&lt;br&gt;as a list of all object files (see &lt;a href=&quot;#Variables-Simplify&quot;&gt;Variables&lt;br&gt;Make Makefiles Simpler&lt;/a&gt;).&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; &lt;a name=&quot;index-directive&quot;&gt;&lt;/a&gt;&lt;br&gt;A &lt;em&gt;directive&lt;/em&gt; is an instruction for &lt;code&gt;make&lt;/code&gt; to do something&lt;br&gt;special while reading the makefile.  These include:&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; Reading another makefile (see &lt;a href=&quot;#Include&quot;&gt;Including Other Makefiles&lt;/a&gt;).&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Deciding (based on the values of variables) whether to use or&lt;br&gt;ignore a part of the makefile (see &lt;a href=&quot;#Conditionals&quot;&gt;Conditional Parts of Makefiles&lt;/a&gt;).&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Defining a variable from a verbatim string containing multiple lines&lt;br&gt;(see &lt;a href=&quot;#Multi_002dLine&quot;&gt;Defining Multi-Line Variables&lt;/a&gt;).&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; &lt;a name=&quot;index-comments_002c-in-makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0023-_0028comments_0029_002c-in-makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;‘&lt;samp&gt;#&lt;/samp&gt;’ in a line of a makefile starts a &lt;em&gt;comment&lt;/em&gt;.  It and the&lt;br&gt;rest of the line are ignored, except that a trailing backslash not&lt;br&gt;escaped by another backslash will continue the comment across multiple&lt;br&gt;lines.  A line containing just a comment (with perhaps spaces before&lt;br&gt;it) is effectively blank, and is ignored.  If you want a literal&lt;br&gt;&lt;code&gt;#&lt;/code&gt;, escape it with a backslash (e.g., &lt;code&gt;#&lt;/code&gt;).  Comments may&lt;br&gt;appear on any line in the makefile, although they are treated&lt;br&gt;specially in certain situations.&lt;br&gt;&lt;br&gt;&lt;p&gt;You cannot use comments within variable references or function calls:&lt;br&gt;any instance of &lt;code&gt;#&lt;/code&gt; will be treated literally (rather than as the&lt;br&gt;start of a comment) inside a variable reference or function call.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Comments within a recipe are passed to the shell, just as with any&lt;br&gt;other recipe text.  The shell decides how to interpret it: whether or&lt;br&gt;not this is a comment is up to the shell.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Within a &lt;code&gt;define&lt;/code&gt; directive, comments are not ignored during the&lt;br&gt;definition of the variable, but rather kept intact in the value of the&lt;br&gt;variable.  When the variable is expanded they will either be treated&lt;br&gt;as &lt;code&gt;make&lt;/code&gt; comments or as recipe text, depending on the context in&lt;br&gt;which the variable is evaluated.&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Splitting-Lines&quot; accesskey=&quot;1&quot;&gt;Splitting Lines&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Splitting long lines in makefiles&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Splitting-Lines&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Makefile-Contents&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Makefile Contents&lt;/a&gt;, Up: &lt;a href=&quot;#Makefile-Contents&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefile Contents&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Splitting-Long-Lines&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;3.1.1 Splitting Long Lines&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-splitting-long-lines&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-long-lines_002c-splitting&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-backslash-_0028_005c_0029_002c-to-quote-newlines&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Makefiles use a “line-based” syntax in which the newline character&lt;br&gt;is special and marks the end of a statement.  GNU &lt;code&gt;make&lt;/code&gt; has no&lt;br&gt;limit on the length of a statement line, up to the amount of memory in&lt;br&gt;your computer.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;However, it is difficult to read lines which are too long to display&lt;br&gt;without wrapping or scrolling.  So, you can format your makefiles for&lt;br&gt;readability by adding newlines into the middle of a statement: you do&lt;br&gt;this by escaping the internal newlines with a backslash (&lt;code&gt;\&lt;/code&gt;)&lt;br&gt;character.  Where we need to make a distinction we will refer to&lt;br&gt;“physical lines” as a single line ending with a newline (regardless&lt;br&gt;of whether it is escaped) and a “logical line” being a complete&lt;br&gt;statement including all escaped newlines up to the first non-escaped&lt;br&gt;newline.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The way in which backslash/newline combinations are handled depends on&lt;br&gt;whether the statement is a recipe line or a non-recipe line.  Handling&lt;br&gt;of backslash/newline in a recipe line is discussed later&lt;br&gt;(see &lt;a href=&quot;#Splitting-Recipe-Lines&quot;&gt;Splitting Recipe Lines&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Outside of recipe lines, backslash/newlines are converted into a&lt;br&gt;single space character.  Once that is done, all whitespace around the&lt;br&gt;backslash/newline is condensed into a single space: this includes all&lt;br&gt;whitespace preceding the backslash, all whitespace at the beginning of&lt;br&gt;the line after the backslash/newline, and any consecutive&lt;br&gt;backslash/newline combinations.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the &lt;code&gt;.POSIX&lt;/code&gt; special target is defined then backslash/newline&lt;br&gt;handling is modified slightly to conform to POSIX.2: first, whitespace&lt;br&gt;preceding a backslash is not removed and second, consecutive&lt;br&gt;backslash/newlines are not condensed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Makefile-Names&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Include&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Include&lt;/a&gt;, Previous: &lt;a href=&quot;#Makefile-Contents&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Makefile Contents&lt;/a&gt;, Up: &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefiles&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;What-Name-to-Give-Your-Makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;3.2 What Name to Give Your Makefile&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-makefile-name&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-name-of-makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-default-makefile-name&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name-of-makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;By default, when &lt;code&gt;make&lt;/code&gt; looks for the makefile, it tries the&lt;br&gt;following names, in order: &lt;samp&gt;GNUmakefile&lt;/samp&gt;, &lt;samp&gt;makefile&lt;/samp&gt;&lt;br&gt;and &lt;samp&gt;Makefile&lt;/samp&gt;.&lt;br&gt;&lt;a name=&quot;index-Makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-GNUmakefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makefile-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-README&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Normally you should call your makefile either &lt;samp&gt;makefile&lt;/samp&gt; or&lt;br&gt;&lt;samp&gt;Makefile&lt;/samp&gt;.  (We recommend &lt;samp&gt;Makefile&lt;/samp&gt; because it appears&lt;br&gt;prominently near the beginning of a directory listing, right near other&lt;br&gt;important files such as &lt;samp&gt;README&lt;/samp&gt;.)  The first name checked,&lt;br&gt;&lt;samp&gt;GNUmakefile&lt;/samp&gt;, is not recommended for most makefiles.  You should&lt;br&gt;use this name if you have a makefile that is specific to GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt;, and will not be understood by other versions of&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.  Other &lt;code&gt;make&lt;/code&gt; programs look for &lt;samp&gt;makefile&lt;/samp&gt; and&lt;br&gt;&lt;samp&gt;Makefile&lt;/samp&gt;, but not &lt;samp&gt;GNUmakefile&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If &lt;code&gt;make&lt;/code&gt; finds none of these names, it does not use any makefile.&lt;br&gt;Then you must specify a goal with a command argument, and &lt;code&gt;make&lt;/code&gt;&lt;br&gt;will attempt to figure out how to remake it using only its built-in&lt;br&gt;implicit rules.  See &lt;a href=&quot;#Implicit-Rules&quot;&gt;Using Implicit Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002df&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dfile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dmakefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;If you want to use a nonstandard name for your makefile, you can specify&lt;br&gt;the makefile name with the ‘&lt;samp&gt;-f&lt;/samp&gt;’ or ‘&lt;samp&gt;–file&lt;/samp&gt;’ option.  The&lt;br&gt;arguments ‘&lt;samp&gt;&lt;span class=&quot;nolinebreak&quot;&gt;-f&lt;/span&gt;&amp;nbsp;&lt;var&gt;name&lt;/var&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; or ‘&lt;samp&gt;&lt;span class=&quot;nolinebreak&quot;&gt;–file=&lt;/span&gt;&lt;var&gt;name&lt;/var&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; tell&lt;br&gt;&lt;code&gt;make&lt;/code&gt; to read the file &lt;var&gt;name&lt;/var&gt; as the makefile.  If you use&lt;br&gt;more than one ‘&lt;samp&gt;-f&lt;/samp&gt;’ or ‘&lt;samp&gt;–file&lt;/samp&gt;’ option, you can specify several&lt;br&gt;makefiles.  All the makefiles are effectively concatenated in the order&lt;br&gt;specified.  The default makefile names &lt;samp&gt;GNUmakefile&lt;/samp&gt;,&lt;br&gt;&lt;samp&gt;makefile&lt;/samp&gt; and &lt;samp&gt;Makefile&lt;/samp&gt; are not checked automatically if you&lt;br&gt;specify ‘&lt;samp&gt;-f&lt;/samp&gt;’ or ‘&lt;samp&gt;–file&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-specifying-makefile-name&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makefile-name_002c-how-to-specify&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-name-of-makefile_002c-how-to-specify&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name-of-makefile_002c-how-to-specify&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Include&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#MAKEFILES-Variable&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;MAKEFILES Variable&lt;/a&gt;, Previous: &lt;a href=&quot;#Makefile-Names&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Makefile Names&lt;/a&gt;, Up: &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefiles&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Including-Other-Makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;3.3 Including Other Makefiles&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-including-other-makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makefile_002c-including&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-include&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;include&lt;/code&gt; directive tells &lt;code&gt;make&lt;/code&gt; to suspend reading the&lt;br&gt;current makefile and read one or more other makefiles before continuing.&lt;br&gt;The directive is a line in the makefile that looks like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;include &lt;var&gt;filenames&lt;/var&gt;…&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;var&gt;filenames&lt;/var&gt; can contain shell file name patterns.  If&lt;br&gt;&lt;var&gt;filenames&lt;/var&gt; is empty, nothing is included and no error is printed.&lt;br&gt;&lt;a name=&quot;index-shell-file-name-pattern-_0028in-include_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-shell-wildcards-_0028in-include_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-wildcard_002c-in-include&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Extra spaces are allowed and ignored at the beginning of the line, but&lt;br&gt;the first character must not be a tab (or the value of&lt;br&gt;&lt;code&gt;.RECIPEPREFIX&lt;/code&gt;)—if the line begins with a tab, it will be&lt;br&gt;considered a recipe line.  Whitespace is required between&lt;br&gt;&lt;code&gt;include&lt;/code&gt; and the file names, and between file names; extra&lt;br&gt;whitespace is ignored there and at the end of the directive.  A&lt;br&gt;comment starting with ‘&lt;samp&gt;#&lt;/samp&gt;’ is allowed at the end of the line.  If&lt;br&gt;the file names contain any variable or function references, they are&lt;br&gt;expanded.  See &lt;a href=&quot;#Using-Variables&quot;&gt;How to Use Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, if you have three &lt;samp&gt;.mk&lt;/samp&gt; files, &lt;samp&gt;a.mk&lt;/samp&gt;,&lt;br&gt;&lt;samp&gt;b.mk&lt;/samp&gt;, and &lt;samp&gt;c.mk&lt;/samp&gt;, and &lt;code&gt;$(bar)&lt;/code&gt; expands to&lt;br&gt;&lt;code&gt;bish bash&lt;/code&gt;, then the following expression&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;include foo &lt;em&gt;.mk $(bar)&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;is equivalent to&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;include foo a.mk b.mk c.mk bish bash&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When &lt;code&gt;make&lt;/code&gt; processes an &lt;code&gt;include&lt;/code&gt; directive, it suspends&lt;br&gt;reading of the containing makefile and reads from each listed file in&lt;br&gt;turn.  When that is finished, &lt;code&gt;make&lt;/code&gt; resumes reading the&lt;br&gt;makefile in which the directive appears.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;One occasion for using &lt;code&gt;include&lt;/code&gt; directives is when several programs,&lt;br&gt;handled by individual makefiles in various directories, need to use a&lt;br&gt;common set of variable definitions&lt;br&gt;(see &lt;a href=&quot;#Setting&quot;&gt;Setting Variables&lt;/a&gt;) or pattern rules&lt;br&gt;(see &lt;a href=&quot;#Pattern-Rules&quot;&gt;Defining and Redefining Pattern Rules&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Another such occasion is when you want to generate prerequisites from&lt;br&gt;source files automatically; the prerequisites can be put in a file that&lt;br&gt;is included by the main makefile.  This practice is generally cleaner&lt;br&gt;than that of somehow appending the prerequisites to the end of the main&lt;br&gt;makefile as has been traditionally done with other versions of&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.  See &lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;.&lt;br&gt;&lt;a name=&quot;index-prerequisites_002c-automatic-generation&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-automatic-generation-of-prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-generating-prerequisites-automatically&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002dI&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dinclude_002ddir&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-included-makefiles_002c-default-directories&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-default-directories-for-included-makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002fusr_002fgnu_002finclude&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002fusr_002flocal_002finclude&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002fusr_002finclude&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;If the specified name does not start with a slash, and the file is not&lt;br&gt;found in the current directory, several other directories are searched.&lt;br&gt;First, any directories you have specified with the ‘&lt;samp&gt;-I&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;–include-dir&lt;/samp&gt;’ option are searched&lt;br&gt;(see &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;).&lt;br&gt;Then the following directories (if they exist)&lt;br&gt;are searched, in this order:&lt;br&gt;&lt;samp&gt;&lt;var&gt;prefix&lt;/var&gt;/include&lt;/samp&gt; (normally &lt;samp&gt;/usr/local/include&lt;/samp&gt;&lt;br&gt;&lt;a name=&quot;DOCF1&quot; href=&quot;#FOOT1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;)&lt;br&gt;&lt;samp&gt;/usr/gnu/include&lt;/samp&gt;,&lt;br&gt;&lt;samp&gt;/usr/local/include&lt;/samp&gt;, &lt;samp&gt;/usr/include&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If an included makefile cannot be found in any of these directories, a&lt;br&gt;warning message is generated, but it is not an immediately fatal error;&lt;br&gt;processing of the makefile containing the &lt;code&gt;include&lt;/code&gt; continues.&lt;br&gt;Once it has finished reading makefiles, &lt;code&gt;make&lt;/code&gt; will try to remake&lt;br&gt;any that are out of date or don’t exist.&lt;br&gt;See &lt;a href=&quot;#Remaking-Makefiles&quot;&gt;How Makefiles Are Remade&lt;/a&gt;.&lt;br&gt;Only after it has tried to find a way to remake a makefile and failed,&lt;br&gt;will &lt;code&gt;make&lt;/code&gt; diagnose the missing makefile as a fatal error.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you want &lt;code&gt;make&lt;/code&gt; to simply ignore a makefile which does not exist&lt;br&gt;or cannot be remade, with no error message, use the &lt;code&gt;&lt;span class=&quot;nolinebreak&quot;&gt;-include&lt;/span&gt;&lt;/code&gt;&lt;!-- /@w --&gt;&lt;br&gt;directive instead of &lt;code&gt;include&lt;/code&gt;, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;-include &lt;var&gt;filenames&lt;/var&gt;…&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This acts like &lt;code&gt;include&lt;/code&gt; in every way except that there is no&lt;br&gt;error (not even a warning) if any of the &lt;var&gt;filenames&lt;/var&gt; (or any&lt;br&gt;prerequisites of any of the &lt;var&gt;filenames&lt;/var&gt;) do not exist or cannot be&lt;br&gt;remade.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For compatibility with some other &lt;code&gt;make&lt;/code&gt; implementations,&lt;br&gt;&lt;code&gt;sinclude&lt;/code&gt; is another name for &lt;code&gt;&lt;span class=&quot;nolinebreak&quot;&gt;-include&lt;/span&gt;&lt;/code&gt;&lt;!-- /@w --&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;MAKEFILES-Variable&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Remaking-Makefiles&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Remaking Makefiles&lt;/a&gt;, Previous: &lt;a href=&quot;#Include&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Include&lt;/a&gt;, Up: &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefiles&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-Variable-MAKEFILES&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;3.4 The Variable &lt;code&gt;MAKEFILES&lt;/code&gt;&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-makefile_002c-and-MAKEFILES-variable&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-including-_0028MAKEFILES-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-MAKEFILES&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;If the environment variable &lt;code&gt;MAKEFILES&lt;/code&gt; is defined, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;considers its value as a list of names (separated by whitespace) of&lt;br&gt;additional makefiles to be read before the others.  This works much&lt;br&gt;like the &lt;code&gt;include&lt;/code&gt; directive: various directories are searched&lt;br&gt;for those files (see &lt;a href=&quot;#Include&quot;&gt;Including Other Makefiles&lt;/a&gt;).  In&lt;br&gt;addition, the default goal is never taken from one of these makefiles&lt;br&gt;(or any makefile included by them) and it is not an error if the files&lt;br&gt;listed in &lt;code&gt;MAKEFILES&lt;/code&gt; are not found.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-MAKEFILES-variable&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The main use of &lt;code&gt;MAKEFILES&lt;/code&gt; is in communication between recursive&lt;br&gt;invocations of &lt;code&gt;make&lt;/code&gt; (see &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of&lt;br&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;).  It usually is not desirable to set the environment&lt;br&gt;variable before a top-level invocation of &lt;code&gt;make&lt;/code&gt;, because it is&lt;br&gt;usually better not to mess with a makefile from outside.  However, if&lt;br&gt;you are running &lt;code&gt;make&lt;/code&gt; without a specific makefile, a makefile in&lt;br&gt;&lt;code&gt;MAKEFILES&lt;/code&gt; can do useful things to help the built-in implicit&lt;br&gt;rules work better, such as defining search paths (see &lt;a href=&quot;#Directory-Search&quot;&gt;Directory Search&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Some users are tempted to set &lt;code&gt;MAKEFILES&lt;/code&gt; in the environment&lt;br&gt;automatically on login, and program makefiles to expect this to be done.&lt;br&gt;This is a very bad idea, because such makefiles will fail to work if run by&lt;br&gt;anyone else.  It is much better to write explicit &lt;code&gt;include&lt;/code&gt; directives&lt;br&gt;in the makefiles.  See &lt;a href=&quot;#Include&quot;&gt;Including Other Makefiles&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Remaking-Makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Overriding-Makefiles&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Overriding Makefiles&lt;/a&gt;, Previous: &lt;a href=&quot;#MAKEFILES-Variable&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;MAKEFILES Variable&lt;/a&gt;, Up: &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefiles&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;How-Makefiles-Are-Remade&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;3.5 How Makefiles Are Remade&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-updating-makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-remaking-makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makefile_002c-remaking-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Sometimes makefiles can be remade from other files, such as RCS or SCCS&lt;br&gt;files.  If a makefile can be remade from other files, you probably want&lt;br&gt;&lt;code&gt;make&lt;/code&gt; to get an up-to-date version of the makefile to read in.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To this end, after reading in all makefiles, &lt;code&gt;make&lt;/code&gt; will consider&lt;br&gt;each as a goal target and attempt to update it.  If a makefile has a&lt;br&gt;rule which says how to update it (found either in that very makefile or&lt;br&gt;in another one) or if an implicit rule applies to it (see &lt;a href=&quot;#Implicit-Rules&quot;&gt;Using Implicit Rules&lt;/a&gt;), it will be updated if necessary.  After&lt;br&gt;all makefiles have been checked, if any have actually been changed,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; starts with a clean slate and reads all the makefiles over&lt;br&gt;again.  (It will also attempt to update each of them over again, but&lt;br&gt;normally this will not change them again, since they are already up to&lt;br&gt;date.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you know that one or more of your makefiles cannot be remade and&lt;br&gt;you want to keep &lt;code&gt;make&lt;/code&gt; from performing an implicit rule search&lt;br&gt;on them, perhaps for efficiency reasons, you can use any normal method&lt;br&gt;of preventing implicit rule look-up to do so.  For example, you can&lt;br&gt;write an explicit rule with the makefile as the target, and an empty&lt;br&gt;recipe (see &lt;a href=&quot;#Empty-Recipes&quot;&gt;Using Empty Recipes&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the makefiles specify a double-colon rule to remake a file with&lt;br&gt;a recipe but no prerequisites, that file will always be remade&lt;br&gt;(see &lt;a href=&quot;#Double_002dColon&quot;&gt;Double-Colon&lt;/a&gt;).  In the case of makefiles, a makefile that has a&lt;br&gt;double-colon rule with a recipe but no prerequisites will be remade every&lt;br&gt;time &lt;code&gt;make&lt;/code&gt; is run, and then again after &lt;code&gt;make&lt;/code&gt; starts over&lt;br&gt;and reads the makefiles in again.  This would cause an infinite loop:&lt;br&gt;&lt;code&gt;make&lt;/code&gt; would constantly remake the makefile, and never do anything&lt;br&gt;else.  So, to avoid this, &lt;code&gt;make&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; attempt to&lt;br&gt;remake makefiles which are specified as targets of a double-colon rule&lt;br&gt;with a recipe but no prerequisites.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you do not specify any makefiles to be read with ‘&lt;samp&gt;-f&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;–file&lt;/samp&gt;’ options, &lt;code&gt;make&lt;/code&gt; will try the default makefile names;&lt;br&gt;see &lt;a href=&quot;#Makefile-Names&quot;&gt;What Name to Give Your Makefile&lt;/a&gt;.  Unlike&lt;br&gt;makefiles explicitly requested with ‘&lt;samp&gt;-f&lt;/samp&gt;’ or ‘&lt;samp&gt;–file&lt;/samp&gt;’ options,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; is not certain that these makefiles should exist.  However,&lt;br&gt;if a default makefile does not exist but can be created by running&lt;br&gt;&lt;code&gt;make&lt;/code&gt; rules, you probably want the rules to be run so that the&lt;br&gt;makefile can be used.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Therefore, if none of the default makefiles exists, &lt;code&gt;make&lt;/code&gt; will try&lt;br&gt;to make each of them in the same order in which they are searched for&lt;br&gt;(see &lt;a href=&quot;#Makefile-Names&quot;&gt;What Name to Give Your Makefile&lt;/a&gt;)&lt;br&gt;until it succeeds in making one, or it runs out of names to try.  Note&lt;br&gt;that it is not an error if &lt;code&gt;make&lt;/code&gt; cannot find or make any makefile;&lt;br&gt;a makefile is not always necessary.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When you use the ‘&lt;samp&gt;-t&lt;/samp&gt;’ or ‘&lt;samp&gt;–touch&lt;/samp&gt;’ option&lt;br&gt;(see &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Executing Recipes&lt;/a&gt;),&lt;br&gt;you would not want to use an out-of-date makefile to decide which&lt;br&gt;targets to touch.  So the ‘&lt;samp&gt;-t&lt;/samp&gt;’ option has no effect on updating&lt;br&gt;makefiles; they are really updated even if ‘&lt;samp&gt;-t&lt;/samp&gt;’ is specified.&lt;br&gt;Likewise, ‘&lt;samp&gt;-q&lt;/samp&gt;’ (or ‘&lt;samp&gt;–question&lt;/samp&gt;’) and ‘&lt;samp&gt;-n&lt;/samp&gt;’ (or&lt;br&gt;‘&lt;samp&gt;–just-print&lt;/samp&gt;’) do not prevent updating of makefiles, because an&lt;br&gt;out-of-date makefile would result in the wrong output for other targets.&lt;br&gt;Thus, ‘&lt;samp&gt;make -f mfile -n foo&lt;/samp&gt;’ will update &lt;samp&gt;mfile&lt;/samp&gt;, read it in,&lt;br&gt;and then print the recipe to update &lt;samp&gt;foo&lt;/samp&gt; and its prerequisites&lt;br&gt;without running it.  The recipe printed for &lt;samp&gt;foo&lt;/samp&gt; will be the one&lt;br&gt;specified in the updated contents of &lt;samp&gt;mfile&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;However, on occasion you might actually wish to prevent updating of even&lt;br&gt;the makefiles.  You can do this by specifying the makefiles as goals in&lt;br&gt;the command line as well as specifying them as makefiles.  When the&lt;br&gt;makefile name is specified explicitly as a goal, the options ‘&lt;samp&gt;-t&lt;/samp&gt;’&lt;br&gt;and so on do apply to them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Thus, ‘&lt;samp&gt;make -f mfile -n mfile foo&lt;/samp&gt;’ would read the makefile&lt;br&gt;&lt;samp&gt;mfile&lt;/samp&gt;, print the recipe needed to update it without actually&lt;br&gt;running it, and then print the recipe needed to update &lt;samp&gt;foo&lt;/samp&gt;&lt;br&gt;without running that.  The recipe for &lt;samp&gt;foo&lt;/samp&gt; will be the one&lt;br&gt;specified by the existing contents of &lt;samp&gt;mfile&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Overriding-Makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Reading-Makefiles&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Reading Makefiles&lt;/a&gt;, Previous: &lt;a href=&quot;#Remaking-Makefiles&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Remaking Makefiles&lt;/a&gt;, Up: &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefiles&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Overriding-Part-of-Another-Makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;3.6 Overriding Part of Another Makefile&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-overriding-makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makefile_002c-overriding&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Sometimes it is useful to have a makefile that is mostly just like&lt;br&gt;another makefile.  You can often use the ‘&lt;samp&gt;include&lt;/samp&gt;’ directive to&lt;br&gt;include one in the other, and add more targets or variable definitions.&lt;br&gt;However, it is invalid for two makefiles to give different recipes for&lt;br&gt;the same target.  But there is another way.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-match_002danything-rule_002c-used-to-override&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;In the containing makefile (the one that wants to include the other),&lt;br&gt;you can use a match-anything pattern rule to say that to remake any&lt;br&gt;target that cannot be made from the information in the containing&lt;br&gt;makefile, &lt;code&gt;make&lt;/code&gt; should look in another makefile.&lt;br&gt;See &lt;a href=&quot;#Pattern-Rules&quot;&gt;Pattern Rules&lt;/a&gt;, for more information on pattern rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, if you have a makefile called &lt;samp&gt;Makefile&lt;/samp&gt; that says how&lt;br&gt;to make the target ‘&lt;samp&gt;foo&lt;/samp&gt;’ (and other targets), you can write a&lt;br&gt;makefile called &lt;samp&gt;GNUmakefile&lt;/samp&gt; that contains:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo:&lt;br&gt;        frobnicate &amp;gt; foo&lt;br&gt;&lt;br&gt;%: force&lt;br&gt;        @$(MAKE) -f Makefile $@&lt;br&gt;force: ;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you say ‘&lt;samp&gt;make foo&lt;/samp&gt;’, &lt;code&gt;make&lt;/code&gt; will find &lt;samp&gt;GNUmakefile&lt;/samp&gt;,&lt;br&gt;read it, and see that to make &lt;samp&gt;foo&lt;/samp&gt;, it needs to run the recipe&lt;br&gt;‘&lt;samp&gt;frobnicate &amp;gt; foo&lt;/samp&gt;’.  If you say ‘&lt;samp&gt;make bar&lt;/samp&gt;’, &lt;code&gt;make&lt;/code&gt; will&lt;br&gt;find no way to make &lt;samp&gt;bar&lt;/samp&gt; in &lt;samp&gt;GNUmakefile&lt;/samp&gt;, so it will use the&lt;br&gt;recipe from the pattern rule: ‘&lt;samp&gt;make -f Makefile bar&lt;/samp&gt;’.  If&lt;br&gt;&lt;samp&gt;Makefile&lt;/samp&gt; provides a rule for updating &lt;samp&gt;bar&lt;/samp&gt;, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;will apply the rule.  And likewise for any other target that&lt;br&gt;&lt;samp&gt;GNUmakefile&lt;/samp&gt; does not say how to make.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The way this works is that the pattern rule has a pattern of just&lt;br&gt;‘&lt;samp&gt;%&lt;/samp&gt;’, so it matches any target whatever.  The rule specifies a&lt;br&gt;prerequisite &lt;samp&gt;force&lt;/samp&gt;, to guarantee that the recipe will be run even&lt;br&gt;if the target file already exists.  We give the &lt;samp&gt;force&lt;/samp&gt; target an&lt;br&gt;empty recipe to prevent &lt;code&gt;make&lt;/code&gt; from searching for an implicit rule to&lt;br&gt;build it—otherwise it would apply the same match-anything rule to&lt;br&gt;&lt;samp&gt;force&lt;/samp&gt; itself and create a prerequisite loop!&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Reading-Makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Secondary-Expansion&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Secondary Expansion&lt;/a&gt;, Previous: &lt;a href=&quot;#Overriding-Makefiles&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Overriding Makefiles&lt;/a&gt;, Up: &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefiles&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;How-make-Reads-a-Makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;3.7 How &lt;code&gt;make&lt;/code&gt; Reads a Makefile&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-reading-makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makefile_002c-parsing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;GNU &lt;code&gt;make&lt;/code&gt; does its work in two distinct phases.  During the first&lt;br&gt;phase it reads all the makefiles, included makefiles, etc. and&lt;br&gt;internalizes all the variables and their values, implicit and explicit&lt;br&gt;rules, and constructs a dependency graph of all the targets and their&lt;br&gt;prerequisites.  During the second phase, &lt;code&gt;make&lt;/code&gt; uses these internal&lt;br&gt;structures to determine what targets will need to be rebuilt and to&lt;br&gt;invoke the rules necessary to do so.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;It’s important to understand this two-phase approach because it has a&lt;br&gt;direct impact on how variable and function expansion happens; this is&lt;br&gt;often a source of some confusion when writing makefiles.  Here we will&lt;br&gt;present a summary of the phases in which expansion happens for different&lt;br&gt;constructs within the makefile.  We say that expansion is&lt;br&gt;&lt;em&gt;immediate&lt;/em&gt; if it happens during the first phase: in this case&lt;br&gt;&lt;code&gt;make&lt;/code&gt; will expand any variables or functions in that section of a&lt;br&gt;construct as the makefile is parsed.  We say that expansion is&lt;br&gt;&lt;em&gt;deferred&lt;/em&gt; if expansion is not performed immediately.  Expansion of&lt;br&gt;a deferred construct is not performed until either the construct appears&lt;br&gt;later in an immediate context, or until the second phase.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You may not be familiar with some of these constructs yet.  You can&lt;br&gt;reference this section as you become familiar with them, in later&lt;br&gt;chapters.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;Variable-Assignment&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subheading&quot;&gt;Variable Assignment&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-_002b_003d_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003d_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003f_003d_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002b_003d_002c-expansion-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0021_003d_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-define_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Variable definitions are parsed as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;immediate&lt;/var&gt; = &lt;var&gt;deferred&lt;/var&gt;&lt;br&gt;&lt;var&gt;immediate&lt;/var&gt; ?= &lt;var&gt;deferred&lt;/var&gt;&lt;br&gt;&lt;var&gt;immediate&lt;/var&gt; := &lt;var&gt;immediate&lt;/var&gt;&lt;br&gt;&lt;var&gt;immediate&lt;/var&gt; ::= &lt;var&gt;immediate&lt;/var&gt;&lt;br&gt;&lt;var&gt;immediate&lt;/var&gt; += &lt;var&gt;deferred&lt;/var&gt; or &lt;var&gt;immediate&lt;/var&gt;&lt;br&gt;&lt;var&gt;immediate&lt;/var&gt; != &lt;var&gt;immediate&lt;/var&gt;&lt;br&gt;&lt;br&gt;define &lt;var&gt;immediate&lt;/var&gt;&lt;br&gt;  &lt;var&gt;deferred&lt;/var&gt;&lt;br&gt;endef&lt;br&gt;&lt;br&gt;define &lt;var&gt;immediate&lt;/var&gt; =&lt;br&gt;  &lt;var&gt;deferred&lt;/var&gt;&lt;br&gt;endef&lt;br&gt;&lt;br&gt;define &lt;var&gt;immediate&lt;/var&gt; ?=&lt;br&gt;  &lt;var&gt;deferred&lt;/var&gt;&lt;br&gt;endef&lt;br&gt;&lt;br&gt;define &lt;var&gt;immediate&lt;/var&gt; :=&lt;br&gt;  &lt;var&gt;immediate&lt;/var&gt;&lt;br&gt;endef&lt;br&gt;&lt;br&gt;define &lt;var&gt;immediate&lt;/var&gt; ::=&lt;br&gt;  &lt;var&gt;immediate&lt;/var&gt;&lt;br&gt;endef&lt;br&gt;&lt;br&gt;define &lt;var&gt;immediate&lt;/var&gt; +=&lt;br&gt;  &lt;var&gt;deferred&lt;/var&gt; or &lt;var&gt;immediate&lt;/var&gt;&lt;br&gt;endef&lt;br&gt;&lt;br&gt;define &lt;var&gt;immediate&lt;/var&gt; !=&lt;br&gt;  &lt;var&gt;immediate&lt;/var&gt;&lt;br&gt;endef&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;For the append operator, ‘&lt;samp&gt;+=&lt;/samp&gt;’, the right-hand side is considered&lt;br&gt;immediate if the variable was previously set as a simple variable&lt;br&gt;(‘&lt;samp&gt;:=&lt;/samp&gt;’ or ‘&lt;samp&gt;::=&lt;/samp&gt;’), and deferred otherwise.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For the shell assignment operator, ‘&lt;samp&gt;!=&lt;/samp&gt;’, the right-hand side is&lt;br&gt;evaluated immediately and handed to the shell.  The result is stored in the&lt;br&gt;variable named on the left, and that variable becomes a simple variable&lt;br&gt;(and will thus be re-evaluated on each reference).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;Conditional-Directives&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subheading&quot;&gt;Conditional Directives&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-ifdef_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-ifeq_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-ifndef_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-ifneq_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Conditional directives are parsed immediately.  This means, for&lt;br&gt;example, that automatic variables cannot be used in conditional&lt;br&gt;directives, as automatic variables are not set until the recipe for&lt;br&gt;that rule is invoked.  If you need to use automatic variables in a&lt;br&gt;conditional directive you &lt;em&gt;must&lt;/em&gt; move the condition into the&lt;br&gt;recipe and use shell conditional syntax instead.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;Rule-Definition&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subheading&quot;&gt;Rule Definition&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-target_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-prerequisite_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-implicit-rule_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-pattern-rule_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-explicit-rule_002c-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A rule is always expanded the same way, regardless of the form:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;immediate&lt;/var&gt; : &lt;var&gt;immediate&lt;/var&gt; ; &lt;var&gt;deferred&lt;/var&gt;&lt;br&gt;        &lt;var&gt;deferred&lt;/var&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;That is, the target and prerequisite sections are expanded immediately,&lt;br&gt;and the recipe used to construct the target is always deferred.  This&lt;br&gt;general rule is true for explicit rules, pattern rules, suffix rules,&lt;br&gt;static pattern rules, and simple prerequisite definitions.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Secondary-Expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Reading-Makefiles&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Reading Makefiles&lt;/a&gt;, Up: &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefiles&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Secondary-Expansion-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;3.8 Secondary Expansion&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-secondary-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-expansion_002c-secondary&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-_002eSECONDEXPANSION&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;In the previous section we learned that GNU &lt;code&gt;make&lt;/code&gt; works in two&lt;br&gt;distinct phases: a read-in phase and a target-update phase&lt;br&gt;(see &lt;a href=&quot;#Reading-Makefiles&quot;&gt;How &lt;code&gt;make&lt;/code&gt; Reads a Makefile&lt;/a&gt;).  GNU&lt;br&gt;make also has the ability to enable a &lt;em&gt;second expansion&lt;/em&gt; of the&lt;br&gt;prerequisites (only) for some or all targets defined in the makefile.&lt;br&gt;In order for this second expansion to occur, the special target&lt;br&gt;&lt;code&gt;.SECONDEXPANSION&lt;/code&gt; must be defined before the first prerequisite&lt;br&gt;list that makes use of this feature.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If that special target is defined then in between the two phases&lt;br&gt;mentioned above, right at the end of the read-in phase, all the&lt;br&gt;prerequisites of the targets defined after the special target are&lt;br&gt;expanded a &lt;em&gt;second time&lt;/em&gt;.  In most circumstances this secondary&lt;br&gt;expansion will have no effect, since all variable and function&lt;br&gt;references will have been expanded during the initial parsing of the&lt;br&gt;makefiles.  In order to take advantage of the secondary expansion&lt;br&gt;phase of the parser, then, it’s necessary to &lt;em&gt;escape&lt;/em&gt; the&lt;br&gt;variable or function reference in the makefile.  In this case the&lt;br&gt;first expansion merely un-escapes the reference but doesn’t expand it,&lt;br&gt;and expansion is left to the secondary expansion phase.  For example,&lt;br&gt;consider this makefile:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.SECONDEXPANSION:&lt;br&gt;ONEVAR = onefile&lt;br&gt;TWOVAR = twofile&lt;br&gt;myfile: $(ONEVAR) $$(TWOVAR)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;After the first expansion phase the prerequisites list of the&lt;br&gt;&lt;samp&gt;myfile&lt;/samp&gt; target will be &lt;code&gt;onefile&lt;/code&gt; and &lt;code&gt;$(TWOVAR)&lt;/code&gt;; the&lt;br&gt;first (unescaped) variable reference to &lt;var&gt;ONEVAR&lt;/var&gt; is expanded,&lt;br&gt;while the second (escaped) variable reference is simply unescaped,&lt;br&gt;without being recognized as a variable reference.  Now during the&lt;br&gt;secondary expansion the first word is expanded again but since it&lt;br&gt;contains no variable or function references it remains the value&lt;br&gt;&lt;samp&gt;onefile&lt;/samp&gt;, while the second word is now a normal reference to the&lt;br&gt;variable &lt;var&gt;TWOVAR&lt;/var&gt;, which is expanded to the value &lt;samp&gt;twofile&lt;/samp&gt;.&lt;br&gt;The final result is that there are two prerequisites, &lt;samp&gt;onefile&lt;/samp&gt;&lt;br&gt;and &lt;samp&gt;twofile&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Obviously, this is not a very interesting case since the same result&lt;br&gt;could more easily have been achieved simply by having both variables&lt;br&gt;appear, unescaped, in the prerequisites list.  One difference becomes&lt;br&gt;apparent if the variables are reset; consider this example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.SECONDEXPANSION:&lt;br&gt;AVAR = top&lt;br&gt;onefile: $(AVAR)&lt;br&gt;twofile: $$(AVAR)&lt;br&gt;AVAR = bottom&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here the prerequisite of &lt;samp&gt;onefile&lt;/samp&gt; will be expanded immediately,&lt;br&gt;and resolve to the value &lt;samp&gt;top&lt;/samp&gt;, while the prerequisite of&lt;br&gt;&lt;samp&gt;twofile&lt;/samp&gt; will not be full expanded until the secondary expansion&lt;br&gt;and yield a value of &lt;samp&gt;bottom&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This is marginally more exciting, but the true power of this feature&lt;br&gt;only becomes apparent when you discover that secondary expansions&lt;br&gt;always take place within the scope of the automatic variables for that&lt;br&gt;target.  This means that you can use variables such as &lt;code&gt;$@&lt;/code&gt;,&lt;br&gt;&lt;code&gt;$&lt;/code&gt;, etc. during the second expansion and they will have their&lt;br&gt;expected values, just as in the recipe.  All you have to do is defer&lt;br&gt;the expansion by escaping the &lt;code&gt;$&lt;/code&gt;.  Also, secondary expansion&lt;br&gt;occurs for both explicit and implicit (pattern) rules.  Knowing this,&lt;br&gt;the possible uses for this feature increase dramatically.  For&lt;br&gt;example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.SECONDEXPANSION:&lt;br&gt;main_OBJS := main.o try.o test.o&lt;br&gt;lib_OBJS := lib.o api.o&lt;br&gt;&lt;br&gt;main lib: $$($$@_OBJS)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here, after the initial expansion the prerequisites of both the&lt;br&gt;&lt;samp&gt;main&lt;/samp&gt; and &lt;samp&gt;lib&lt;/samp&gt; targets will be &lt;code&gt;$($@_OBJS)&lt;/code&gt;.  During&lt;br&gt;the secondary expansion, the &lt;code&gt;$@&lt;/code&gt; variable is set to the name of&lt;br&gt;the target and so the expansion for the &lt;samp&gt;main&lt;/samp&gt; target will yield&lt;br&gt;&lt;code&gt;$(main_OBJS)&lt;/code&gt;, or &lt;code&gt;main.o try.o test.o&lt;/code&gt;, while the&lt;br&gt;secondary expansion for the &lt;samp&gt;lib&lt;/samp&gt; target will yield&lt;br&gt;&lt;code&gt;$(lib_OBJS)&lt;/code&gt;, or &lt;code&gt;lib.o api.o&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can also mix in functions here, as long as they are properly escaped:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;main_SRCS := main.c try.c test.c&lt;br&gt;lib_SRCS := lib.c api.c&lt;br&gt;&lt;br&gt;.SECONDEXPANSION:&lt;br&gt;main lib: $$(patsubst %.c,%.o,$$($$@_SRCS))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This version allows users to specify source files rather than object&lt;br&gt;files, but gives the same resulting prerequisites list as the previous&lt;br&gt;example.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Evaluation of automatic variables during the secondary expansion&lt;br&gt;phase, especially of the target name variable &lt;code&gt;$$@&lt;/code&gt;, behaves&lt;br&gt;similarly to evaluation within recipes.  However, there are some&lt;br&gt;subtle differences and “corner cases” which come into play for the&lt;br&gt;different types of rule definitions that &lt;code&gt;make&lt;/code&gt; understands.  The&lt;br&gt;subtleties of using the different automatic variables are described&lt;br&gt;below.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;Secondary-Expansion-of-Explicit-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subheading&quot;&gt;Secondary Expansion of Explicit Rules&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-secondary-expansion-and-explicit-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-explicit-rules_002c-secondary-expansion-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;During the secondary expansion of explicit rules, &lt;code&gt;$$@&lt;/code&gt; and&lt;br&gt;&lt;code&gt;$$%&lt;/code&gt; evaluate, respectively, to the file name of the target and,&lt;br&gt;when the target is an archive member, the target member name.  The&lt;br&gt;&lt;code&gt;$$&amp;lt;&lt;/code&gt; variable evaluates to the first prerequisite in the first&lt;br&gt;rule for this target.  &lt;code&gt;$$^&lt;/code&gt; and &lt;code&gt;$$+&lt;/code&gt; evaluate to the list&lt;br&gt;of all prerequisites of rules &lt;em&gt;that have already appeared&lt;/em&gt; for&lt;br&gt;the same target (&lt;code&gt;$$+&lt;/code&gt; with repetitions and &lt;code&gt;$$^&lt;/code&gt;&lt;br&gt;without).  The following example will help illustrate these behaviors:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.SECONDEXPANSION:&lt;br&gt;&lt;br&gt;foo: foo.1 bar.1 $$&amp;lt; $$^ $$+    # line #1&lt;br&gt;&lt;br&gt;foo: foo.2 bar.2 $$&amp;lt; $$^ $$+    # line #2&lt;br&gt;&lt;br&gt;foo: foo.3 bar.3 $$&amp;lt; $$^ $$+    # line #3&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In the first prerequisite list, all three variables (&lt;code&gt;$$&amp;lt;&lt;/code&gt;,&lt;br&gt;&lt;code&gt;$$^&lt;/code&gt;, and &lt;code&gt;$$+&lt;/code&gt;) expand to the empty string.  In the&lt;br&gt;second, they will have values &lt;code&gt;foo.1&lt;/code&gt;, &lt;code&gt;foo.1 bar.1&lt;/code&gt;, and&lt;br&gt;&lt;code&gt;foo.1 bar.1&lt;/code&gt; respectively.  In the third they will have values&lt;br&gt;&lt;code&gt;foo.1&lt;/code&gt;, &lt;code&gt;foo.1 bar.1 foo.2 bar.2&lt;/code&gt;, and &lt;code&gt;foo.1 bar.1&lt;br&gt;foo.2 bar.2 foo.1 foo.1 bar.1 foo.1 bar.1&lt;/code&gt; respectively.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Rules undergo secondary expansion in makefile order, except that&lt;br&gt;the rule with the recipe is always evaluated last.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The variables &lt;code&gt;$$?&lt;/code&gt; and &lt;code&gt;$$&lt;em&gt;&lt;/em&gt;&lt;/code&gt; are not available and expand&lt;br&gt;to the empty string.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;Secondary-Expansion-of-Static-Pattern-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subheading&quot;&gt;Secondary Expansion of Static Pattern Rules&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-secondary-expansion-and-static-pattern-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-static-pattern-rules_002c-secondary-expansion-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Rules for secondary expansion of static pattern rules are identical to&lt;br&gt;those for explicit rules, above, with one exception: for static&lt;br&gt;pattern rules the &lt;code&gt;$$&lt;/code&gt; variable is set to the pattern stem.  As&lt;br&gt;with explicit rules, &lt;code&gt;$$?&lt;/code&gt; is not available and expands to the&lt;br&gt;empty string.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;Secondary-Expansion-of-Implicit-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subheading&quot;&gt;Secondary Expansion of Implicit Rules&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-secondary-expansion-and-implicit-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-implicit-rules_002c-secondary-expansion-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;As &lt;code&gt;make&lt;/code&gt; searches for an implicit rule, it substitutes the stem&lt;br&gt;and then performs secondary expansion for every rule with a matching&lt;br&gt;target pattern.  The value of the automatic variables is derived in&lt;br&gt;the same fashion as for static pattern rules.  As an example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.SECONDEXPANSION:&lt;br&gt;&lt;br&gt;foo: bar&lt;br&gt;&lt;br&gt;foo foz: fo%: bo%&lt;br&gt;&lt;br&gt;%oo: $$&amp;lt; $$^ $$+ $$&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When the implicit rule is tried for target &lt;samp&gt;foo&lt;/samp&gt;, &lt;code&gt;$$&amp;lt;&lt;/code&gt;&lt;br&gt;expands to &lt;samp&gt;bar&lt;/samp&gt;, &lt;code&gt;$$^&lt;/code&gt; expands to &lt;samp&gt;bar boo&lt;/samp&gt;,&lt;br&gt;&lt;code&gt;$$+&lt;/code&gt; also expands to &lt;samp&gt;bar boo&lt;/samp&gt;, and &lt;code&gt;$$&lt;/code&gt; expands to&lt;br&gt;&lt;samp&gt;f&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Note that the directory prefix (D), as described in &lt;a href=&quot;#Implicit-Rule-Search&quot;&gt;Implicit Rule Search Algorithm&lt;/a&gt;, is appended (after&lt;br&gt;expansion) to all the patterns in the prerequisites list.  As an&lt;br&gt;example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.SECONDEXPANSION:&lt;br&gt;&lt;br&gt;/tmp/foo.o:&lt;br&gt;&lt;br&gt;%.o: $$(addsuffix /%.c,foo bar) foo.h&lt;br&gt;        @echo $^&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The prerequisite list printed, after the secondary expansion and&lt;br&gt;directory prefix reconstruction, will be &lt;samp&gt;/tmp/foo/foo.c&lt;br&gt;/tmp/bar/foo.c foo.h&lt;/samp&gt;.  If you are not interested in this&lt;br&gt;reconstruction, you can use &lt;code&gt;$$&lt;em&gt;&lt;/em&gt;&lt;/code&gt; instead of &lt;code&gt;%&lt;/code&gt; in the&lt;br&gt;prerequisites list.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Recipes&lt;/a&gt;, Previous: &lt;a href=&quot;#Makefiles&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Makefiles&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Writing-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;4 Writing Rules&lt;/h2&gt;&lt;br&gt;&lt;a name=&quot;index-writing-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-how-to-write&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-target&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-prerequisite&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A &lt;em&gt;rule&lt;/em&gt; appears in the makefile and says when and how to remake&lt;br&gt;certain files, called the rule’s &lt;em&gt;targets&lt;/em&gt; (most often only one per rule).&lt;br&gt;It lists the other files that are the &lt;em&gt;prerequisites&lt;/em&gt; of the target, and&lt;br&gt;the &lt;em&gt;recipe&lt;/em&gt; to use to create or update the target.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-default-goal-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-goal_002c-default-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The order of rules is not significant, except for determining the&lt;br&gt;&lt;em&gt;default goal&lt;/em&gt;: the target for &lt;code&gt;make&lt;/code&gt; to consider, if you do&lt;br&gt;not otherwise specify one.  The default goal is the target of the first&lt;br&gt;rule in the first makefile.  If the first rule has multiple targets,&lt;br&gt;only the first target is taken as the default.  There are two&lt;br&gt;exceptions: a target starting with a period is not a default unless it&lt;br&gt;contains one or more slashes, ‘&lt;samp&gt;/&lt;/samp&gt;’, as well; and, a target that&lt;br&gt;defines a pattern rule has no effect on the default goal.&lt;br&gt;(See &lt;a href=&quot;#Pattern-Rules&quot;&gt;Defining and Redefining Pattern Rules&lt;/a&gt;.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Therefore, we usually write the makefile so that the first rule is the&lt;br&gt;one for compiling the entire program or all the programs described by&lt;br&gt;the makefile (often with a target called ‘&lt;samp&gt;all&lt;/samp&gt;’).&lt;br&gt;See &lt;a href=&quot;#Goals&quot;&gt;Arguments to Specify the Goals&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Rule-Example&quot; accesskey=&quot;1&quot;&gt;Rule Example&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;An example explained.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Rule-Syntax&quot; accesskey=&quot;2&quot;&gt;Rule Syntax&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;General syntax explained.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Prerequisite-Types&quot; accesskey=&quot;3&quot;&gt;Prerequisite Types&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;There are two types of prerequisites.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Wildcards&quot; accesskey=&quot;4&quot;&gt;Wildcards&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using wildcard characters such as ‘’.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Directory-Search&quot; accesskey=&quot;5&quot;&gt;Directory Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Searching other directories for source files.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Phony-Targets&quot; accesskey=&quot;6&quot;&gt;Phony Targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using a target that is not a real file’s name.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Force-Targets&quot; accesskey=&quot;7&quot;&gt;Force Targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;You can use a target without a recipe&lt;br&gt;                                  or prerequisites to mark other targets&lt;br&gt;                                  as phony.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Empty-Targets&quot; accesskey=&quot;8&quot;&gt;Empty Targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;When only the date matters and the&lt;br&gt;                                  files are empty.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Special-Targets&quot; accesskey=&quot;9&quot;&gt;Special Targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Targets with special built-in meanings.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Multiple-Targets&quot;&gt;Multiple Targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;When to make use of several targets in a rule.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Multiple-Rules&quot;&gt;Multiple Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use several rules with the same target.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Static-Pattern&quot;&gt;Static Pattern&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Static pattern rules apply to multiple targets&lt;br&gt;                                  and can vary the prerequisites according to&lt;br&gt;                                  the target name.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Double_002dColon&quot;&gt;Double-Colon&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use a special kind of rule to allow&lt;br&gt;                                  several independent rules for one target.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to automatically generate rules giving&lt;br&gt;                                  prerequisites from source files themselves.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Rule-Example&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Rule-Syntax&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Rule Syntax&lt;/a&gt;, Previous: &lt;a href=&quot;#Rules&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Rules&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Rule-Example-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.1 Rule Example&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is an example of a rule:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo.o : foo.c defs.h       # module for twiddling the frobs&lt;br&gt;        cc -c -g foo.c&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Its target is &lt;samp&gt;foo.o&lt;/samp&gt; and its prerequisites are &lt;samp&gt;foo.c&lt;/samp&gt; and&lt;br&gt;&lt;samp&gt;defs.h&lt;/samp&gt;.  It has one command in the recipe: ‘&lt;samp&gt;cc -c -g foo.c&lt;/samp&gt;’.&lt;br&gt;The recipe starts with a tab to identify it as a recipe.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This rule says two things:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; How to decide whether &lt;samp&gt;foo.o&lt;/samp&gt; is out of date: it is out of date&lt;br&gt;if it does not exist, or if either &lt;samp&gt;foo.c&lt;/samp&gt; or &lt;samp&gt;defs.h&lt;/samp&gt; is&lt;br&gt;more recent than it.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; How to update the file &lt;samp&gt;foo.o&lt;/samp&gt;: by running &lt;code&gt;cc&lt;/code&gt; as stated.&lt;br&gt;The recipe does not explicitly mention &lt;samp&gt;defs.h&lt;/samp&gt;, but we presume&lt;br&gt;that &lt;samp&gt;foo.c&lt;/samp&gt; includes it, and that that is why &lt;samp&gt;defs.h&lt;/samp&gt; was&lt;br&gt;added to the prerequisites.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Rule-Syntax&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Prerequisite-Types&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Prerequisite Types&lt;/a&gt;, Previous: &lt;a href=&quot;#Rule-Example&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Rule Example&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Rule-Syntax-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.2 Rule Syntax&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-rule-syntax&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-syntax-of-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;In general, a rule looks like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;targets&lt;/var&gt; : &lt;var&gt;prerequisites&lt;/var&gt;&lt;br&gt;        &lt;var&gt;recipe&lt;/var&gt;&lt;br&gt;        …&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;or like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;targets&lt;/var&gt; : &lt;var&gt;prerequisites&lt;/var&gt; ; &lt;var&gt;recipe&lt;/var&gt;&lt;br&gt;        &lt;var&gt;recipe&lt;/var&gt;&lt;br&gt;        …&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The &lt;var&gt;targets&lt;/var&gt; are file names, separated by spaces.  Wildcard&lt;br&gt;characters may be used (see &lt;a href=&quot;#Wildcards&quot;&gt;Using Wildcard Characters&lt;br&gt;in File Names&lt;/a&gt;) and a name of the form &lt;samp&gt;&lt;var&gt;a&lt;/var&gt;(&lt;var&gt;m&lt;/var&gt;)&lt;/samp&gt;&lt;br&gt;represents member &lt;var&gt;m&lt;/var&gt; in archive file &lt;var&gt;a&lt;/var&gt;&lt;br&gt;(see &lt;a href=&quot;#Archive-Members&quot;&gt;Archive Members as Targets&lt;/a&gt;).&lt;br&gt;Usually there is only one&lt;br&gt;target per rule, but occasionally there is a reason to have more&lt;br&gt;(see &lt;a href=&quot;#Multiple-Targets&quot;&gt;Multiple Targets in a Rule&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-tab-character-_0028in-commands_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The &lt;var&gt;recipe&lt;/var&gt; lines start with a tab character (or the first&lt;br&gt;character in the value of the &lt;code&gt;.RECIPEPREFIX&lt;/code&gt; variable;&lt;br&gt;see &lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;).  The first recipe line may appear on the line&lt;br&gt;after the prerequisites, with a tab character, or may appear on the&lt;br&gt;same line, with a semicolon.  Either way, the effect is the same.&lt;br&gt;There are other differences in the syntax of recipes.&lt;br&gt;See &lt;a href=&quot;#Recipes&quot;&gt;Writing Recipes in Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-dollar-sign-_0028_0024_0029_002c-in-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_002c-in-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rules_002c-and-_0024&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Because dollar signs are used to start &lt;code&gt;make&lt;/code&gt; variable&lt;br&gt;references, if you really want a dollar sign in a target or&lt;br&gt;prerequisite you must write two of them, ‘&lt;samp&gt;$$&lt;/samp&gt;’ (see &lt;a href=&quot;#Using-Variables&quot;&gt;How to Use Variables&lt;/a&gt;).  If you have enabled secondary&lt;br&gt;expansion (see &lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;) and you want a literal dollar&lt;br&gt;sign in the prerequisites list, you must actually write &lt;em&gt;four&lt;/em&gt;&lt;br&gt;dollar signs (‘&lt;samp&gt;$$$$&lt;/samp&gt;’).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You may split a long line by inserting a backslash followed by a&lt;br&gt;newline, but this is not required, as &lt;code&gt;make&lt;/code&gt; places no limit on&lt;br&gt;the length of a line in a makefile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A rule tells &lt;code&gt;make&lt;/code&gt; two things: when the targets are out of date,&lt;br&gt;and how to update them when necessary.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule-prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The criterion for being out of date is specified in terms of the&lt;br&gt;&lt;var&gt;prerequisites&lt;/var&gt;, which consist of file names separated by spaces.&lt;br&gt;(Wildcards and archive members (see &lt;a href=&quot;#Archives&quot;&gt;Archives&lt;/a&gt;) are allowed here too.)&lt;br&gt;A target is out of date if it does not exist or if it is older than any&lt;br&gt;of the prerequisites (by comparison of last-modification times).  The&lt;br&gt;idea is that the contents of the target file are computed based on&lt;br&gt;information in the prerequisites, so if any of the prerequisites changes,&lt;br&gt;the contents of the existing target file are no longer necessarily&lt;br&gt;valid.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;How to update is specified by a &lt;var&gt;recipe&lt;/var&gt;.  This is one or more&lt;br&gt;lines to be executed by the shell (normally ‘&lt;samp&gt;sh&lt;/samp&gt;’), but with some&lt;br&gt;extra features (see &lt;a href=&quot;#Recipes&quot;&gt;Writing Recipes in Rules&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Prerequisite-Types&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Wildcards&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Wildcards&lt;/a&gt;, Previous: &lt;a href=&quot;#Rule-Syntax&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Rule Syntax&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Types-of-Prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.3 Types of Prerequisites&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-prerequisite-types&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-types-of-prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-prerequisites_002c-normal&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-normal-prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-prerequisites_002c-order_002donly&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-order_002donly-prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;There are actually two different types of prerequisites understood by&lt;br&gt;GNU &lt;code&gt;make&lt;/code&gt;: normal prerequisites such as described in the&lt;br&gt;previous section, and &lt;em&gt;order-only&lt;/em&gt; prerequisites.  A normal&lt;br&gt;prerequisite makes two statements: first, it imposes an order in which&lt;br&gt;recipes will be invoked: the recipes for all prerequisites of a target&lt;br&gt;will be completed before the recipe for the target is run.  Second, it&lt;br&gt;imposes a dependency relationship: if any prerequisite is newer than&lt;br&gt;the target, then the target is considered out-of-date and must be&lt;br&gt;rebuilt.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Normally, this is exactly what you want: if a target’s prerequisite is&lt;br&gt;updated, then the target should also be updated.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Occasionally, however, you have a situation where you want to impose a&lt;br&gt;specific ordering on the rules to be invoked &lt;em&gt;without&lt;/em&gt; forcing&lt;br&gt;the target to be updated if one of those rules is executed.  In that&lt;br&gt;case, you want to define &lt;em&gt;order-only&lt;/em&gt; prerequisites.  Order-only&lt;br&gt;prerequisites can be specified by placing a pipe symbol (&lt;code&gt;|&lt;/code&gt;)&lt;br&gt;in the prerequisites list: any prerequisites to the left of the pipe&lt;br&gt;symbol are normal; any prerequisites to the right are order-only:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;targets&lt;/var&gt; : &lt;var&gt;normal-prerequisites&lt;/var&gt; | &lt;var&gt;order-only-prerequisites&lt;/var&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The normal prerequisites section may of course be empty.  Also, you&lt;br&gt;may still declare multiple lines of prerequisites for the same target:&lt;br&gt;they are appended appropriately (normal prerequisites are appended to&lt;br&gt;the list of normal prerequisites; order-only prerequisites are&lt;br&gt;appended to the list of order-only prerequisites).  Note that if you&lt;br&gt;declare the same file to be both a normal and an order-only&lt;br&gt;prerequisite, the normal prerequisite takes precedence (since they&lt;br&gt;have a strict superset of the behavior of an order-only prerequisite).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Consider an example where your targets are to be placed in a separate&lt;br&gt;directory, and that directory might not exist before &lt;code&gt;make&lt;/code&gt; is&lt;br&gt;run.  In this situation, you want the directory to be created before&lt;br&gt;any targets are placed into it but, because the timestamps on&lt;br&gt;directories change whenever a file is added, removed, or renamed, we&lt;br&gt;certainly don’t want to rebuild all the targets whenever the&lt;br&gt;directory’s timestamp changes.  One way to manage this is with&lt;br&gt;order-only prerequisites: make the directory an order-only&lt;br&gt;prerequisite on all the targets:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;OBJDIR := objdir&lt;br&gt;OBJS := $(addprefix $(OBJDIR)/,foo.o bar.o baz.o)&lt;br&gt;&lt;br&gt;$(OBJDIR)/%.o : %.c&lt;br&gt;        $(COMPILE.c) $(OUTPUT_OPTION) $&amp;lt;&lt;br&gt;&lt;br&gt;all: $(OBJS)&lt;br&gt;&lt;br&gt;$(OBJS): | $(OBJDIR)&lt;br&gt;&lt;br&gt;$(OBJDIR):&lt;br&gt;        mkdir $(OBJDIR)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Now the rule to create the &lt;samp&gt;objdir&lt;/samp&gt; directory will be run, if&lt;br&gt;needed, before any ‘&lt;samp&gt;.o&lt;/samp&gt;’ is built, but no ‘&lt;samp&gt;.o&lt;/samp&gt;’ will be built&lt;br&gt;because the &lt;samp&gt;objdir&lt;/samp&gt; directory timestamp changed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Wildcards&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Directory-Search&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Directory Search&lt;/a&gt;, Previous: &lt;a href=&quot;#Prerequisite-Types&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Prerequisite Types&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Using-Wildcard-Characters-in-File-Names&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.4 Using Wildcard Characters in File Names&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-wildcard&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name-with-wildcards&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-globbing-_0028wildcards_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-_002a-_0028wildcard-character_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003f-_0028wildcard-character_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_005b_2026_005d-_0028wildcard-characters_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;A single file name can specify many files using &lt;em&gt;wildcard characters&lt;/em&gt;.&lt;br&gt;The wildcard characters in &lt;code&gt;make&lt;/code&gt; are ‘&lt;samp&gt;&lt;em&gt;&lt;/em&gt;&lt;/samp&gt;’, ‘&lt;samp&gt;?&lt;/samp&gt;’ and&lt;br&gt;‘&lt;samp&gt;[…]&lt;/samp&gt;’, the same as in the Bourne shell.  For example, &lt;samp&gt;.c&lt;/samp&gt;&lt;br&gt;specifies a list of all the files (in the working directory) whose names&lt;br&gt;end in ‘&lt;samp&gt;.c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_007e-_0028tilde_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-tilde-_0028_007e_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-home-directory&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The character ‘&lt;samp&gt;~&lt;/samp&gt;’ at the beginning of a file name also has special&lt;br&gt;significance.  If alone, or followed by a slash, it represents your home&lt;br&gt;directory.  For example &lt;samp&gt;~/bin&lt;/samp&gt; expands to &lt;samp&gt;/home/you/bin&lt;/samp&gt;.&lt;br&gt;If the ‘&lt;samp&gt;~&lt;/samp&gt;’ is followed by a word, the string represents the home&lt;br&gt;directory of the user named by that word.  For example &lt;samp&gt;~john/bin&lt;/samp&gt;&lt;br&gt;expands to &lt;samp&gt;/home/john/bin&lt;/samp&gt;.  On systems which don’t have a home&lt;br&gt;directory for each user (such as MS-DOS or MS-Windows), this&lt;br&gt;functionality can be simulated by setting the environment variable&lt;br&gt;&lt;var&gt;HOME&lt;/var&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Wildcard expansion is performed by &lt;code&gt;make&lt;/code&gt; automatically in&lt;br&gt;targets and in prerequisites.  In recipes, the shell is responsible&lt;br&gt;for wildcard expansion.  In other contexts, wildcard expansion happens&lt;br&gt;only if you request it explicitly with the &lt;code&gt;wildcard&lt;/code&gt; function.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The special significance of a wildcard character can be turned off by&lt;br&gt;preceding it with a backslash.  Thus, &lt;samp&gt;foo*bar&lt;/samp&gt; would refer to a&lt;br&gt;specific file whose name consists of ‘&lt;samp&gt;foo&lt;/samp&gt;’, an asterisk, and&lt;br&gt;‘&lt;samp&gt;bar&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Wildcard-Examples&quot; accesskey=&quot;1&quot;&gt;Wildcard Examples&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Several examples.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Wildcard-Pitfall&quot; accesskey=&quot;2&quot;&gt;Wildcard Pitfall&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Problems to avoid.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Wildcard-Function&quot; accesskey=&quot;3&quot;&gt;Wildcard Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to cause wildcard expansion where&lt;br&gt;                                  it does not normally take place.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Wildcard-Examples&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Wildcard-Pitfall&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Wildcard Pitfall&lt;/a&gt;, Previous: &lt;a href=&quot;#Wildcards&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Wildcards&lt;/a&gt;, Up: &lt;a href=&quot;#Wildcards&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Wildcards&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Wildcard-Examples-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;4.4.1 Wildcard Examples&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Wildcards can be used in the recipe of a rule, where they are expanded&lt;br&gt;by the shell.  For example, here is a rule to delete all the object files:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;clean:&lt;br&gt;        rm -f &lt;em&gt;.o&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;index-rm-_0028shell-command_0029-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Wildcards are also useful in the prerequisites of a rule.  With the&lt;br&gt;following rule in the makefile, ‘&lt;samp&gt;make print&lt;/samp&gt;’ will print all the&lt;br&gt;‘&lt;samp&gt;.c&lt;/samp&gt;’ files that have changed since the last time you printed them:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;print: .c&lt;br&gt;        lpr -p $?&lt;br&gt;        touch print&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-print-target&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-lpr-_0028shell-command_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-touch-_0028shell-command_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;This rule uses &lt;samp&gt;print&lt;/samp&gt; as an empty target file; see &lt;a href=&quot;#Empty-Targets&quot;&gt;Empty Target Files to Record Events&lt;/a&gt;.  (The automatic variable&lt;br&gt;‘&lt;samp&gt;$?&lt;/samp&gt;’ is used to print only those files that have changed; see&lt;br&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Wildcard expansion does not happen when you define a variable.  Thus, if&lt;br&gt;you write this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = &lt;em&gt;.o&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;then the value of the variable &lt;code&gt;objects&lt;/code&gt; is the actual string&lt;br&gt;‘&lt;samp&gt;.o&lt;/samp&gt;’.  However, if you use the value of &lt;code&gt;objects&lt;/code&gt; in a&lt;br&gt;target or prerequisite, wildcard expansion will take place there.  If&lt;br&gt;you use the value of &lt;code&gt;objects&lt;/code&gt; in a recipe, the shell may perform&lt;br&gt;wildcard expansion when the recipe runs.  To set &lt;code&gt;objects&lt;/code&gt; to the&lt;br&gt;expansion, instead use:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects := $(wildcard &lt;em&gt;.o)&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;See &lt;a href=&quot;#Wildcard-Function&quot;&gt;Wildcard Function&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Wildcard-Pitfall&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Wildcard-Function&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Wildcard Function&lt;/a&gt;, Previous: &lt;a href=&quot;#Wildcard-Examples&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Wildcard Examples&lt;/a&gt;, Up: &lt;a href=&quot;#Wildcards&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Wildcards&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Pitfalls-of-Using-Wildcards&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;4.4.2 Pitfalls of Using Wildcards&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-wildcard-pitfalls&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-pitfalls-of-wildcards&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-mistakes-with-wildcards&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-errors-with-wildcards&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-problems-with-wildcards&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Now here is an example of a naive way of using wildcard expansion, that&lt;br&gt;does not do what you would intend.  Suppose you would like to say that the&lt;br&gt;executable file &lt;samp&gt;foo&lt;/samp&gt; is made from all the object files in the&lt;br&gt;directory, and you write this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = .o&lt;br&gt;&lt;br&gt;foo : $(objects)&lt;br&gt;        cc -o foo $(CFLAGS) $(objects)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The value of &lt;code&gt;objects&lt;/code&gt; is the actual string ‘&lt;samp&gt;&lt;em&gt;.o&lt;/em&gt;&lt;/samp&gt;’.  Wildcard&lt;br&gt;expansion happens in the rule for &lt;samp&gt;foo&lt;/samp&gt;, so that each &lt;em&gt;existing&lt;/em&gt;&lt;br&gt;‘&lt;samp&gt;.o&lt;/samp&gt;’ file becomes a prerequisite of &lt;samp&gt;foo&lt;/samp&gt; and will be recompiled if&lt;br&gt;necessary.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;But what if you delete all the ‘&lt;samp&gt;.o&lt;/samp&gt;’ files?  When a wildcard matches&lt;br&gt;no files, it is left as it is, so then &lt;samp&gt;foo&lt;/samp&gt; will depend on the&lt;br&gt;oddly-named file &lt;samp&gt;.o&lt;/samp&gt;.  Since no such file is likely to exist,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; will give you an error saying it cannot figure out how to&lt;br&gt;make &lt;samp&gt;*.o&lt;/samp&gt;.  This is not what you want!&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Actually it is possible to obtain the desired result with wildcard&lt;br&gt;expansion, but you need more sophisticated techniques, including the&lt;br&gt;&lt;code&gt;wildcard&lt;/code&gt; function and string substitution.&lt;br&gt;See &lt;a href=&quot;#Wildcard-Function&quot;&gt;The Function &lt;code&gt;wildcard&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-wildcards-and-MS_002dDOS_002fMS_002dWindows-backslashes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-backslashes-in-pathnames-and-wildcard-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Microsoft operating systems (MS-DOS and MS-Windows) use backslashes to&lt;br&gt;separate directories in pathnames, like so:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;  c:\foo\bar\baz.c&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This is equivalent to the Unix-style &lt;samp&gt;c:/foo/bar/baz.c&lt;/samp&gt; (the&lt;br&gt;&lt;samp&gt;c:&lt;/samp&gt; part is the so-called drive letter).  When &lt;code&gt;make&lt;/code&gt; runs on&lt;br&gt;these systems, it supports backslashes as well as the Unix-style forward&lt;br&gt;slashes in pathnames.  However, this support does &lt;em&gt;not&lt;/em&gt; include the&lt;br&gt;wildcard expansion, where backslash is a quote character.  Therefore,&lt;br&gt;you &lt;em&gt;must&lt;/em&gt; use Unix-style slashes in these cases.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Wildcard-Function&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Wildcard-Pitfall&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Wildcard Pitfall&lt;/a&gt;, Up: &lt;a href=&quot;#Wildcards&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Wildcards&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-Function-wildcard&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;4.4.3 The Function &lt;code&gt;wildcard&lt;/code&gt;&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-wildcard-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Wildcard expansion happens automatically in rules.  But wildcard expansion&lt;br&gt;does not normally take place when a variable is set, or inside the&lt;br&gt;arguments of a function.  If you want to do wildcard expansion in such&lt;br&gt;places, you need to use the &lt;code&gt;wildcard&lt;/code&gt; function, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(wildcard &lt;var&gt;pattern&lt;/var&gt;…)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This string, used anywhere in a makefile, is replaced by a&lt;br&gt;space-separated list of names of existing files that match one of the&lt;br&gt;given file name patterns.  If no existing file name matches a pattern,&lt;br&gt;then that pattern is omitted from the output of the &lt;code&gt;wildcard&lt;/code&gt;&lt;br&gt;function.  Note that this is different from how unmatched wildcards&lt;br&gt;behave in rules, where they are used verbatim rather than ignored&lt;br&gt;(see &lt;a href=&quot;#Wildcard-Pitfall&quot;&gt;Wildcard Pitfall&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;One use of the &lt;code&gt;wildcard&lt;/code&gt; function is to get a list of all the C source&lt;br&gt;files in a directory, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(wildcard &lt;em&gt;.c)&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;We can change the list of C source files into a list of object files by&lt;br&gt;replacing the ‘&lt;samp&gt;.c&lt;/samp&gt;’ suffix with ‘&lt;samp&gt;.o&lt;/samp&gt;’ in the result, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(patsubst %.c,%.o,$(wildcard .c))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;(Here we have used another function, &lt;code&gt;patsubst&lt;/code&gt;.&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Thus, a makefile to compile all C source files in the directory and then&lt;br&gt;link them together could be written as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects := $(patsubst %.c,%.o,$(wildcard &lt;em&gt;.c))&lt;br&gt;&lt;br&gt;foo : $(objects)&lt;br&gt;        cc -o foo $(objects)&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;(This takes advantage of the implicit rule for compiling C programs, so&lt;br&gt;there is no need to write explicit rules for compiling the files.&lt;br&gt;See &lt;a href=&quot;#Flavors&quot;&gt;The Two Flavors of Variables&lt;/a&gt;, for an explanation of&lt;br&gt;‘&lt;samp&gt;:=&lt;/samp&gt;’, which is a variant of ‘&lt;samp&gt;=&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Directory-Search&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Phony-Targets&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Phony Targets&lt;/a&gt;, Previous: &lt;a href=&quot;#Wildcards&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Wildcards&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Searching-Directories-for-Prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.5 Searching Directories for Prerequisites&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-VPATH&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-vpath-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-vpath&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-search-path-for-prerequisites-_0028VPATH_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-directory-search-_0028VPATH_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;For large systems, it is often desirable to put sources in a separate&lt;br&gt;directory from the binaries.  The &lt;em&gt;directory search&lt;/em&gt; features of&lt;br&gt;&lt;code&gt;make&lt;/code&gt; facilitate this by searching several directories&lt;br&gt;automatically to find a prerequisite.  When you redistribute the files&lt;br&gt;among directories, you do not need to change the individual rules,&lt;br&gt;just the search paths.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#General-Search&quot; accesskey=&quot;1&quot;&gt;General Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Specifying a search path that applies&lt;br&gt;                                  to every prerequisite.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Selective-Search&quot; accesskey=&quot;2&quot;&gt;Selective Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Specifying a search path&lt;br&gt;                                  for a specified class of names.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Search-Algorithm&quot; accesskey=&quot;3&quot;&gt;Search Algorithm&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;When and how search paths are applied.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Recipes_002fSearch&quot; accesskey=&quot;4&quot;&gt;Recipes/Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to write recipes that work together&lt;br&gt;                                  with search paths.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Implicit_002fSearch&quot; accesskey=&quot;5&quot;&gt;Implicit/Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How search paths affect implicit rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Libraries_002fSearch&quot; accesskey=&quot;6&quot;&gt;Libraries/Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Directory search for link libraries.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;General-Search&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Selective-Search&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Selective Search&lt;/a&gt;, Previous: &lt;a href=&quot;#Directory-Search&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Directory Search&lt;/a&gt;, Up: &lt;a href=&quot;#Directory-Search&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Directory Search&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;VPATH_003a-Search-Path-for-All-Prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;4.5.1 &lt;code&gt;VPATH&lt;/code&gt;: Search Path for All Prerequisites&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-VPATH-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The value of the &lt;code&gt;make&lt;/code&gt; variable &lt;code&gt;VPATH&lt;/code&gt; specifies a list of&lt;br&gt;directories that &lt;code&gt;make&lt;/code&gt; should search.  Most often, the&lt;br&gt;directories are expected to contain prerequisite files that are not in the&lt;br&gt;current directory; however, &lt;code&gt;make&lt;/code&gt; uses &lt;code&gt;VPATH&lt;/code&gt; as a search&lt;br&gt;list for both prerequisites and targets of rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Thus, if a file that is listed as a target or prerequisite does not exist&lt;br&gt;in the current directory, &lt;code&gt;make&lt;/code&gt; searches the directories listed in&lt;br&gt;&lt;code&gt;VPATH&lt;/code&gt; for a file with that name.  If a file is found in one of&lt;br&gt;them, that file may become the prerequisite (see below).  Rules may then&lt;br&gt;specify the names of files in the prerequisite list as if they all&lt;br&gt;existed in the current directory.  See &lt;a href=&quot;#Recipes_002fSearch&quot;&gt;Writing Recipes with Directory Search&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In the &lt;code&gt;VPATH&lt;/code&gt; variable, directory names are separated by colons or&lt;br&gt;blanks.  The order in which directories are listed is the order followed&lt;br&gt;by &lt;code&gt;make&lt;/code&gt; in its search.  (On MS-DOS and MS-Windows, semi-colons&lt;br&gt;are used as separators of directory names in &lt;code&gt;VPATH&lt;/code&gt;, since the&lt;br&gt;colon can be used in the pathname itself, after the drive letter.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;VPATH = src:../headers&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;specifies a path containing two directories, &lt;samp&gt;src&lt;/samp&gt; and&lt;br&gt;&lt;samp&gt;../headers&lt;/samp&gt;, which &lt;code&gt;make&lt;/code&gt; searches in that order.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;With this value of &lt;code&gt;VPATH&lt;/code&gt;, the following rule,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo.o : foo.c&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;is interpreted as if it were written like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo.o : src/foo.c&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;assuming the file &lt;samp&gt;foo.c&lt;/samp&gt; does not exist in the current directory but&lt;br&gt;is found in the directory &lt;samp&gt;src&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Selective-Search&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Search-Algorithm&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Search Algorithm&lt;/a&gt;, Previous: &lt;a href=&quot;#General-Search&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;General Search&lt;/a&gt;, Up: &lt;a href=&quot;#Directory-Search&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Directory Search&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-vpath-Directive&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;4.5.2 The &lt;code&gt;vpath&lt;/code&gt; Directive&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-vpath-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Similar to the &lt;code&gt;VPATH&lt;/code&gt; variable, but more selective, is the&lt;br&gt;&lt;code&gt;vpath&lt;/code&gt; directive (note lower case), which allows you to specify a&lt;br&gt;search path for a particular class of file names: those that match a&lt;br&gt;particular pattern.  Thus you can supply certain search directories for&lt;br&gt;one class of file names and other directories (or none) for other file&lt;br&gt;names.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;There are three forms of the &lt;code&gt;vpath&lt;/code&gt; directive:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;vpath &lt;var&gt;pattern&lt;/var&gt; &lt;var&gt;directories&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Specify the search path &lt;var&gt;directories&lt;/var&gt; for file names that match&lt;br&gt;&lt;var&gt;pattern&lt;/var&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The search path, &lt;var&gt;directories&lt;/var&gt;, is a list of directories to be&lt;br&gt;searched, separated by colons (semi-colons on MS-DOS and MS-Windows) or&lt;br&gt;blanks, just like the search path used in the &lt;code&gt;VPATH&lt;/code&gt; variable.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;vpath &lt;var&gt;pattern&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Clear out the search path associated with &lt;var&gt;pattern&lt;/var&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;vpath&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;Clear all search paths previously specified with &lt;code&gt;vpath&lt;/code&gt; directives.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A &lt;code&gt;vpath&lt;/code&gt; pattern is a string containing a ‘&lt;samp&gt;%&lt;/samp&gt;’ character.  The&lt;br&gt;string must match the file name of a prerequisite that is being searched&lt;br&gt;for, the ‘&lt;samp&gt;%&lt;/samp&gt;’ character matching any sequence of zero or more&lt;br&gt;characters (as in pattern rules; see &lt;a href=&quot;#Pattern-Rules&quot;&gt;Defining and&lt;br&gt;Redefining Pattern Rules&lt;/a&gt;).  For example, &lt;code&gt;%.h&lt;/code&gt; matches files that&lt;br&gt;end in &lt;code&gt;.h&lt;/code&gt;.  (If there is no ‘&lt;samp&gt;%&lt;/samp&gt;’, the pattern must match the&lt;br&gt;prerequisite exactly, which is not useful very often.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0025_002c-quoting-in-vpath&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0025_002c-quoting-with-_005c-_0028backslash_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_005c-_0028backslash_0029_002c-to-quote-_0025&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-backslash-_0028_005c_0029_002c-to-quote-_0025&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-quoting-_0025_002c-in-vpath&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;‘&lt;samp&gt;%&lt;/samp&gt;’ characters in a &lt;code&gt;vpath&lt;/code&gt; directive’s pattern can be quoted&lt;br&gt;with preceding backslashes (‘&lt;samp&gt;\&lt;/samp&gt;’).  Backslashes that would otherwise&lt;br&gt;quote ‘&lt;samp&gt;%&lt;/samp&gt;’ characters can be quoted with more backslashes.&lt;br&gt;Backslashes that quote ‘&lt;samp&gt;%&lt;/samp&gt;’ characters or other backslashes are&lt;br&gt;removed from the pattern before it is compared to file names.  Backslashes&lt;br&gt;that are not in danger of quoting ‘&lt;samp&gt;%&lt;/samp&gt;’ characters go unmolested.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When a prerequisite fails to exist in the current directory, if the&lt;br&gt;&lt;var&gt;pattern&lt;/var&gt; in a &lt;code&gt;vpath&lt;/code&gt; directive matches the name of the&lt;br&gt;prerequisite file, then the &lt;var&gt;directories&lt;/var&gt; in that directive are searched&lt;br&gt;just like (and before) the directories in the &lt;code&gt;VPATH&lt;/code&gt; variable.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;vpath %.h ../headers&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;tells &lt;code&gt;make&lt;/code&gt; to look for any prerequisite whose name ends in &lt;samp&gt;.h&lt;/samp&gt;&lt;br&gt;in the directory &lt;samp&gt;../headers&lt;/samp&gt; if the file is not found in the current&lt;br&gt;directory.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If several &lt;code&gt;vpath&lt;/code&gt; patterns match the prerequisite file’s name, then&lt;br&gt;&lt;code&gt;make&lt;/code&gt; processes each matching &lt;code&gt;vpath&lt;/code&gt; directive one by one,&lt;br&gt;searching all the directories mentioned in each directive.  &lt;code&gt;make&lt;/code&gt;&lt;br&gt;handles multiple &lt;code&gt;vpath&lt;/code&gt; directives in the order in which they&lt;br&gt;appear in the makefile; multiple directives with the same pattern are&lt;br&gt;independent of each other.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Thus,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;vpath %.c foo&lt;br&gt;vpath %   blish&lt;br&gt;vpath %.c bar&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will look for a file ending in ‘&lt;samp&gt;.c&lt;/samp&gt;’ in &lt;samp&gt;foo&lt;/samp&gt;, then&lt;br&gt;&lt;samp&gt;blish&lt;/samp&gt;, then &lt;samp&gt;bar&lt;/samp&gt;, while&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;vpath %.c foo:bar&lt;br&gt;vpath %   blish&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will look for a file ending in ‘&lt;samp&gt;.c&lt;/samp&gt;’ in &lt;samp&gt;foo&lt;/samp&gt;, then&lt;br&gt;&lt;samp&gt;bar&lt;/samp&gt;, then &lt;samp&gt;blish&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Search-Algorithm&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Recipes_002fSearch&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Recipes/Search&lt;/a&gt;, Previous: &lt;a href=&quot;#Selective-Search&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Selective Search&lt;/a&gt;, Up: &lt;a href=&quot;#Directory-Search&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Directory Search&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;How-Directory-Searches-are-Performed&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;4.5.3 How Directory Searches are Performed&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-algorithm-for-directory-search&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-directory-search-algorithm&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When a prerequisite is found through directory search, regardless of type&lt;br&gt;(general or selective), the pathname located may not be the one that&lt;br&gt;&lt;code&gt;make&lt;/code&gt; actually provides you in the prerequisite list.  Sometimes&lt;br&gt;the path discovered through directory search is thrown away.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The algorithm &lt;code&gt;make&lt;/code&gt; uses to decide whether to keep or abandon a&lt;br&gt;path found via directory search is as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ol&gt;&lt;br&gt;&lt;li&gt; If a target file does not exist at the path specified in the makefile,&lt;br&gt;directory search is performed.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; If the directory search is successful, that path is kept and this file&lt;br&gt;is tentatively stored as the target.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; All prerequisites of this target are examined using this same method.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; After processing the prerequisites, the target may or may not need to be&lt;br&gt;rebuilt:&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;br&gt;&lt;li&gt; If the target does &lt;em&gt;not&lt;/em&gt; need to be rebuilt, the path to the file&lt;br&gt;found during directory search is used for any prerequisite lists which&lt;br&gt;contain this target.  In short, if &lt;code&gt;make&lt;/code&gt; doesn’t need to rebuild&lt;br&gt;the target then you use the path found via directory search.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; If the target &lt;em&gt;does&lt;/em&gt; need to be rebuilt (is out-of-date), the&lt;br&gt;pathname found during directory search is &lt;em&gt;thrown away&lt;/em&gt;, and the&lt;br&gt;target is rebuilt using the file name specified in the makefile.  In&lt;br&gt;short, if &lt;code&gt;make&lt;/code&gt; must rebuild, then the target is rebuilt locally,&lt;br&gt;not in the directory found via directory search.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This algorithm may seem complex, but in practice it is quite often&lt;br&gt;exactly what you want.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-traditional-directory-search-_0028GPATH_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-directory-search_002c-traditional-_0028GPATH_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Other versions of &lt;code&gt;make&lt;/code&gt; use a simpler algorithm: if the file does&lt;br&gt;not exist, and it is found via directory search, then that pathname is&lt;br&gt;always used whether or not the target needs to be built.  Thus, if the&lt;br&gt;target is rebuilt it is created at the pathname discovered during&lt;br&gt;directory search.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-GPATH&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;If, in fact, this is the behavior you want for some or all of your&lt;br&gt;directories, you can use the &lt;code&gt;GPATH&lt;/code&gt; variable to indicate this to&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;GPATH&lt;/code&gt; has the same syntax and format as &lt;code&gt;VPATH&lt;/code&gt; (that is, a&lt;br&gt;space- or colon-delimited list of pathnames).  If an out-of-date target&lt;br&gt;is found by directory search in a directory that also appears in&lt;br&gt;&lt;code&gt;GPATH&lt;/code&gt;, then that pathname is not thrown away.  The target is&lt;br&gt;rebuilt using the expanded path.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Recipes_002fSearch&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Implicit_002fSearch&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Implicit/Search&lt;/a&gt;, Previous: &lt;a href=&quot;#Search-Algorithm&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Search Algorithm&lt;/a&gt;, Up: &lt;a href=&quot;#Directory-Search&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Directory Search&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Writing-Recipes-with-Directory-Search&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;4.5.4 Writing Recipes with Directory Search&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-and-directory-search&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-directory-search-_0028VPATH_0029_002c-and-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When a prerequisite is found in another directory through directory search,&lt;br&gt;this cannot change the recipe of the rule; they will execute as written.&lt;br&gt;Therefore, you must write the recipe with care so that it will look for&lt;br&gt;the prerequisite in the directory where &lt;code&gt;make&lt;/code&gt; finds it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This is done with the &lt;em&gt;automatic variables&lt;/em&gt; such as ‘&lt;samp&gt;$^&lt;/samp&gt;’&lt;br&gt;(see &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;).&lt;br&gt;For instance, the value of ‘&lt;samp&gt;$^&lt;/samp&gt;’ is a&lt;br&gt;list of all the prerequisites of the rule, including the names of&lt;br&gt;the directories in which they were found, and the value of&lt;br&gt;‘&lt;samp&gt;$@&lt;/samp&gt;’ is the target.  Thus:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo.o : foo.c&lt;br&gt;        cc -c $(CFLAGS) $^ -o $@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;(The variable &lt;code&gt;CFLAGS&lt;/code&gt; exists so you can specify flags for C&lt;br&gt;compilation by implicit rules; we use it here for consistency so it will&lt;br&gt;affect all C compilations uniformly;&lt;br&gt;see &lt;a href=&quot;#Implicit-Variables&quot;&gt;Variables Used by Implicit Rules&lt;/a&gt;.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Often the prerequisites include header files as well, which you do not&lt;br&gt;want to mention in the recipe.  The automatic variable ‘&lt;samp&gt;$&amp;lt;&lt;/samp&gt;’ is&lt;br&gt;just the first prerequisite:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;VPATH = src:../headers&lt;br&gt;foo.o : foo.c defs.h hack.h&lt;br&gt;        cc -c $(CFLAGS) $&amp;lt; -o $@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Implicit_002fSearch&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Libraries_002fSearch&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Libraries/Search&lt;/a&gt;, Previous: &lt;a href=&quot;#Recipes_002fSearch&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Recipes/Search&lt;/a&gt;, Up: &lt;a href=&quot;#Directory-Search&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Directory Search&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Directory-Search-and-Implicit-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;4.5.5 Directory Search and Implicit Rules&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-VPATH_002c-and-implicit-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-directory-search-_0028VPATH_0029_002c-and-implicit-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-search-path-for-prerequisites-_0028VPATH_0029_002c-and-implicit-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-implicit-rule_002c-and-directory-search&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-implicit-rule_002c-and-VPATH&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-implicit_002c-and-directory-search&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-implicit_002c-and-VPATH&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The search through the directories specified in &lt;code&gt;VPATH&lt;/code&gt; or with&lt;br&gt;&lt;code&gt;vpath&lt;/code&gt; also happens during consideration of implicit rules&lt;br&gt;(see &lt;a href=&quot;#Implicit-Rules&quot;&gt;Using Implicit Rules&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, when a file &lt;samp&gt;foo.o&lt;/samp&gt; has no explicit rule, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;considers implicit rules, such as the built-in rule to compile&lt;br&gt;&lt;samp&gt;foo.c&lt;/samp&gt; if that file exists.  If such a file is lacking in the&lt;br&gt;current directory, the appropriate directories are searched for it.  If&lt;br&gt;&lt;samp&gt;foo.c&lt;/samp&gt; exists (or is mentioned in the makefile) in any of the&lt;br&gt;directories, the implicit rule for C compilation is applied.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The recipes of implicit rules normally use automatic variables as a&lt;br&gt;matter of necessity; consequently they will use the file names found by&lt;br&gt;directory search with no extra effort.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Libraries_002fSearch&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Implicit_002fSearch&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Implicit/Search&lt;/a&gt;, Up: &lt;a href=&quot;#Directory-Search&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Directory Search&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Directory-Search-for-Link-Libraries&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;4.5.6 Directory Search for Link Libraries&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-link-libraries_002c-and-directory-search&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-libraries-for-linking_002c-directory-search&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-directory-search-_0028VPATH_0029_002c-and-link-libraries&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-VPATH_002c-and-link-libraries&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-search-path-for-prerequisites-_0028VPATH_0029_002c-and-link-libraries&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dl-_0028library-search_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-link-libraries_002c-patterns-matching&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eLIBPATTERNS_002c-and-link-libraries&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eLIBPATTERNS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Directory search applies in a special way to libraries used with the&lt;br&gt;linker.  This special feature comes into play when you write a prerequisite&lt;br&gt;whose name is of the form ‘&lt;samp&gt;-l&lt;var&gt;name&lt;/var&gt;&lt;/samp&gt;’.  (You can tell something&lt;br&gt;strange is going on here because the prerequisite is normally the name of a&lt;br&gt;file, and the &lt;em&gt;file name&lt;/em&gt; of a library generally looks like&lt;br&gt;&lt;samp&gt;lib&lt;var&gt;name&lt;/var&gt;.a&lt;/samp&gt;, not like ‘&lt;samp&gt;-l&lt;var&gt;name&lt;/var&gt;&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When a prerequisite’s name has the form ‘&lt;samp&gt;-l&lt;var&gt;name&lt;/var&gt;&lt;/samp&gt;’, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;handles it specially by searching for the file &lt;samp&gt;lib&lt;var&gt;name&lt;/var&gt;.so&lt;/samp&gt;,&lt;br&gt;and, if it is not found, for the file &lt;samp&gt;lib&lt;var&gt;name&lt;/var&gt;.a&lt;/samp&gt; in the current&lt;br&gt;directory, in directories specified by matching &lt;code&gt;vpath&lt;/code&gt;&lt;br&gt;search paths and the &lt;code&gt;VPATH&lt;/code&gt; search path, and then in the&lt;br&gt;directories &lt;samp&gt;/lib&lt;/samp&gt;, &lt;samp&gt;/usr/lib&lt;/samp&gt;, and &lt;samp&gt;&lt;var&gt;prefix&lt;/var&gt;/lib&lt;/samp&gt;&lt;br&gt;(normally &lt;samp&gt;/usr/local/lib&lt;/samp&gt;, but MS-DOS/MS-Windows versions of&lt;br&gt;&lt;code&gt;make&lt;/code&gt; behave as if &lt;var&gt;prefix&lt;/var&gt; is defined to be the root of the&lt;br&gt;DJGPP installation tree).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, if there is a &lt;samp&gt;/usr/lib/libcurses.a&lt;/samp&gt; library on your&lt;br&gt;system (and no &lt;samp&gt;/usr/lib/libcurses.so&lt;/samp&gt; file), then&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo : foo.c -lcurses&lt;br&gt;        cc $^ -o $@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;would cause the command ‘&lt;samp&gt;cc foo.c /usr/lib/libcurses.a -o foo&lt;/samp&gt;’ to&lt;br&gt;be executed when &lt;samp&gt;foo&lt;/samp&gt; is older than &lt;samp&gt;foo.c&lt;/samp&gt; or than&lt;br&gt;&lt;samp&gt;/usr/lib/libcurses.a&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Although the default set of files to be searched for is&lt;br&gt;&lt;samp&gt;lib&lt;var&gt;name&lt;/var&gt;.so&lt;/samp&gt; and &lt;samp&gt;lib&lt;var&gt;name&lt;/var&gt;.a&lt;/samp&gt;, this is customizable&lt;br&gt;via the &lt;code&gt;.LIBPATTERNS&lt;/code&gt; variable.  Each word in the value of this&lt;br&gt;variable is a pattern string.  When a prerequisite like&lt;br&gt;‘&lt;samp&gt;-l&lt;var&gt;name&lt;/var&gt;&lt;/samp&gt;’ is seen, &lt;code&gt;make&lt;/code&gt; will replace the percent in&lt;br&gt;each pattern in the list with &lt;var&gt;name&lt;/var&gt; and perform the above directory&lt;br&gt;searches using each library file name.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The default value for &lt;code&gt;.LIBPATTERNS&lt;/code&gt; is ‘&lt;samp&gt;lib%.so lib%.a&lt;/samp&gt;’,&lt;br&gt;which provides the default behavior described above.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can turn off link library expansion completely by setting this&lt;br&gt;variable to an empty value.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Phony-Targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Force-Targets&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Force Targets&lt;/a&gt;, Previous: &lt;a href=&quot;#Directory-Search&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Directory Search&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Phony-Targets-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.6 Phony Targets&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-phony-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-targets_002c-phony&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-targets-without-a-file&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A phony target is one that is not really the name of a file; rather it&lt;br&gt;is just a name for a recipe to be executed when you make an explicit&lt;br&gt;request.  There are two reasons to use a phony target: to avoid a&lt;br&gt;conflict with a file of the same name, and to improve performance.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you write a rule whose recipe will not create the target file, the&lt;br&gt;recipe will be executed every time the target comes up for remaking.&lt;br&gt;Here is an example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;clean:&lt;br&gt;        rm .o temp&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Because the &lt;code&gt;rm&lt;/code&gt; command does not create a file named &lt;samp&gt;clean&lt;/samp&gt;,&lt;br&gt;probably no such file will ever exist.  Therefore, the &lt;code&gt;rm&lt;/code&gt; command&lt;br&gt;will be executed every time you say ‘&lt;samp&gt;make clean&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-rm-_0028shell-command_0029-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002ePHONY&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;In this example, the &lt;samp&gt;clean&lt;/samp&gt; target will not work properly if a&lt;br&gt;file named &lt;samp&gt;clean&lt;/samp&gt; is ever created in this directory.  Since it&lt;br&gt;has no prerequisites, &lt;samp&gt;clean&lt;/samp&gt; would always be considered up to&lt;br&gt;date and its recipe would not be executed.  To avoid this problem you&lt;br&gt;can explicitly declare the target to be phony by making it a&lt;br&gt;prerequisite of the special target &lt;code&gt;.PHONY&lt;/code&gt;&lt;br&gt;(see &lt;a href=&quot;#Special-Targets&quot;&gt;Special Built-in Target Names&lt;/a&gt;) as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.PHONY: clean&lt;br&gt;clean:&lt;br&gt;        rm &lt;em&gt;.o temp&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Once this is done, ‘&lt;samp&gt;make clean&lt;/samp&gt;’ will run the recipe regardless of&lt;br&gt;whether there is a file named &lt;samp&gt;clean&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Phony targets are also useful in conjunction with recursive&lt;br&gt;invocations of &lt;code&gt;make&lt;/code&gt; (see &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;).&lt;br&gt;In this situation the makefile will often contain a variable which&lt;br&gt;lists a number of sub-directories to be built.  A simplistic way to&lt;br&gt;handle this is to define one rule with a recipe that loops over the&lt;br&gt;sub-directories, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;SUBDIRS = foo bar baz&lt;br&gt;&lt;br&gt;subdirs:&lt;br&gt;        for dir in $(SUBDIRS); do \&lt;br&gt;          $(MAKE) -C $$dir; \&lt;br&gt;        done&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;There are problems with this method, however.  First, any error&lt;br&gt;detected in a sub-make is ignored by this rule, so it will continue&lt;br&gt;to build the rest of the directories even when one fails.  This can be&lt;br&gt;overcome by adding shell commands to note the error and exit, but then&lt;br&gt;it will do so even if &lt;code&gt;make&lt;/code&gt; is invoked with the &lt;code&gt;-k&lt;/code&gt;&lt;br&gt;option, which is unfortunate.  Second, and perhaps more importantly,&lt;br&gt;you cannot take advantage of &lt;code&gt;make&lt;/code&gt;’s ability to build targets in&lt;br&gt;parallel (see &lt;a href=&quot;#Parallel&quot;&gt;Parallel Execution&lt;/a&gt;), since there is only&lt;br&gt;one rule.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;By declaring the sub-directories as &lt;code&gt;.PHONY&lt;/code&gt; targets (you must do&lt;br&gt;this as the sub-directory obviously always exists; otherwise it won’t&lt;br&gt;be built) you can remove these problems:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;SUBDIRS = foo bar baz&lt;br&gt;&lt;br&gt;.PHONY: subdirs $(SUBDIRS)&lt;br&gt;&lt;br&gt;subdirs: $(SUBDIRS)&lt;br&gt;&lt;br&gt;$(SUBDIRS):&lt;br&gt;        $(MAKE) -C $@&lt;br&gt;&lt;br&gt;foo: baz&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here we’ve also declared that the &lt;samp&gt;foo&lt;/samp&gt; sub-directory cannot be&lt;br&gt;built until after the &lt;samp&gt;baz&lt;/samp&gt; sub-directory is complete; this kind of&lt;br&gt;relationship declaration is particularly important when attempting&lt;br&gt;parallel builds.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The implicit rule search (see &lt;a href=&quot;#Implicit-Rules&quot;&gt;Implicit Rules&lt;/a&gt;) is skipped for&lt;br&gt;&lt;code&gt;.PHONY&lt;/code&gt; targets.  This is why declaring a target as&lt;br&gt;&lt;code&gt;.PHONY&lt;/code&gt; is good for performance, even if you are not worried&lt;br&gt;about the actual file existing.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A phony target should not be a prerequisite of a real target file; if it&lt;br&gt;is, its recipe will be run every time &lt;code&gt;make&lt;/code&gt; goes to update that&lt;br&gt;file.  As long as a phony target is never a prerequisite of a real&lt;br&gt;target, the phony target recipe will be executed only when the phony&lt;br&gt;target is a specified goal (see &lt;a href=&quot;#Goals&quot;&gt;Arguments to Specify the&lt;br&gt;Goals&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Phony targets can have prerequisites.  When one directory contains multiple&lt;br&gt;programs, it is most convenient to describe all of the programs in one&lt;br&gt;makefile &lt;samp&gt;./Makefile&lt;/samp&gt;.  Since the target remade by default will be the&lt;br&gt;first one in the makefile, it is common to make this a phony target named&lt;br&gt;‘&lt;samp&gt;all&lt;/samp&gt;’ and give it, as prerequisites, all the individual programs.  For&lt;br&gt;example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;all : prog1 prog2 prog3&lt;br&gt;.PHONY : all&lt;br&gt;&lt;br&gt;prog1 : prog1.o utils.o&lt;br&gt;        cc -o prog1 prog1.o utils.o&lt;br&gt;&lt;br&gt;prog2 : prog2.o&lt;br&gt;        cc -o prog2 prog2.o&lt;br&gt;&lt;br&gt;prog3 : prog3.o sort.o utils.o&lt;br&gt;        cc -o prog3 prog3.o sort.o utils.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Now you can say just ‘&lt;samp&gt;make&lt;/samp&gt;’ to remake all three programs, or&lt;br&gt;specify as arguments the ones to remake (as in ‘&lt;samp&gt;make prog1&lt;br&gt;prog3&lt;/samp&gt;’).  Phoniness is not inherited: the prerequisites of a phony&lt;br&gt;target are not themselves phony, unless explicitly declared to be so.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When one phony target is a prerequisite of another, it serves as a subroutine&lt;br&gt;of the other.  For example, here ‘&lt;samp&gt;make cleanall&lt;/samp&gt;’ will delete the&lt;br&gt;object files, the difference files, and the file &lt;samp&gt;program&lt;/samp&gt;:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.PHONY: cleanall cleanobj cleandiff&lt;br&gt;&lt;br&gt;cleanall : cleanobj cleandiff&lt;br&gt;        rm program&lt;br&gt;&lt;br&gt;cleanobj :&lt;br&gt;        rm .o&lt;br&gt;&lt;br&gt;cleandiff :&lt;br&gt;        rm &lt;em&gt;.diff&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Force-Targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Empty-Targets&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Empty Targets&lt;/a&gt;, Previous: &lt;a href=&quot;#Phony-Targets&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Phony Targets&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Rules-without-Recipes-or-Prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.7 Rules without Recipes or Prerequisites&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-force-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-targets_002c-force&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-FORCE&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-no-recipe-or-prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If a rule has no prerequisites or recipe, and the target of the rule&lt;br&gt;is a nonexistent file, then &lt;code&gt;make&lt;/code&gt; imagines this target to have&lt;br&gt;been updated whenever its rule is run.  This implies that all targets&lt;br&gt;depending on this one will always have their recipe run.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;An example will illustrate this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;clean: FORCE&lt;br&gt;        rm $(objects)&lt;br&gt;FORCE:&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here the target ‘&lt;samp&gt;FORCE&lt;/samp&gt;’ satisfies the special conditions, so the&lt;br&gt;target &lt;samp&gt;clean&lt;/samp&gt; that depends on it is forced to run its recipe.&lt;br&gt;There is nothing special about the name ‘&lt;samp&gt;FORCE&lt;/samp&gt;’, but that is one&lt;br&gt;name commonly used this way.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;As you can see, using ‘&lt;samp&gt;FORCE&lt;/samp&gt;’ this way has the same results as using&lt;br&gt;‘&lt;samp&gt;.PHONY: clean&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Using ‘&lt;samp&gt;.PHONY&lt;/samp&gt;’ is more explicit and more efficient.  However,&lt;br&gt;other versions of &lt;code&gt;make&lt;/code&gt; do not support ‘&lt;samp&gt;.PHONY&lt;/samp&gt;’; thus&lt;br&gt;‘&lt;samp&gt;FORCE&lt;/samp&gt;’ appears in many makefiles.  See &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Empty-Targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Special-Targets&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Special Targets&lt;/a&gt;, Previous: &lt;a href=&quot;#Force-Targets&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Force Targets&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Empty-Target-Files-to-Record-Events&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.8 Empty Target Files to Record Events&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-empty-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-targets_002c-empty&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recording-events-with-empty-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;em&gt;empty target&lt;/em&gt; is a variant of the phony target; it is used to hold&lt;br&gt;recipes for an action that you request explicitly from time to time.&lt;br&gt;Unlike a phony target, this target file can really exist; but the file’s&lt;br&gt;contents do not matter, and usually are empty.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The purpose of the empty target file is to record, with its&lt;br&gt;last-modification time, when the rule’s recipe was last executed.  It&lt;br&gt;does so because one of the commands in the recipe is a &lt;code&gt;touch&lt;/code&gt;&lt;br&gt;command to update the target file.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The empty target file should have some prerequisites (otherwise it&lt;br&gt;doesn’t make sense).  When you ask to remake the empty target, the&lt;br&gt;recipe is executed if any prerequisite is more recent than the target;&lt;br&gt;in other words, if a prerequisite has changed since the last time you&lt;br&gt;remade the target.  Here is an example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;print: foo.c bar.c&lt;br&gt;        lpr -p $?&lt;br&gt;        touch print&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;index-print-target-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-lpr-_0028shell-command_0029-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-touch-_0028shell-command_0029-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;With this rule, ‘&lt;samp&gt;make print&lt;/samp&gt;’ will execute the &lt;code&gt;lpr&lt;/code&gt; command if&lt;br&gt;either source file has changed since the last ‘&lt;samp&gt;make print&lt;/samp&gt;’.  The&lt;br&gt;automatic variable ‘&lt;samp&gt;$?&lt;/samp&gt;’ is used to print only those files that have&lt;br&gt;changed (see &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Special-Targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Multiple-Targets&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Multiple Targets&lt;/a&gt;, Previous: &lt;a href=&quot;#Empty-Targets&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Empty Targets&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Special-Built_002din-Target-Names&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.9 Special Built-in Target Names&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-special-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-built_002din-special-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-targets_002c-built_002din-special&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Certain names have special meanings if they appear as targets.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002ePHONY-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.PHONY&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;The prerequisites of the special target &lt;code&gt;.PHONY&lt;/code&gt; are considered to&lt;br&gt;be phony targets.  When it is time to consider such a target,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; will run its recipe unconditionally, regardless of&lt;br&gt;whether a file with that name exists or what its last-modification&lt;br&gt;time is.  See &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eSUFFIXES&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.SUFFIXES&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;The prerequisites of the special target &lt;code&gt;.SUFFIXES&lt;/code&gt; are the list&lt;br&gt;of suffixes to be used in checking for suffix rules.&lt;br&gt;See &lt;a href=&quot;#Suffix-Rules&quot;&gt;Old-Fashioned Suffix Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eDEFAULT&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.DEFAULT&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;The recipe specified for &lt;code&gt;.DEFAULT&lt;/code&gt; is used for any target for&lt;br&gt;which no rules are found (either explicit rules or implicit rules).&lt;br&gt;See &lt;a href=&quot;#Last-Resort&quot;&gt;Last Resort&lt;/a&gt;.  If a &lt;code&gt;.DEFAULT&lt;/code&gt; recipe is specified, every&lt;br&gt;file mentioned as a prerequisite, but not as a target in a rule, will have&lt;br&gt;that recipe executed on its behalf.  See &lt;a href=&quot;#Implicit-Rule-Search&quot;&gt;Implicit Rule Search Algorithm&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002ePRECIOUS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.PRECIOUS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-precious-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-preserving-with-_002ePRECIOUS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The targets which &lt;code&gt;.PRECIOUS&lt;/code&gt; depends on are given the following&lt;br&gt;special treatment: if &lt;code&gt;make&lt;/code&gt; is killed or interrupted during the&lt;br&gt;execution of their recipes, the target is not deleted.&lt;br&gt;See &lt;a href=&quot;#Interrupts&quot;&gt;Interrupting or Killing &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.  Also, if the&lt;br&gt;target is an intermediate file, it will not be deleted after it is no&lt;br&gt;longer needed, as is normally done.  See &lt;a href=&quot;#Chained-Rules&quot;&gt;Chains of&lt;br&gt;Implicit Rules&lt;/a&gt;.  In this latter respect it overlaps with the&lt;br&gt;&lt;code&gt;.SECONDARY&lt;/code&gt; special target.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can also list the target pattern of an implicit rule (such as&lt;br&gt;‘&lt;samp&gt;%.o&lt;/samp&gt;’) as a prerequisite file of the special target &lt;code&gt;.PRECIOUS&lt;/code&gt;&lt;br&gt;to preserve intermediate files created by rules whose target patterns&lt;br&gt;match that file’s name.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eINTERMEDIATE&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.INTERMEDIATE&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-intermediate-targets_002c-explicit&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The targets which &lt;code&gt;.INTERMEDIATE&lt;/code&gt; depends on are treated as&lt;br&gt;intermediate files.  See &lt;a href=&quot;#Chained-Rules&quot;&gt;Chains of Implicit Rules&lt;/a&gt;.&lt;br&gt;&lt;code&gt;.INTERMEDIATE&lt;/code&gt; with no prerequisites has no effect.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eSECONDARY&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.SECONDARY&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-secondary-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-preserving-with-_002eSECONDARY&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The targets which &lt;code&gt;.SECONDARY&lt;/code&gt; depends on are treated as&lt;br&gt;intermediate files, except that they are never automatically deleted.&lt;br&gt;See &lt;a href=&quot;#Chained-Rules&quot;&gt;Chains of Implicit Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;.SECONDARY&lt;/code&gt; with no prerequisites causes all targets to be treated&lt;br&gt;as secondary (i.e., no target is removed because it is considered&lt;br&gt;intermediate).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eSECONDEXPANSION-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.SECONDEXPANSION&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;If &lt;code&gt;.SECONDEXPANSION&lt;/code&gt; is mentioned as a target anywhere in the&lt;br&gt;makefile, then all prerequisite lists defined &lt;em&gt;after&lt;/em&gt; it appears&lt;br&gt;will be expanded a second time after all makefiles have been read in.&lt;br&gt;See &lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eDELETE_005fON_005fERROR&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.DELETE_ON_ERROR&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-removing-targets-on-failure&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If &lt;code&gt;.DELETE_ON_ERROR&lt;/code&gt; is mentioned as a target anywhere in the&lt;br&gt;makefile, then &lt;code&gt;make&lt;/code&gt; will delete the target of a rule if it has&lt;br&gt;changed and its recipe exits with a nonzero exit status, just as it&lt;br&gt;does when it receives a signal.  See &lt;a href=&quot;#Errors&quot;&gt;Errors in Recipes&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eIGNORE&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.IGNORE&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;If you specify prerequisites for &lt;code&gt;.IGNORE&lt;/code&gt;, then &lt;code&gt;make&lt;/code&gt; will&lt;br&gt;ignore errors in execution of the recipe for those particular files.&lt;br&gt;The recipe for &lt;code&gt;.IGNORE&lt;/code&gt; (if any) is ignored.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If mentioned as a target with no prerequisites, &lt;code&gt;.IGNORE&lt;/code&gt; says to&lt;br&gt;ignore errors in execution of recipes for all files.  This usage of&lt;br&gt;‘&lt;samp&gt;.IGNORE&lt;/samp&gt;’ is supported only for historical compatibility.  Since&lt;br&gt;this affects every recipe in the makefile, it is not very useful; we&lt;br&gt;recommend you use the more selective ways to ignore errors in specific&lt;br&gt;recipes.  See &lt;a href=&quot;#Errors&quot;&gt;Errors in Recipes&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eLOW_005fRESOLUTION_005fTIME&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.LOW_RESOLUTION_TIME&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;If you specify prerequisites for &lt;code&gt;.LOW_RESOLUTION_TIME&lt;/code&gt;,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; assumes that these files are created by commands that&lt;br&gt;generate low resolution time stamps.  The recipe for the&lt;br&gt;&lt;code&gt;.LOW_RESOLUTION_TIME&lt;/code&gt; target are ignored.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The high resolution file time stamps of many modern file systems&lt;br&gt;lessen the chance of &lt;code&gt;make&lt;/code&gt; incorrectly concluding that a file&lt;br&gt;is up to date.  Unfortunately, some hosts do not provide a way to set a&lt;br&gt;high resolution file time stamp, so commands like ‘&lt;samp&gt;cp -p&lt;/samp&gt;’ that&lt;br&gt;explicitly set a file’s time stamp must discard its sub-second part.&lt;br&gt;If a file is created by such a command, you should list it as a&lt;br&gt;prerequisite of &lt;code&gt;.LOW_RESOLUTION_TIME&lt;/code&gt; so that &lt;code&gt;make&lt;/code&gt;&lt;br&gt;does not mistakenly conclude that the file is out of date.  For&lt;br&gt;example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.LOW_RESOLUTION_TIME: dst&lt;br&gt;dst: src&lt;br&gt;        cp -p src dst&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Since ‘&lt;samp&gt;cp -p&lt;/samp&gt;’ discards the sub-second part of &lt;samp&gt;src&lt;/samp&gt;’s time&lt;br&gt;stamp, &lt;samp&gt;dst&lt;/samp&gt; is typically slightly older than &lt;samp&gt;src&lt;/samp&gt; even when&lt;br&gt;it is up to date.  The &lt;code&gt;.LOW_RESOLUTION_TIME&lt;/code&gt; line causes&lt;br&gt;&lt;code&gt;make&lt;/code&gt; to consider &lt;samp&gt;dst&lt;/samp&gt; to be up to date if its time stamp&lt;br&gt;is at the start of the same second that &lt;samp&gt;src&lt;/samp&gt;’s time stamp is in.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Due to a limitation of the archive format, archive member time stamps&lt;br&gt;are always low resolution.  You need not list archive members as&lt;br&gt;prerequisites of &lt;code&gt;.LOW_RESOLUTION_TIME&lt;/code&gt;, as &lt;code&gt;make&lt;/code&gt; does this&lt;br&gt;automatically.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eSILENT&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.SILENT&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;If you specify prerequisites for &lt;code&gt;.SILENT&lt;/code&gt;, then &lt;code&gt;make&lt;/code&gt; will&lt;br&gt;not print the recipe used to remake those particular files before&lt;br&gt;executing them.  The recipe for &lt;code&gt;.SILENT&lt;/code&gt; is ignored.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If mentioned as a target with no prerequisites, &lt;code&gt;.SILENT&lt;/code&gt; says not&lt;br&gt;to print any recipes before executing them.  This usage of&lt;br&gt;‘&lt;samp&gt;.SILENT&lt;/samp&gt;’ is supported only for historical compatibility.  We&lt;br&gt;recommend you use the more selective ways to silence specific recipes.&lt;br&gt;See &lt;a href=&quot;#Echoing&quot;&gt;Recipe Echoing&lt;/a&gt;.  If you want to silence all recipes&lt;br&gt;for a particular run of &lt;code&gt;make&lt;/code&gt;, use the ‘&lt;samp&gt;-s&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;&lt;span class=&quot;nolinebreak&quot;&gt;–silent&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; option (see &lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eEXPORT_005fALL_005fVARIABLES&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.EXPORT_ALL_VARIABLES&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;Simply by being mentioned as a target, this tells &lt;code&gt;make&lt;/code&gt; to&lt;br&gt;export all variables to child processes by default.&lt;br&gt;See &lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Communicating Variables to a&lt;br&gt;Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eNOTPARALLEL&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.NOTPARALLEL&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-parallel-execution_002c-overriding&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If &lt;code&gt;.NOTPARALLEL&lt;/code&gt; is mentioned as a target, then this invocation&lt;br&gt;of &lt;code&gt;make&lt;/code&gt; will be run serially, even if the ‘&lt;samp&gt;-j&lt;/samp&gt;’ option is&lt;br&gt;given.  Any recursively invoked &lt;code&gt;make&lt;/code&gt; command will still run&lt;br&gt;recipes in parallel (unless its makefile also contains this target).&lt;br&gt;Any prerequisites on this target are ignored.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eONESHELL&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.ONESHELL&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-recipe-execution_002c-single-invocation&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If &lt;code&gt;.ONESHELL&lt;/code&gt; is mentioned as a target, then when a target is&lt;br&gt;built all lines of the recipe will be given to a single invocation of&lt;br&gt;the shell rather than each line being invoked separately&lt;br&gt;(see &lt;a href=&quot;#Execution&quot;&gt;Recipe Execution&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002ePOSIX&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.POSIX&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-POSIX_002dconforming-mode_002c-setting&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If &lt;code&gt;.POSIX&lt;/code&gt; is mentioned as a target, then the makefile will be&lt;br&gt;parsed and run in POSIX-conforming mode.  This does &lt;em&gt;not&lt;/em&gt; mean&lt;br&gt;that only POSIX-conforming makefiles will be accepted: all advanced&lt;br&gt;GNU &lt;code&gt;make&lt;/code&gt; features are still available.  Rather, this target&lt;br&gt;causes &lt;code&gt;make&lt;/code&gt; to behave as required by POSIX in those areas&lt;br&gt;where &lt;code&gt;make&lt;/code&gt;’s default behavior differs.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In particular, if this target is mentioned then recipes will be&lt;br&gt;invoked as if the shell had been passed the &lt;code&gt;-e&lt;/code&gt; flag: the first&lt;br&gt;failing command in a recipe will cause the recipe to fail immediately.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Any defined implicit rule suffix also counts as a special target if it&lt;br&gt;appears as a target, and so does the concatenation of two suffixes, such&lt;br&gt;as ‘&lt;samp&gt;.c.o&lt;/samp&gt;’.  These targets are suffix rules, an obsolete way of&lt;br&gt;defining implicit rules (but a way still widely used).  In principle, any&lt;br&gt;target name could be special in this way if you break it in two and add&lt;br&gt;both pieces to the suffix list.  In practice, suffixes normally begin with&lt;br&gt;‘&lt;samp&gt;.&lt;/samp&gt;’, so these special target names also begin with ‘&lt;samp&gt;.&lt;/samp&gt;’.&lt;br&gt;See &lt;a href=&quot;#Suffix-Rules&quot;&gt;Old-Fashioned Suffix Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Multiple-Targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Multiple-Rules&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Multiple Rules&lt;/a&gt;, Previous: &lt;a href=&quot;#Special-Targets&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Special Targets&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Multiple-Targets-in-a-Rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.10 Multiple Targets in a Rule&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-multiple-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-several-targets-in-a-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-targets_002c-multiple&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-with-multiple-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A rule with multiple targets is equivalent to writing many rules, each with&lt;br&gt;one target, and all identical aside from that.  The same recipe applies to&lt;br&gt;all the targets, but its effect may vary because you can substitute the&lt;br&gt;actual target name into the recipe using ‘&lt;samp&gt;$@&lt;/samp&gt;’.  The rule contributes&lt;br&gt;the same prerequisites to all the targets also.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This is useful in two cases.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; You want just prerequisites, no recipe.  For example:&lt;br&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;kbd.o command.o files.o: command.h&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;gives an additional prerequisite to each of the three object files&lt;br&gt;mentioned.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Similar recipes work for all the targets.  The recipes do not need&lt;br&gt;to be absolutely identical, since the automatic variable ‘&lt;samp&gt;$@&lt;/samp&gt;’&lt;br&gt;can be used to substitute the particular target to be remade into the&lt;br&gt;commands (see &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;).  For example:&lt;br&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;bigoutput littleoutput : text.g&lt;br&gt;        generate text.g -$(subst output,,$@) &amp;gt; $@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;index-subst&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;is equivalent to&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;bigoutput : text.g&lt;br&gt;        generate text.g -big &amp;gt; bigoutput&lt;br&gt;littleoutput : text.g&lt;br&gt;        generate text.g -little &amp;gt; littleoutput&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here we assume the hypothetical program &lt;code&gt;generate&lt;/code&gt; makes two&lt;br&gt;types of output, one if given ‘&lt;samp&gt;-big&lt;/samp&gt;’ and one if given&lt;br&gt;‘&lt;samp&gt;-little&lt;/samp&gt;’.&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;,&lt;br&gt;for an explanation of the &lt;code&gt;subst&lt;/code&gt; function.&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Suppose you would like to vary the prerequisites according to the&lt;br&gt;target, much as the variable ‘&lt;samp&gt;$@&lt;/samp&gt;’ allows you to vary the recipe.&lt;br&gt;You cannot do this with multiple targets in an ordinary rule, but you&lt;br&gt;can do it with a &lt;em&gt;static pattern rule&lt;/em&gt;.  See &lt;a href=&quot;#Static-Pattern&quot;&gt;Static Pattern Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Multiple-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Static-Pattern&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Static Pattern&lt;/a&gt;, Previous: &lt;a href=&quot;#Multiple-Targets&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Multiple Targets&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Multiple-Rules-for-One-Target&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.11 Multiple Rules for One Target&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-multiple-rules-for-one-target&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-several-rules-for-one-target&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-multiple-for-one-target&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-target_002c-multiple-rules-for-one&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;One file can be the target of several rules.  All the prerequisites&lt;br&gt;mentioned in all the rules are merged into one list of prerequisites for&lt;br&gt;the target.  If the target is older than any prerequisite from any rule,&lt;br&gt;the recipe is executed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;There can only be one recipe to be executed for a file.  If more than&lt;br&gt;one rule gives a recipe for the same file, &lt;code&gt;make&lt;/code&gt; uses the last&lt;br&gt;one given and prints an error message.  (As a special case, if the&lt;br&gt;file’s name begins with a dot, no error message is printed.  This odd&lt;br&gt;behavior is only for compatibility with other implementations of&lt;br&gt;&lt;code&gt;make&lt;/code&gt;… you should avoid using it).  Occasionally it is&lt;br&gt;useful to have the same target invoke multiple recipes which are&lt;br&gt;defined in different parts of your makefile; you can use&lt;br&gt;&lt;em&gt;double-colon rules&lt;/em&gt; (see &lt;a href=&quot;#Double_002dColon&quot;&gt;Double-Colon&lt;/a&gt;) for this.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;An extra rule with just prerequisites can be used to give a few extra&lt;br&gt;prerequisites to many files at once.  For example, makefiles often&lt;br&gt;have a variable, such as &lt;code&gt;objects&lt;/code&gt;, containing a list of all the&lt;br&gt;compiler output files in the system being made.  An easy way to say&lt;br&gt;that all of them must be recompiled if &lt;samp&gt;config.h&lt;/samp&gt; changes is to&lt;br&gt;write the following:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = foo.o bar.o&lt;br&gt;foo.o : defs.h&lt;br&gt;bar.o : defs.h test.h&lt;br&gt;$(objects) : config.h&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This could be inserted or taken out without changing the rules that really&lt;br&gt;specify how to make the object files, making it a convenient form to use if&lt;br&gt;you wish to add the additional prerequisite intermittently.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Another wrinkle is that the additional prerequisites could be&lt;br&gt;specified with a variable that you set with a command line argument to&lt;br&gt;&lt;code&gt;make&lt;/code&gt; (see &lt;a href=&quot;#Overriding&quot;&gt;Overriding Variables&lt;/a&gt;).  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;extradeps=&lt;br&gt;$(objects) : $(extradeps)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;means that the command ‘&lt;samp&gt;make extradeps=foo.h&lt;/samp&gt;’ will consider&lt;br&gt;&lt;samp&gt;foo.h&lt;/samp&gt; as a prerequisite of each object file, but plain ‘&lt;samp&gt;make&lt;/samp&gt;’&lt;br&gt;will not.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If none of the explicit rules for a target has a recipe, then &lt;code&gt;make&lt;/code&gt;&lt;br&gt;searches for an applicable implicit rule to find one&lt;br&gt;see &lt;a href=&quot;#Implicit-Rules&quot;&gt;Using Implicit Rules&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Static-Pattern&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Double_002dColon&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Double-Colon&lt;/a&gt;, Previous: &lt;a href=&quot;#Multiple-Rules&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Multiple Rules&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Static-Pattern-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.12 Static Pattern Rules&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-static-pattern-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-static-pattern&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-pattern-rules_002c-static-_0028not-implicit_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-varying-prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-prerequisites_002c-varying-_0028static-pattern_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;Static pattern rules&lt;/em&gt; are rules which specify multiple targets and&lt;br&gt;construct the prerequisite names for each target based on the target name.&lt;br&gt;They are more general than ordinary rules with multiple targets because the&lt;br&gt;targets do not have to have identical prerequisites.  Their prerequisites must&lt;br&gt;be &lt;em&gt;analogous&lt;/em&gt;, but not necessarily &lt;em&gt;identical&lt;/em&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Static-Usage&quot; accesskey=&quot;1&quot;&gt;Static Usage&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The syntax of static pattern rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Static-versus-Implicit&quot; accesskey=&quot;2&quot;&gt;Static versus Implicit&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;When are they better than implicit rules?&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Static-Usage&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Static-versus-Implicit&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Static versus Implicit&lt;/a&gt;, Previous: &lt;a href=&quot;#Static-Pattern&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Static Pattern&lt;/a&gt;, Up: &lt;a href=&quot;#Static-Pattern&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Static Pattern&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Syntax-of-Static-Pattern-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;4.12.1 Syntax of Static Pattern Rules&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-static-pattern-rule_002c-syntax-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-pattern-rules_002c-static_002c-syntax-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is the syntax of a static pattern rule:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;targets&lt;/var&gt; …: &lt;var&gt;target-pattern&lt;/var&gt;: &lt;var&gt;prereq-patterns&lt;/var&gt; …&lt;br&gt;        &lt;var&gt;recipe&lt;/var&gt;&lt;br&gt;        …&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;var&gt;targets&lt;/var&gt; list specifies the targets that the rule applies to.&lt;br&gt;The targets can contain wildcard characters, just like the targets of&lt;br&gt;ordinary rules (see &lt;a href=&quot;#Wildcards&quot;&gt;Using Wildcard Characters in File&lt;br&gt;Names&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-target-pattern_002c-static-_0028not-implicit_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-stem&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The &lt;var&gt;target-pattern&lt;/var&gt; and &lt;var&gt;prereq-patterns&lt;/var&gt; say how to compute the&lt;br&gt;prerequisites of each target.  Each target is matched against the&lt;br&gt;&lt;var&gt;target-pattern&lt;/var&gt; to extract a part of the target name, called the&lt;br&gt;&lt;em&gt;stem&lt;/em&gt;.  This stem is substituted into each of the &lt;var&gt;prereq-patterns&lt;/var&gt;&lt;br&gt;to make the prerequisite names (one from each &lt;var&gt;prereq-pattern&lt;/var&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Each pattern normally contains the character ‘&lt;samp&gt;%&lt;/samp&gt;’ just once.  When the&lt;br&gt;&lt;var&gt;target-pattern&lt;/var&gt; matches a target, the ‘&lt;samp&gt;%&lt;/samp&gt;’ can match any part of&lt;br&gt;the target name; this part is called the &lt;em&gt;stem&lt;/em&gt;.  The rest of the&lt;br&gt;pattern must match exactly.  For example, the target &lt;samp&gt;foo.o&lt;/samp&gt; matches&lt;br&gt;the pattern ‘&lt;samp&gt;%.o&lt;/samp&gt;’, with ‘&lt;samp&gt;foo&lt;/samp&gt;’ as the stem.  The targets&lt;br&gt;&lt;samp&gt;foo.c&lt;/samp&gt; and &lt;samp&gt;foo.out&lt;/samp&gt; do not match that pattern.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-prerequisite-pattern_002c-static-_0028not-implicit_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The prerequisite names for each target are made by substituting the stem&lt;br&gt;for the ‘&lt;samp&gt;%&lt;/samp&gt;’ in each prerequisite pattern.  For example, if one&lt;br&gt;prerequisite pattern is &lt;samp&gt;%.c&lt;/samp&gt;, then substitution of the stem&lt;br&gt;‘&lt;samp&gt;foo&lt;/samp&gt;’ gives the prerequisite name &lt;samp&gt;foo.c&lt;/samp&gt;.  It is legitimate&lt;br&gt;to write a prerequisite pattern that does not contain ‘&lt;samp&gt;%&lt;/samp&gt;’; then this&lt;br&gt;prerequisite is the same for all targets.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0025_002c-quoting-in-static-pattern&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0025_002c-quoting-with-_005c-_0028backslash_0029-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_005c-_0028backslash_0029_002c-to-quote-_0025-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-backslash-_0028_005c_0029_002c-to-quote-_0025-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-quoting-_0025_002c-in-static-pattern&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;‘&lt;samp&gt;%&lt;/samp&gt;’ characters in pattern rules can be quoted with preceding&lt;br&gt;backslashes (‘&lt;samp&gt;\&lt;/samp&gt;’).  Backslashes that would otherwise quote ‘&lt;samp&gt;%&lt;/samp&gt;’&lt;br&gt;characters can be quoted with more backslashes.  Backslashes that quote&lt;br&gt;‘&lt;samp&gt;%&lt;/samp&gt;’ characters or other backslashes are removed from the pattern&lt;br&gt;before it is compared to file names or has a stem substituted into it.&lt;br&gt;Backslashes that are not in danger of quoting ‘&lt;samp&gt;%&lt;/samp&gt;’ characters go&lt;br&gt;unmolested.  For example, the pattern &lt;samp&gt;the\%weird\%pattern\&lt;/samp&gt; has&lt;br&gt;‘&lt;samp&gt;the%weird\&lt;/samp&gt;’ preceding the operative ‘&lt;samp&gt;%&lt;/samp&gt;’ character, and&lt;br&gt;‘&lt;samp&gt;pattern\&lt;/samp&gt;’ following it.  The final two backslashes are left alone&lt;br&gt;because they cannot affect any ‘&lt;samp&gt;%&lt;/samp&gt;’ character.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is an example, which compiles each of &lt;samp&gt;foo.o&lt;/samp&gt; and &lt;samp&gt;bar.o&lt;/samp&gt;&lt;br&gt;from the corresponding &lt;samp&gt;.c&lt;/samp&gt; file:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = foo.o bar.o&lt;br&gt;&lt;br&gt;all: $(objects)&lt;br&gt;&lt;br&gt;$(objects): %.o: %.c&lt;br&gt;        $(CC) -c $(CFLAGS) $&amp;lt; -o $@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here ‘&lt;samp&gt;$&amp;lt;&lt;/samp&gt;’ is the automatic variable that holds the name of the&lt;br&gt;prerequisite and ‘&lt;samp&gt;$@&lt;/samp&gt;’ is the automatic variable that holds the name&lt;br&gt;of the target; see &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Each target specified must match the target pattern; a warning is issued&lt;br&gt;for each target that does not.  If you have a list of files, only some of&lt;br&gt;which will match the pattern, you can use the &lt;code&gt;filter&lt;/code&gt; function to&lt;br&gt;remove non-matching file names (see &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;):&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;files = foo.elc bar.o lose.o&lt;br&gt;&lt;br&gt;$(filter %.o,$(files)): %.o: %.c&lt;br&gt;        $(CC) -c $(CFLAGS) $&amp;lt; -o $@&lt;br&gt;$(filter %.elc,$(files)): %.elc: %.el&lt;br&gt;        emacs -f batch-byte-compile $&amp;lt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In this example the result of ‘&lt;samp&gt;$(filter %.o,$(files))&lt;/samp&gt;’ is&lt;br&gt;&lt;samp&gt;bar.o lose.o&lt;/samp&gt;, and the first static pattern rule causes each of&lt;br&gt;these object files to be updated by compiling the corresponding C source&lt;br&gt;file.  The result of ‘&lt;samp&gt;$(filter&amp;nbsp;%.elc,$(files))&lt;/samp&gt;’&lt;!-- /@w --&gt; is&lt;br&gt;&lt;samp&gt;foo.elc&lt;/samp&gt;, so that file is made from &lt;samp&gt;foo.el&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Another example shows how to use &lt;code&gt;$&lt;/code&gt; in static pattern rules:&lt;br&gt;&lt;a name=&quot;index-_0024_002a_002c-and-static-pattern&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;bigoutput littleoutput : %output : text.g&lt;br&gt;        generate text.g -$&lt;em&gt; &amp;gt; $@&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When the &lt;code&gt;generate&lt;/code&gt; command is run, &lt;code&gt;$&lt;/code&gt; will expand to the&lt;br&gt;stem, either ‘&lt;samp&gt;big&lt;/samp&gt;’ or ‘&lt;samp&gt;little&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Static-versus-Implicit&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Static-Usage&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Static Usage&lt;/a&gt;, Up: &lt;a href=&quot;#Static-Pattern&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Static Pattern&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Static-Pattern-Rules-versus-Implicit-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;4.12.2 Static Pattern Rules versus Implicit Rules&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-static-pattern-versus-implicit&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-static-pattern-rule_002c-versus-implicit&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A static pattern rule has much in common with an implicit rule defined as a&lt;br&gt;pattern rule (see &lt;a href=&quot;#Pattern-Rules&quot;&gt;Defining and Redefining Pattern Rules&lt;/a&gt;).&lt;br&gt;Both have a pattern for the target and patterns for constructing the&lt;br&gt;names of prerequisites.  The difference is in how &lt;code&gt;make&lt;/code&gt; decides&lt;br&gt;&lt;em&gt;when&lt;/em&gt; the rule applies.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;An implicit rule &lt;em&gt;can&lt;/em&gt; apply to any target that matches its pattern,&lt;br&gt;but it &lt;em&gt;does&lt;/em&gt; apply only when the target has no recipe otherwise&lt;br&gt;specified, and only when the prerequisites can be found.  If more than one&lt;br&gt;implicit rule appears applicable, only one applies; the choice depends on&lt;br&gt;the order of rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;By contrast, a static pattern rule applies to the precise list of targets&lt;br&gt;that you specify in the rule.  It cannot apply to any other target and it&lt;br&gt;invariably does apply to each of the targets specified.  If two conflicting&lt;br&gt;rules apply, and both have recipes, that’s an error.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The static pattern rule can be better than an implicit rule for these&lt;br&gt;reasons:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; You may wish to override the usual implicit rule for a few&lt;br&gt;files whose names cannot be categorized syntactically but&lt;br&gt;can be given in an explicit list.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; If you cannot be sure of the precise contents of the directories&lt;br&gt;you are using, you may not be sure which other irrelevant files&lt;br&gt;might lead &lt;code&gt;make&lt;/code&gt; to use the wrong implicit rule.  The choice&lt;br&gt;might depend on the order in which the implicit rule search is done.&lt;br&gt;With static pattern rules, there is no uncertainty: each rule applies&lt;br&gt;to precisely the targets specified.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Double_002dColon&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Automatic-Prerequisites&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Automatic Prerequisites&lt;/a&gt;, Previous: &lt;a href=&quot;#Static-Pattern&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Static Pattern&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Double_002dColon-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.13 Double-Colon Rules&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-double_002dcolon-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-double_002dcolon-_0028_003a_003a_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-multiple-rules-for-one-target-_0028_003a_003a_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003a_003a-rules-_0028double_002dcolon_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;Double-colon&lt;/em&gt; rules are explicit rules written with ‘&lt;samp&gt;::&lt;/samp&gt;’&lt;br&gt;instead of ‘&lt;samp&gt;:&lt;/samp&gt;’ after the target names.  They are handled&lt;br&gt;differently from ordinary rules when the same target appears in more&lt;br&gt;than one rule.  Pattern rules with double-colons have an entirely&lt;br&gt;different meaning (see &lt;a href=&quot;#Match_002dAnything-Rules&quot;&gt;Match-Anything Rules&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When a target appears in multiple rules, all the rules must be the same&lt;br&gt;type: all ordinary, or all double-colon.  If they are double-colon, each&lt;br&gt;of them is independent of the others.  Each double-colon rule’s recipe&lt;br&gt;is executed if the target is older than any prerequisites of that rule.&lt;br&gt;If there are no prerequisites for that rule, its recipe is always&lt;br&gt;executed (even if the target already exists).  This can result in&lt;br&gt;executing none, any, or all of the double-colon rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Double-colon rules with the same target are in fact completely separate&lt;br&gt;from one another.  Each double-colon rule is processed individually, just&lt;br&gt;as rules with different targets are processed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The double-colon rules for a target are executed in the order they appear&lt;br&gt;in the makefile.  However, the cases where double-colon rules really make&lt;br&gt;sense are those where the order of executing the recipes would not matter.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Double-colon rules are somewhat obscure and not often very useful; they&lt;br&gt;provide a mechanism for cases in which the method used to update a target&lt;br&gt;differs depending on which prerequisite files caused the update, and such&lt;br&gt;cases are rare.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Each double-colon rule should specify a recipe; if it does not, an&lt;br&gt;implicit rule will be used if one applies.&lt;br&gt;See &lt;a href=&quot;#Implicit-Rules&quot;&gt;Using Implicit Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Automatic-Prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Double_002dColon&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Double-Colon&lt;/a&gt;, Up: &lt;a href=&quot;#Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Generating-Prerequisites-Automatically&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;4.14 Generating Prerequisites Automatically&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-prerequisites_002c-automatic-generation-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-automatic-generation-of-prerequisites-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-generating-prerequisites-automatically-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In the makefile for a program, many of the rules you need to write often&lt;br&gt;say only that some object file depends on some header&lt;br&gt;file.  For example, if &lt;samp&gt;main.c&lt;/samp&gt; uses &lt;samp&gt;defs.h&lt;/samp&gt; via an&lt;br&gt;&lt;code&gt;#include&lt;/code&gt;, you would write:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;main.o: defs.h&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;You need this rule so that &lt;code&gt;make&lt;/code&gt; knows that it must remake&lt;br&gt;&lt;samp&gt;main.o&lt;/samp&gt; whenever &lt;samp&gt;defs.h&lt;/samp&gt; changes.  You can see that for a&lt;br&gt;large program you would have to write dozens of such rules in your&lt;br&gt;makefile.  And, you must always be very careful to update the makefile&lt;br&gt;every time you add or remove an &lt;code&gt;#include&lt;/code&gt;.&lt;br&gt;&lt;a name=&quot;index-_0023include&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002dM-_0028to-compiler_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;To avoid this hassle, most modern C compilers can write these rules for&lt;br&gt;you, by looking at the &lt;code&gt;#include&lt;/code&gt; lines in the source files.&lt;br&gt;Usually this is done with the ‘&lt;samp&gt;-M&lt;/samp&gt;’ option to the compiler.&lt;br&gt;For example, the command:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;cc -M main.c&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;generates the output:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;main.o : main.c defs.h&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Thus you no longer have to write all those rules yourself.&lt;br&gt;The compiler will do it for you.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Note that such a rule constitutes mentioning &lt;samp&gt;main.o&lt;/samp&gt; in a&lt;br&gt;makefile, so it can never be considered an intermediate file by&lt;br&gt;implicit rule search.  This means that &lt;code&gt;make&lt;/code&gt; won’t ever remove&lt;br&gt;the file after using it; see &lt;a href=&quot;#Chained-Rules&quot;&gt;Chains of Implicit&lt;br&gt;Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-make-depend&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;With old &lt;code&gt;make&lt;/code&gt; programs, it was traditional practice to use this&lt;br&gt;compiler feature to generate prerequisites on demand with a command like&lt;br&gt;‘&lt;samp&gt;make depend&lt;/samp&gt;’.  That command would create a file &lt;samp&gt;depend&lt;/samp&gt;&lt;br&gt;containing all the automatically-generated prerequisites; then the&lt;br&gt;makefile could use &lt;code&gt;include&lt;/code&gt; to read them in (see &lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In GNU &lt;code&gt;make&lt;/code&gt;, the feature of remaking makefiles makes this&lt;br&gt;practice obsolete—you need never tell &lt;code&gt;make&lt;/code&gt; explicitly to&lt;br&gt;regenerate the prerequisites, because it always regenerates any makefile&lt;br&gt;that is out of date.  See &lt;a href=&quot;#Remaking-Makefiles&quot;&gt;Remaking Makefiles&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The practice we recommend for automatic prerequisite generation is to have&lt;br&gt;one makefile corresponding to each source file.  For each source file&lt;br&gt;&lt;samp&gt;&lt;var&gt;name&lt;/var&gt;.c&lt;/samp&gt; there is a makefile &lt;samp&gt;&lt;var&gt;name&lt;/var&gt;.d&lt;/samp&gt; which lists&lt;br&gt;what files the object file &lt;samp&gt;&lt;var&gt;name&lt;/var&gt;.o&lt;/samp&gt; depends on.  That way&lt;br&gt;only the source files that have changed need to be rescanned to produce&lt;br&gt;the new prerequisites.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is the pattern rule to generate a file of prerequisites (i.e., a makefile)&lt;br&gt;called &lt;samp&gt;&lt;var&gt;name&lt;/var&gt;.d&lt;/samp&gt; from a C source file called &lt;samp&gt;&lt;var&gt;name&lt;/var&gt;.c&lt;/samp&gt;:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;%.d: %.c&lt;br&gt;        @set -e; rm -f $@; \&lt;br&gt;         $(CC) -M $(CPPFLAGS) $&amp;lt; &amp;gt; $@.$$$$; \&lt;br&gt;         sed ‘s,($&lt;em&gt;).o[ :]&lt;/em&gt;,\1.o $@ : ,g’ &amp;lt; $@.$$$$ &amp;gt; $@; \&lt;br&gt;         rm -f $@.$$$$&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;See &lt;a href=&quot;#Pattern-Rules&quot;&gt;Pattern Rules&lt;/a&gt;, for information on defining pattern rules.  The&lt;br&gt;‘&lt;samp&gt;-e&lt;/samp&gt;’ flag to the shell causes it to exit immediately if the&lt;br&gt;&lt;code&gt;$(CC)&lt;/code&gt; command (or any other command) fails (exits with a&lt;br&gt;nonzero status).&lt;br&gt;&lt;a name=&quot;index-_002de-_0028shell-flag_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002dMM-_0028to-GNU-compiler_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;With the GNU C compiler, you may wish to use the ‘&lt;samp&gt;-MM&lt;/samp&gt;’ flag instead&lt;br&gt;of ‘&lt;samp&gt;-M&lt;/samp&gt;’.  This omits prerequisites on system header files.&lt;br&gt;See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Preprocessor-Options.html#Preprocessor-Options&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Options Controlling the Preprocessor&lt;/a&gt; in &lt;cite&gt;Using GNU CC&lt;/cite&gt;, for details.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-sed-_0028shell-command_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The purpose of the &lt;code&gt;sed&lt;/code&gt; command is to translate (for example):&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;main.o : main.c defs.h&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;into:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;main.o main.d : main.c defs.h&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;a name=&quot;index-_002ed&quot;&gt;&lt;/a&gt;&lt;br&gt;This makes each ‘&lt;samp&gt;.d&lt;/samp&gt;’ file depend on all the source and header files&lt;br&gt;that the corresponding ‘&lt;samp&gt;.o&lt;/samp&gt;’ file depends on.  &lt;code&gt;make&lt;/code&gt; then&lt;br&gt;knows it must regenerate the prerequisites whenever any of the source or&lt;br&gt;header files changes.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Once you’ve defined the rule to remake the ‘&lt;samp&gt;.d&lt;/samp&gt;’ files,&lt;br&gt;you then use the &lt;code&gt;include&lt;/code&gt; directive to read them all in.&lt;br&gt;See &lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;.  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;sources = foo.c bar.c&lt;br&gt;&lt;br&gt;include $(sources:.c=.d)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;(This example uses a substitution variable reference to translate the&lt;br&gt;list of source files ‘&lt;samp&gt;foo.c bar.c&lt;/samp&gt;’ into a list of prerequisite&lt;br&gt;makefiles, ‘&lt;samp&gt;foo.d bar.d&lt;/samp&gt;’.  See &lt;a href=&quot;#Substitution-Refs&quot;&gt;Substitution Refs&lt;/a&gt;, for full&lt;br&gt;information on substitution references.)  Since the ‘&lt;samp&gt;.d&lt;/samp&gt;’ files are&lt;br&gt;makefiles like any others, &lt;code&gt;make&lt;/code&gt; will remake them as necessary&lt;br&gt;with no further work from you.  See &lt;a href=&quot;#Remaking-Makefiles&quot;&gt;Remaking Makefiles&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Note that the ‘&lt;samp&gt;.d&lt;/samp&gt;’ files contain target definitions; you should&lt;br&gt;be sure to place the &lt;code&gt;include&lt;/code&gt; directive &lt;em&gt;after&lt;/em&gt; the first,&lt;br&gt;default goal in your makefiles or run the risk of having a random&lt;br&gt;object file become the default goal.&lt;br&gt;See &lt;a href=&quot;#How-Make-Works&quot;&gt;How Make Works&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Using Variables&lt;/a&gt;, Previous: &lt;a href=&quot;#Rules&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Rules&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Writing-Recipes-in-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;5 Writing Recipes in Rules&lt;/h2&gt;&lt;br&gt;&lt;a name=&quot;index-recipes-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-how-to-write&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-writing-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The recipe of a rule consists of one or more shell command lines to&lt;br&gt;be executed, one at a time, in the order they appear.  Typically, the&lt;br&gt;result of executing these commands is that the target of the rule is&lt;br&gt;brought up to date.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Users use many different shell programs, but recipes in makefiles are&lt;br&gt;always interpreted by &lt;samp&gt;/bin/sh&lt;/samp&gt; unless the makefile specifies&lt;br&gt;otherwise.  See &lt;a href=&quot;#Execution&quot;&gt;Recipe Execution&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Recipe-Syntax&quot; accesskey=&quot;1&quot;&gt;Recipe Syntax&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Recipe syntax features and pitfalls.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Echoing&quot; accesskey=&quot;2&quot;&gt;Echoing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to control when recipes are echoed.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Execution&quot; accesskey=&quot;3&quot;&gt;Execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How recipes are executed.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Parallel&quot; accesskey=&quot;4&quot;&gt;Parallel&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How recipes can be executed in parallel.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Errors&quot; accesskey=&quot;5&quot;&gt;Errors&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;What happens after a recipe execution error.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Interrupts&quot; accesskey=&quot;6&quot;&gt;Interrupts&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;What happens when a recipe is interrupted.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Recursion&quot; accesskey=&quot;7&quot;&gt;Recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Invoking &lt;code&gt;make&lt;/code&gt; from makefiles.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Canned-Recipes&quot; accesskey=&quot;8&quot;&gt;Canned Recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Defining canned recipes.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Empty-Recipes&quot; accesskey=&quot;9&quot;&gt;Empty Recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Defining useful, do-nothing recipes.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Recipe-Syntax&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Echoing&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Echoing&lt;/a&gt;, Previous: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Recipes&lt;/a&gt;, Up: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recipes&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Recipe-Syntax-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;5.1 Recipe Syntax&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-recipe-syntax&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-syntax-of-recipe&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Makefiles have the unusual property that there are really two distinct&lt;br&gt;syntaxes in one file.  Most of the makefile uses &lt;code&gt;make&lt;/code&gt; syntax&lt;br&gt;(see &lt;a href=&quot;#Makefiles&quot;&gt;Writing Makefiles&lt;/a&gt;).  However, recipes are meant&lt;br&gt;to be interpreted by the shell and so they are written using shell&lt;br&gt;syntax.  The &lt;code&gt;make&lt;/code&gt; program does not try to understand shell&lt;br&gt;syntax: it performs only a very few specific translations on the&lt;br&gt;content of the recipe before handing it to the shell.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Each line in the recipe must start with a tab (or the first character&lt;br&gt;in the value of the &lt;code&gt;.RECIPEPREFIX&lt;/code&gt; variable; see &lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;), except that the first recipe line may be attached to the&lt;br&gt;target-and-prerequisites line with a semicolon in between.  &lt;em&gt;Any&lt;/em&gt;&lt;br&gt;line in the makefile that begins with a tab and appears in a “rule&lt;br&gt;context” (that is, after a rule has been started until another rule&lt;br&gt;or variable definition) will be considered part of a recipe for that&lt;br&gt;rule.  Blank lines and lines of just comments may appear among the&lt;br&gt;recipe lines; they are ignored.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Some consequences of these rules include:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; A blank line that begins with a tab is not blank: it’s an empty&lt;br&gt;recipe (see &lt;a href=&quot;#Empty-Recipes&quot;&gt;Empty Recipes&lt;/a&gt;).&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; &lt;a name=&quot;index-comments_002c-in-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-comments-in&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0023-_0028comments_0029_002c-in-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;A comment in a recipe is not a &lt;code&gt;make&lt;/code&gt; comment; it will be&lt;br&gt;passed to the shell as-is.  Whether the shell treats it as a comment&lt;br&gt;or not depends on your shell.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; A variable definition in a “rule context” which is indented by a tab&lt;br&gt;as the first character on the line, will be considered part of a&lt;br&gt;recipe, not a &lt;code&gt;make&lt;/code&gt; variable definition, and passed to the&lt;br&gt;shell.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; A conditional expression (&lt;code&gt;ifdef&lt;/code&gt;, &lt;code&gt;ifeq&lt;/code&gt;,&lt;br&gt;etc. see &lt;a href=&quot;#Conditional-Syntax&quot;&gt;Syntax of Conditionals&lt;/a&gt;) in a “rule&lt;br&gt;context” which is indented by a tab as the first character on the&lt;br&gt;line, will be considered part of a recipe and be passed to the shell.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Splitting-Recipe-Lines&quot; accesskey=&quot;1&quot;&gt;Splitting Recipe Lines&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Breaking long recipe lines for readability.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Variables-in-Recipes&quot; accesskey=&quot;2&quot;&gt;Variables in Recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using &lt;code&gt;make&lt;/code&gt; variables in recipes.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Splitting-Recipe-Lines&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Variables-in-Recipes&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Variables in Recipes&lt;/a&gt;, Previous: &lt;a href=&quot;#Recipe-Syntax&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Recipe Syntax&lt;/a&gt;, Up: &lt;a href=&quot;#Recipe-Syntax&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recipe Syntax&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Splitting-Recipe-Lines-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;5.1.1 Splitting Recipe Lines&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-splitting&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-splitting-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-backslash-_0028_005c_0029-in&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-quoting-newlines-in&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-backslash-_0028_005c_0029_002c-in-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_005c-_0028backslash_0029_002c-in-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-quoting-newline_002c-in-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-newline_002c-quoting_002c-in-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;One of the few ways in which &lt;code&gt;make&lt;/code&gt; does interpret recipes is&lt;br&gt;checking for a backslash just before the newline.  As in normal&lt;br&gt;makefile syntax, a single logical recipe line can be split into&lt;br&gt;multiple physical lines in the makefile by placing a backslash before&lt;br&gt;each newline.  A sequence of lines like this is considered a single&lt;br&gt;recipe line, and one instance of the shell will be invoked to run it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;However, in contrast to how they are treated in other places in a&lt;br&gt;makefile (see &lt;a href=&quot;#Splitting-Lines&quot;&gt;Splitting Long Lines&lt;/a&gt;),&lt;br&gt;backslash/newline pairs are &lt;em&gt;not&lt;/em&gt; removed from the recipe.  Both&lt;br&gt;the backslash and the newline characters are preserved and passed to&lt;br&gt;the shell.  How the backslash/newline is interpreted depends on your&lt;br&gt;shell.  If the first character of the next line after the&lt;br&gt;backslash/newline is the recipe prefix character (a tab by default;&lt;br&gt;see &lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;), then that character (and only that&lt;br&gt;character) is removed.  Whitespace is never added to the recipe.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, the recipe for the all target in this makefile:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;all :&lt;br&gt;        @echo no\&lt;br&gt;space&lt;br&gt;        @echo no\&lt;br&gt;        space&lt;br&gt;        @echo one \&lt;br&gt;        space&lt;br&gt;        @echo one\&lt;br&gt;         space&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;consists of four separate shell commands where the output is:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;nospace&lt;br&gt;nospace&lt;br&gt;one space&lt;br&gt;one space&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;As a more complex example, this makefile:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;all : ; @echo ‘hello \&lt;br&gt;        world’ ; echo “hello \&lt;br&gt;    world”&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will invoke one shell with a command of:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;echo ‘hello \&lt;br&gt;world’ ; echo “hello \&lt;br&gt;    world”&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;which, according to shell quoting rules, will yield the following output:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;hello \&lt;br&gt;world&lt;br&gt;hello     world&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Notice how the backslash/newline pair was removed inside the string&lt;br&gt;quoted with double quotes (&lt;code&gt;“…”&lt;/code&gt;), but not from the string&lt;br&gt;quoted with single quotes (&lt;code&gt;‘…’&lt;/code&gt;).  This is the way the&lt;br&gt;default shell (&lt;samp&gt;/bin/sh&lt;/samp&gt;) handles backslash/newline pairs.  If&lt;br&gt;you specify a different shell in your makefiles it may treat them&lt;br&gt;differently.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Sometimes you want to split a long line inside of single quotes, but&lt;br&gt;you don’t want the backslash/newline to appear in the quoted content.&lt;br&gt;This is often the case when passing scripts to languages such as Perl,&lt;br&gt;where extraneous backslashes inside the script can change its meaning&lt;br&gt;or even be a syntax error.  One simple way of handling this is to&lt;br&gt;place the quoted string, or even the entire command, into a&lt;br&gt;&lt;code&gt;make&lt;/code&gt; variable then use the variable in the recipe.  In this&lt;br&gt;situation the newline quoting rules for makefiles will be used, and&lt;br&gt;the backslash/newline will be removed.  If we rewrite our example&lt;br&gt;above using this method:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;HELLO = ‘hello \&lt;br&gt;world’&lt;br&gt;&lt;br&gt;all : ; @echo $(HELLO)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;we will get output like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;hello world&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you like, you can also use target-specific variables&lt;br&gt;(see &lt;a href=&quot;#Target_002dspecific&quot;&gt;Target-specific Variable Values&lt;/a&gt;) to obtain&lt;br&gt;a tighter correspondence between the variable and the recipe that&lt;br&gt;uses it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Variables-in-Recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Splitting-Recipe-Lines&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Splitting Recipe Lines&lt;/a&gt;, Up: &lt;a href=&quot;#Recipe-Syntax&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recipe Syntax&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Using-Variables-in-Recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;5.1.2 Using Variables in Recipes&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-variable-references-in-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-using-variables-in&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The other way in which &lt;code&gt;make&lt;/code&gt; processes recipes is by expanding&lt;br&gt;any variable references in them (see &lt;a href=&quot;#Reference&quot;&gt;Basics of Variable&lt;br&gt;References&lt;/a&gt;).  This occurs after make has finished reading all the&lt;br&gt;makefiles and the target is determined to be out of date; so, the&lt;br&gt;recipes for targets which are not rebuilt are never expanded.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Variable and function references in recipes have identical syntax and&lt;br&gt;semantics to references elsewhere in the makefile.  They also have the&lt;br&gt;same quoting rules: if you want a dollar sign to appear in your&lt;br&gt;recipe, you must double it (‘&lt;samp&gt;$$&lt;/samp&gt;’).  For shells like the default&lt;br&gt;shell, that use dollar signs to introduce variables, it’s important to&lt;br&gt;keep clear in your mind whether the variable you want to reference is&lt;br&gt;a &lt;code&gt;make&lt;/code&gt; variable (use a single dollar sign) or a shell variable&lt;br&gt;(use two dollar signs).  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;LIST = one two three&lt;br&gt;all:&lt;br&gt;        for i in $(LIST); do \&lt;br&gt;            echo $$i; \&lt;br&gt;        done&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;results in the following command being passed to the shell:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;for i in one two three; do \&lt;br&gt;    echo $i; \&lt;br&gt;done&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;which generates the expected result:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;one&lt;br&gt;two&lt;br&gt;three&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Echoing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Execution&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Execution&lt;/a&gt;, Previous: &lt;a href=&quot;#Recipe-Syntax&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Recipe Syntax&lt;/a&gt;, Up: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recipes&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Recipe-Echoing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;5.2 Recipe Echoing&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-echoing-of-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-silent-operation&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0040-_0028in-recipes_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-echoing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-printing-of-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Normally &lt;code&gt;make&lt;/code&gt; prints each line of the recipe before it is&lt;br&gt;executed.  We call this &lt;em&gt;echoing&lt;/em&gt; because it gives the appearance&lt;br&gt;that you are typing the lines yourself.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When a line starts with ‘&lt;samp&gt;@&lt;/samp&gt;’, the echoing of that line is suppressed.&lt;br&gt;The ‘&lt;samp&gt;@&lt;/samp&gt;’ is discarded before the line is passed to the shell.&lt;br&gt;Typically you would use this for a command whose only effect is to print&lt;br&gt;something, such as an &lt;code&gt;echo&lt;/code&gt; command to indicate progress through&lt;br&gt;the makefile:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;@echo About to make distribution files&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-_002dn&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002djust_002dprint&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002ddry_002drun&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002drecon&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;When &lt;code&gt;make&lt;/code&gt; is given the flag ‘&lt;samp&gt;-n&lt;/samp&gt;’ or ‘&lt;samp&gt;–just-print&lt;/samp&gt;’ it&lt;br&gt;only echoes most recipes, without executing them.  See &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;.  In this case even the recipe lines&lt;br&gt;starting with ‘&lt;samp&gt;@&lt;/samp&gt;’ are printed.  This flag is useful for finding&lt;br&gt;out which recipes &lt;code&gt;make&lt;/code&gt; thinks are necessary without actually&lt;br&gt;doing them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002ds&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dsilent&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dquiet&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eSILENT-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The ‘&lt;samp&gt;-s&lt;/samp&gt;’ or ‘&lt;samp&gt;–silent&lt;/samp&gt;’&lt;br&gt;flag to &lt;code&gt;make&lt;/code&gt; prevents all echoing, as if all recipes&lt;br&gt;started with ‘&lt;samp&gt;@&lt;/samp&gt;’.  A rule in the makefile for the special target&lt;br&gt;&lt;code&gt;.SILENT&lt;/code&gt; without prerequisites has the same effect&lt;br&gt;(see &lt;a href=&quot;#Special-Targets&quot;&gt;Special Built-in Target Names&lt;/a&gt;).&lt;br&gt;&lt;code&gt;.SILENT&lt;/code&gt; is essentially obsolete since ‘&lt;samp&gt;@&lt;/samp&gt;’ is more flexible.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Parallel&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Parallel&lt;/a&gt;, Previous: &lt;a href=&quot;#Echoing&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Echoing&lt;/a&gt;, Up: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recipes&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Recipe-Execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;5.3 Recipe Execution&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-recipe_002c-execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-execution_002c-of-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-SHELL-_0028recipe-execution_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When it is time to execute recipes to update a target, they are&lt;br&gt;executed by invoking a new sub-shell for each line of the recipe,&lt;br&gt;unless the &lt;code&gt;.ONESHELL&lt;/code&gt; special target is in effect&lt;br&gt;(see &lt;a href=&quot;#One-Shell&quot;&gt;Using One Shell&lt;/a&gt;)  (In practice, &lt;code&gt;make&lt;/code&gt; may&lt;br&gt;take shortcuts that do not affect the results.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-cd-_0028shell-command_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-shell-variables_002c-setting-in-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes-setting-shell-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; this implies that setting shell variables and&lt;br&gt;invoking shell commands such as &lt;code&gt;cd&lt;/code&gt; that set a context local to&lt;br&gt;each process will not affect the following lines in the recipe.&lt;a name=&quot;DOCF2&quot; href=&quot;#FOOT2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;  If you want to use &lt;code&gt;cd&lt;/code&gt; to affect the next statement,&lt;br&gt;put both statements in a single recipe line.  Then &lt;code&gt;make&lt;/code&gt; will&lt;br&gt;invoke one shell to run the entire line, and the shell will execute&lt;br&gt;the statements in sequence.  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo : bar/lose&lt;br&gt;        cd $(@D) &amp;amp;&amp;amp; gobble $(@F) &amp;gt; ../$@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here we use the shell AND operator (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;) so that if the&lt;br&gt;&lt;code&gt;cd&lt;/code&gt; command fails, the script will fail without trying to invoke&lt;br&gt;the &lt;code&gt;gobble&lt;/code&gt; command in the wrong directory, which could cause&lt;br&gt;problems (in this case it would certainly cause &lt;samp&gt;../foo&lt;/samp&gt; to be&lt;br&gt;truncated, at least).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#One-Shell&quot; accesskey=&quot;1&quot;&gt;One Shell&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;One shell for all lines in a recipe.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Choosing-the-Shell&quot; accesskey=&quot;2&quot;&gt;Choosing the Shell&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How &lt;code&gt;make&lt;/code&gt; chooses the shell used&lt;br&gt;                                  to run recipes.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;One-Shell&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Choosing-the-Shell&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Choosing the Shell&lt;/a&gt;, Previous: &lt;a href=&quot;#Execution&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Execution&lt;/a&gt;, Up: &lt;a href=&quot;#Execution&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Execution&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Using-One-Shell&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;5.3.1 Using One Shell&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-recipe-lines_002c-single-shell&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eONESHELL_002c-use-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eONESHELL-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Sometimes you would prefer that all the lines in the recipe be passed&lt;br&gt;to a single invocation of the shell.  There are generally two&lt;br&gt;situations where this is useful: first, it can improve performance in&lt;br&gt;makefiles where recipes consist of many command lines, by avoiding&lt;br&gt;extra processes.  Second, you might want newlines to be included in&lt;br&gt;your recipe command (for example perhaps you are using a very&lt;br&gt;different interpreter as your &lt;code&gt;SHELL&lt;/code&gt;).  If the &lt;code&gt;.ONESHELL&lt;/code&gt;&lt;br&gt;special target appears anywhere in the makefile then &lt;em&gt;all&lt;/em&gt;&lt;br&gt;recipe lines for each target will be provided to a single invocation&lt;br&gt;of the shell.  Newlines between recipe lines will be preserved.  For&lt;br&gt;example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.ONESHELL:&lt;br&gt;foo : bar/lose&lt;br&gt;        cd $(@D)&lt;br&gt;        gobble $(@F) &amp;gt; ../$@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;would now work as expected even though the commands are on different&lt;br&gt;recipe lines.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If &lt;code&gt;.ONESHELL&lt;/code&gt; is provided, then only the first line of the&lt;br&gt;recipe will be checked for the special prefix characters (‘&lt;samp&gt;@&lt;/samp&gt;’,&lt;br&gt;‘&lt;samp&gt;-&lt;/samp&gt;’, and ‘&lt;samp&gt;+&lt;/samp&gt;’).  Subsequent lines will include the special&lt;br&gt;characters in the recipe line when the &lt;code&gt;SHELL&lt;/code&gt; is invoked.  If&lt;br&gt;you want your recipe to start with one of these special characters&lt;br&gt;you’ll need to arrange for them to not be the first characters on the&lt;br&gt;first line, perhaps by adding a comment or similar.  For example, this&lt;br&gt;would be a syntax error in Perl because the first ‘&lt;samp&gt;@&lt;/samp&gt;’ is removed&lt;br&gt;by make:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.ONESHELL:&lt;br&gt;SHELL = /usr/bin/perl&lt;br&gt;.SHELLFLAGS = -e&lt;br&gt;show :&lt;br&gt;        @f = qw(a b c);&lt;br&gt;        print “@f\n”;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;However, either of these alternatives would work properly:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.ONESHELL:&lt;br&gt;SHELL = /usr/bin/perl&lt;br&gt;.SHELLFLAGS = -e&lt;br&gt;show :&lt;br&gt;        # Make sure “@” is not the first character on the first line&lt;br&gt;        @f = qw(a b c);&lt;br&gt;        print “@f\n”;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;or&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.ONESHELL:&lt;br&gt;SHELL = /usr/bin/perl&lt;br&gt;.SHELLFLAGS = -e&lt;br&gt;show :&lt;br&gt;        my @f = qw(a b c);&lt;br&gt;        print “@f\n”;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;As a special feature, if &lt;code&gt;SHELL&lt;/code&gt; is determined to be a&lt;br&gt;POSIX-style shell, the special prefix characters in “internal”&lt;br&gt;recipe lines will &lt;em&gt;removed&lt;/em&gt; before the recipe is processed.  This&lt;br&gt;feature is intended to allow existing makefiles to add the&lt;br&gt;&lt;code&gt;.ONESHELL&lt;/code&gt; special target and still run properly without&lt;br&gt;extensive modifications.  Since the special prefix characters are not&lt;br&gt;legal at the beginning of a line in a POSIX shell script this is not a&lt;br&gt;loss in functionality.  For example, this works as expected:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.ONESHELL:&lt;br&gt;foo : bar/lose&lt;br&gt;        @cd $(@D)&lt;br&gt;        @gobble $(@F) &amp;gt; ../$@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Even with this special feature, however, makefiles with&lt;br&gt;&lt;code&gt;.ONESHELL&lt;/code&gt; will behave differently in ways that could be&lt;br&gt;noticeable.  For example, normally if any line in the recipe fails,&lt;br&gt;that causes the rule to fail and no more recipe lines are processed.&lt;br&gt;Under &lt;code&gt;.ONESHELL&lt;/code&gt; a failure of any but the final recipe line will&lt;br&gt;not be noticed by &lt;code&gt;make&lt;/code&gt;.  You can modify &lt;code&gt;.SHELLFLAGS&lt;/code&gt; to&lt;br&gt;add the &lt;code&gt;-e&lt;/code&gt; option to the shell which will cause any failure&lt;br&gt;anywhere in the command line to cause the shell to fail, but this&lt;br&gt;could itself cause your recipe to behave differently.  Ultimately you&lt;br&gt;may need to harden your recipe lines to allow them to work with&lt;br&gt;&lt;code&gt;.ONESHELL&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Choosing-the-Shell&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#One-Shell&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;One Shell&lt;/a&gt;, Up: &lt;a href=&quot;#Execution&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Execution&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Choosing-the-Shell-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;5.3.2 Choosing the Shell&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-shell_002c-choosing-the&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-SHELL_002c-value-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eSHELLFLAGS_002c-value-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-SHELL&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eSHELLFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The program used as the shell is taken from the variable &lt;code&gt;SHELL&lt;/code&gt;.&lt;br&gt;If this variable is not set in your makefile, the program&lt;br&gt;&lt;samp&gt;/bin/sh&lt;/samp&gt; is used as the shell.  The argument(s) passed to the&lt;br&gt;shell are taken from the variable &lt;code&gt;.SHELLFLAGS&lt;/code&gt;.  The default&lt;br&gt;value of &lt;code&gt;.SHELLFLAGS&lt;/code&gt; is &lt;code&gt;-c&lt;/code&gt; normally, or &lt;code&gt;-ec&lt;/code&gt; in&lt;br&gt;POSIX-conforming mode.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-environment_002c-SHELL-in&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Unlike most variables, the variable &lt;code&gt;SHELL&lt;/code&gt; is never set from the&lt;br&gt;environment.  This is because the &lt;code&gt;SHELL&lt;/code&gt; environment variable is&lt;br&gt;used to specify your personal choice of shell program for interactive&lt;br&gt;use.  It would be very bad for personal choices like this to affect the&lt;br&gt;functioning of makefiles.  See &lt;a href=&quot;#Environment&quot;&gt;Variables from the&lt;br&gt;Environment&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Furthermore, when you do set &lt;code&gt;SHELL&lt;/code&gt; in your makefile that value&lt;br&gt;is &lt;em&gt;not&lt;/em&gt; exported in the environment to recipe lines that&lt;br&gt;&lt;code&gt;make&lt;/code&gt; invokes.  Instead, the value inherited from the user’s&lt;br&gt;environment, if any, is exported.  You can override this behavior by&lt;br&gt;explicitly exporting &lt;code&gt;SHELL&lt;/code&gt; (see &lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Communicating Variables to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;), forcing it to be&lt;br&gt;passed in the environment to recipe lines.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-MAKESHELL-_0028MS_002dDOS-alternative-to-SHELL_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;However, on MS-DOS and MS-Windows the value of &lt;code&gt;SHELL&lt;/code&gt; in the&lt;br&gt;environment &lt;strong&gt;is&lt;/strong&gt; used, since on those systems most users do not&lt;br&gt;set this variable, and therefore it is most likely set specifically to&lt;br&gt;be used by &lt;code&gt;make&lt;/code&gt;.  On MS-DOS, if the setting of &lt;code&gt;SHELL&lt;/code&gt; is&lt;br&gt;not suitable for &lt;code&gt;make&lt;/code&gt;, you can set the variable&lt;br&gt;&lt;code&gt;MAKESHELL&lt;/code&gt; to the shell that &lt;code&gt;make&lt;/code&gt; should use; if set it&lt;br&gt;will be used as the shell instead of the value of &lt;code&gt;SHELL&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;Choosing-a-Shell-in-DOS-and-Windows&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsubheading&quot;&gt;Choosing a Shell in DOS and Windows&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-shell_002c-in-DOS-and-Windows&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-DOS_002c-choosing-a-shell-in&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-Windows_002c-choosing-a-shell-in&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Choosing a shell in MS-DOS and MS-Windows is much more complex than on&lt;br&gt;other systems.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-COMSPEC&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;On MS-DOS, if &lt;code&gt;SHELL&lt;/code&gt; is not set, the value of the variable&lt;br&gt;&lt;code&gt;COMSPEC&lt;/code&gt; (which is always set) is used instead.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-SHELL_002c-MS_002dDOS-specifics&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The processing of lines that set the variable &lt;code&gt;SHELL&lt;/code&gt; in Makefiles&lt;br&gt;is different on MS-DOS.  The stock shell, &lt;samp&gt;command.com&lt;/samp&gt;, is&lt;br&gt;ridiculously limited in its functionality and many users of &lt;code&gt;make&lt;/code&gt;&lt;br&gt;tend to install a replacement shell.  Therefore, on MS-DOS, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;examines the value of &lt;code&gt;SHELL&lt;/code&gt;, and changes its behavior based on&lt;br&gt;whether it points to a Unix-style or DOS-style shell.  This allows&lt;br&gt;reasonable functionality even if &lt;code&gt;SHELL&lt;/code&gt; points to&lt;br&gt;&lt;samp&gt;command.com&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If &lt;code&gt;SHELL&lt;/code&gt; points to a Unix-style shell, &lt;code&gt;make&lt;/code&gt; on MS-DOS&lt;br&gt;additionally checks whether that shell can indeed be found; if not, it&lt;br&gt;ignores the line that sets &lt;code&gt;SHELL&lt;/code&gt;.  In MS-DOS, GNU &lt;code&gt;make&lt;/code&gt;&lt;br&gt;searches for the shell in the following places:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ol&gt;&lt;br&gt;&lt;li&gt; In the precise place pointed to by the value of &lt;code&gt;SHELL&lt;/code&gt;.  For&lt;br&gt;example, if the makefile specifies ‘&lt;samp&gt;SHELL = /bin/sh&lt;/samp&gt;’, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;will look in the directory &lt;samp&gt;/bin&lt;/samp&gt; on the current drive.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; In the current directory.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; In each of the directories in the &lt;code&gt;PATH&lt;/code&gt; variable, in order.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In every directory it examines, &lt;code&gt;make&lt;/code&gt; will first look for the&lt;br&gt;specific file (&lt;samp&gt;sh&lt;/samp&gt; in the example above).  If this is not found,&lt;br&gt;it will also look in that directory for that file with one of the known&lt;br&gt;extensions which identify executable files.  For example &lt;samp&gt;.exe&lt;/samp&gt;,&lt;br&gt;&lt;samp&gt;.com&lt;/samp&gt;, &lt;samp&gt;.bat&lt;/samp&gt;, &lt;samp&gt;.btm&lt;/samp&gt;, &lt;samp&gt;.sh&lt;/samp&gt;, and some others.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If any of these attempts is successful, the value of &lt;code&gt;SHELL&lt;/code&gt; will&lt;br&gt;be set to the full pathname of the shell as found.  However, if none of&lt;br&gt;these is found, the value of &lt;code&gt;SHELL&lt;/code&gt; will not be changed, and thus&lt;br&gt;the line that sets it will be effectively ignored.  This is so&lt;br&gt;&lt;code&gt;make&lt;/code&gt; will only support features specific to a Unix-style shell if&lt;br&gt;such a shell is actually installed on the system where &lt;code&gt;make&lt;/code&gt; runs.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Note that this extended search for the shell is limited to the cases&lt;br&gt;where &lt;code&gt;SHELL&lt;/code&gt; is set from the Makefile; if it is set in the&lt;br&gt;environment or command line, you are expected to set it to the full&lt;br&gt;pathname of the shell, exactly as things are on Unix.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The effect of the above DOS-specific processing is that a Makefile that&lt;br&gt;contains ‘&lt;samp&gt;SHELL = /bin/sh&lt;/samp&gt;’ (as many Unix makefiles do), will work&lt;br&gt;on MS-DOS unaltered if you have e.g. &lt;samp&gt;sh.exe&lt;/samp&gt; installed in some&lt;br&gt;directory along your &lt;code&gt;PATH&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-SHELL-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eSHELLFLAGS-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Parallel&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Errors&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Errors&lt;/a&gt;, Previous: &lt;a href=&quot;#Execution&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Execution&lt;/a&gt;, Up: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recipes&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Parallel-Execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;5.4 Parallel Execution&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-execution-in-parallel&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-parallel-execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-execution_002c-in-parallel&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-job-slots&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dj&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002djobs&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;GNU &lt;code&gt;make&lt;/code&gt; knows how to execute several recipes at once.&lt;br&gt;Normally, &lt;code&gt;make&lt;/code&gt; will execute only one recipe at a time, waiting&lt;br&gt;for it to finish before executing the next.  However, the ‘&lt;samp&gt;-j&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;–jobs&lt;/samp&gt;’ option tells &lt;code&gt;make&lt;/code&gt; to execute many recipes&lt;br&gt;simultaneously.  You can inhibit parallelism in a particular makefile&lt;br&gt;with the &lt;code&gt;.NOTPARALLEL&lt;/code&gt; pseudo-target (see &lt;a href=&quot;#Special-Targets&quot;&gt;Special Built-in Target Names&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;On MS-DOS, the ‘&lt;samp&gt;-j&lt;/samp&gt;’ option has no effect, since that system doesn’t&lt;br&gt;support multi-processing.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the ‘&lt;samp&gt;-j&lt;/samp&gt;’ option is followed by an integer, this is the number of&lt;br&gt;recipes to execute at once; this is called the number of &lt;em&gt;job slots&lt;/em&gt;.&lt;br&gt;If there is nothing looking like an integer after the ‘&lt;samp&gt;-j&lt;/samp&gt;’ option,&lt;br&gt;there is no limit on the number of job slots.  The default number of job&lt;br&gt;slots is one, which means serial execution (one thing at a time).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Handling recursive &lt;code&gt;make&lt;/code&gt; invocations raises issues for parallel&lt;br&gt;execution.  For more information on this, see &lt;a href=&quot;#Options_002fRecursion&quot;&gt;Communicating Options to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If a recipe fails (is killed by a signal or exits with a nonzero&lt;br&gt;status), and errors are not ignored for that recipe (see &lt;a href=&quot;#Errors&quot;&gt;Errors in Recipes&lt;/a&gt;), the remaining recipe lines to remake the same&lt;br&gt;target will not be run.  If a recipe fails and the ‘&lt;samp&gt;-k&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;–keep-going&lt;/samp&gt;’ option was not given (see &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;), &lt;code&gt;make&lt;/code&gt; aborts execution.  If make&lt;br&gt;terminates for any reason (including a signal) with child processes&lt;br&gt;running, it waits for them to finish before actually exiting.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-load-average&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-limiting-jobs-based-on-load&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-jobs_002c-limiting-based-on-load&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dl-_0028load-average_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dmax_002dload&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dload_002daverage&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;When the system is heavily loaded, you will probably want to run fewer jobs&lt;br&gt;than when it is lightly loaded.  You can use the ‘&lt;samp&gt;-l&lt;/samp&gt;’ option to tell&lt;br&gt;&lt;code&gt;make&lt;/code&gt; to limit the number of jobs to run at once, based on the load&lt;br&gt;average.  The ‘&lt;samp&gt;-l&lt;/samp&gt;’ or ‘&lt;samp&gt;–max-load&lt;/samp&gt;’&lt;br&gt;option is followed by a floating-point number.  For&lt;br&gt;example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;-l 2.5&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will not let &lt;code&gt;make&lt;/code&gt; start more than one job if the load average is&lt;br&gt;above 2.5.  The ‘&lt;samp&gt;-l&lt;/samp&gt;’ option with no following number removes the&lt;br&gt;load limit, if one was given with a previous ‘&lt;samp&gt;-l&lt;/samp&gt;’ option.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;More precisely, when &lt;code&gt;make&lt;/code&gt; goes to start up a job, and it already has&lt;br&gt;at least one job running, it checks the current load average; if it is not&lt;br&gt;lower than the limit given with ‘&lt;samp&gt;-l&lt;/samp&gt;’, &lt;code&gt;make&lt;/code&gt; waits until the load&lt;br&gt;average goes below that limit, or until all the other jobs finish.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;By default, there is no load limit.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Parallel-Output&quot; accesskey=&quot;1&quot;&gt;Parallel Output&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Handling output during parallel execution&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Parallel-Input&quot; accesskey=&quot;2&quot;&gt;Parallel Input&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Handling input during parallel execution&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Parallel-Output&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Parallel-Input&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Parallel Input&lt;/a&gt;, Previous: &lt;a href=&quot;#Parallel&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Parallel&lt;/a&gt;, Up: &lt;a href=&quot;#Parallel&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Parallel&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Output-During-Parallel-Execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;5.4.1 Output During Parallel Execution&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-output-during-parallel-execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-parallel-execution_002c-output-during&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When running several recipes in parallel the output from each&lt;br&gt;recipe appears as soon as it is generated, with the result that&lt;br&gt;messages from different recipes may be interspersed, sometimes even&lt;br&gt;appearing on the same line.  This can make reading the output very&lt;br&gt;difficult.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002doutput_002dsync&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dO&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;To avoid this you can use the ‘&lt;samp&gt;–output-sync&lt;/samp&gt;’ (‘&lt;samp&gt;-O&lt;/samp&gt;’) option.&lt;br&gt;This option instructs &lt;code&gt;make&lt;/code&gt; to save the output from the commands&lt;br&gt;it invokes and print it all once the commands are completed.&lt;br&gt;Additionally, if there are multiple recursive &lt;code&gt;make&lt;/code&gt; invocations&lt;br&gt;running in parallel, they will communicate so that only one of them is&lt;br&gt;generating output at a time.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If working directory printing is enabled (see &lt;a href=&quot;#g_t_002dw-Option&quot;&gt;The&lt;br&gt;‘&lt;samp&gt;–print-directory&lt;/samp&gt;’ Option&lt;/a&gt;), the enter/leave messages are&lt;br&gt;printed around each output grouping.  If you prefer not to see these&lt;br&gt;messages add the ‘&lt;samp&gt;–no-print-directory&lt;/samp&gt;’ option to &lt;code&gt;MAKEFLAGS&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;There are four levels of granularity when synchronizing output,&lt;br&gt;specified by giving an argument to the option (e.g.,  ‘&lt;samp&gt;-Oline&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;–output-sync=recurse&lt;/samp&gt;’).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;none&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;This is the default: all output is sent directly as it is generated and&lt;br&gt;no synchronization is performed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;line&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Output from each individual line of the recipe is grouped and printed&lt;br&gt;as soon as that line is complete.  If a recipe consists of multiple&lt;br&gt;lines, they may be interspersed with lines from other recipes.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;target&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Output from the entire recipe for each target is grouped and printed&lt;br&gt;once the target is complete.  This is the default if the&lt;br&gt;&lt;code&gt;–output-sync&lt;/code&gt; or &lt;code&gt;-O&lt;/code&gt; option is given with no argument.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;recurse&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Output from each recursive invocation of &lt;code&gt;make&lt;/code&gt; is grouped and&lt;br&gt;printed once the recursive invocation is complete.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Regardless of the mode chosen, the total build time will be the same.&lt;br&gt;The only difference is in how the output appears.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The ‘&lt;samp&gt;target&lt;/samp&gt;’ and ‘&lt;samp&gt;recurse&lt;/samp&gt;’ modes both collect the output of&lt;br&gt;the entire recipe of a target and display it uninterrupted when the&lt;br&gt;recipe completes.  The difference between them is in how recipes that&lt;br&gt;contain recursive invocations of &lt;code&gt;make&lt;/code&gt; are treated&lt;br&gt;(see &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;).  For all recipes&lt;br&gt;which have no recursive lines, the ‘&lt;samp&gt;target&lt;/samp&gt;’ and ‘&lt;samp&gt;recurse&lt;/samp&gt;’&lt;br&gt;modes behave identically.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the ‘&lt;samp&gt;recurse&lt;/samp&gt;’ mode is chosen, recipes that contain recursive&lt;br&gt;&lt;code&gt;make&lt;/code&gt; invocations are treated the same as other targets: the&lt;br&gt;output from the recipe, including the output from the recursive&lt;br&gt;&lt;code&gt;make&lt;/code&gt;, is saved and printed after the entire recipe is complete.&lt;br&gt;This ensures output from all the targets built by a given recursive&lt;br&gt;&lt;code&gt;make&lt;/code&gt; instance are grouped together, which may make the output&lt;br&gt;easier to understand.  However it also leads to long periods of time&lt;br&gt;during the build where no output is seen, followed by large bursts of&lt;br&gt;output.  If you are not watching the build as it proceeds, but instead&lt;br&gt;viewing a log of the build after the fact, this may be the best option&lt;br&gt;for you.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you are watching the output, the long gaps of quiet during the&lt;br&gt;build can be frustrating.  The ‘&lt;samp&gt;target&lt;/samp&gt;’ output synchronization&lt;br&gt;mode detects when &lt;code&gt;make&lt;/code&gt; is going to be invoked recursively,&lt;br&gt;using the standard methods, and it will not synchronize the output of&lt;br&gt;those lines.  The recursive &lt;code&gt;make&lt;/code&gt; will perform the&lt;br&gt;synchronization for its targets and the output from each will be&lt;br&gt;displayed immediately when it completes.  Be aware that output from&lt;br&gt;recursive lines of the recipe are not synchronized (for example if&lt;br&gt;the recursive line prints a message before running &lt;code&gt;make&lt;/code&gt;, that&lt;br&gt;message will not be synchronized).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The ‘&lt;samp&gt;line&lt;/samp&gt;’ mode can be useful for front-ends that are watching&lt;br&gt;the output of &lt;code&gt;make&lt;/code&gt; to track when recipes are started and&lt;br&gt;completed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Some programs invoked by &lt;code&gt;make&lt;/code&gt; may behave differently if they&lt;br&gt;determine they’re writing output to a terminal versus a file (often&lt;br&gt;described as “interactive” vs. “non-interactive” modes).  For&lt;br&gt;example, many programs that can display colorized output will not do&lt;br&gt;so if they determine they are not writing to a terminal.  If your&lt;br&gt;makefile invokes a program like this then using the output&lt;br&gt;synchronization options will cause the program to believe it’s running&lt;br&gt;in “non-interactive” mode even though the output will ultimately go&lt;br&gt;to the terminal.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Parallel-Input&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Parallel-Output&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Parallel Output&lt;/a&gt;, Up: &lt;a href=&quot;#Parallel&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Parallel&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Input-During-Parallel-Execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;5.4.2 Input During Parallel Execution&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-input-during-parallel-execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-parallel-execution_002c-input-during&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-standard-input&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Two processes cannot both take input from the same device at the same&lt;br&gt;time.  To make sure that only one recipe tries to take input from the&lt;br&gt;terminal at once, &lt;code&gt;make&lt;/code&gt; will invalidate the standard input&lt;br&gt;streams of all but one running recipe.  If another recipe attempts to&lt;br&gt;read from standard input it will usually incur a fatal error (a&lt;br&gt;‘&lt;samp&gt;Broken pipe&lt;/samp&gt;’ signal).&lt;br&gt;&lt;a name=&quot;index-broken-pipe&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;It is unpredictable which recipe will have a valid standard input stream&lt;br&gt;(which will come from the terminal, or wherever you redirect the standard&lt;br&gt;input of &lt;code&gt;make&lt;/code&gt;).  The first recipe run will always get it first, and&lt;br&gt;the first recipe started after that one finishes will get it next, and so&lt;br&gt;on.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;We will change how this aspect of &lt;code&gt;make&lt;/code&gt; works if we find a better&lt;br&gt;alternative.  In the mean time, you should not rely on any recipe using&lt;br&gt;standard input at all if you are using the parallel execution feature; but&lt;br&gt;if you are not using this feature, then standard input works normally in&lt;br&gt;all recipes.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Errors&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Interrupts&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Interrupts&lt;/a&gt;, Previous: &lt;a href=&quot;#Parallel&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Parallel&lt;/a&gt;, Up: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recipes&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Errors-in-Recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;5.5 Errors in Recipes&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-errors-_0028in-recipes_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-errors-in&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-exit-status-_0028errors_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;After each shell invocation returns, &lt;code&gt;make&lt;/code&gt; looks at its exit&lt;br&gt;status.  If the shell completed successfully (the exit status is&lt;br&gt;zero), the next line in the recipe is executed in a new shell; after&lt;br&gt;the last line is finished, the rule is finished.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If there is an error (the exit status is nonzero), &lt;code&gt;make&lt;/code&gt; gives up on&lt;br&gt;the current rule, and perhaps on all rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Sometimes the failure of a certain recipe line does not indicate a problem.&lt;br&gt;For example, you may use the &lt;code&gt;mkdir&lt;/code&gt; command to ensure that a&lt;br&gt;directory exists.  If the directory already exists, &lt;code&gt;mkdir&lt;/code&gt; will&lt;br&gt;report an error, but you probably want &lt;code&gt;make&lt;/code&gt; to continue regardless.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002d-_0028in-recipes_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;To ignore errors in a recipe line, write a ‘&lt;samp&gt;-&lt;/samp&gt;’ at the beginning&lt;br&gt;of the line’s text (after the initial tab).  The ‘&lt;samp&gt;-&lt;/samp&gt;’ is discarded&lt;br&gt;before the line is passed to the shell for execution.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;clean:&lt;br&gt;        -rm -f *.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;index-rm-_0028shell-command_0029-3&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This causes &lt;code&gt;make&lt;/code&gt; to continue even if &lt;code&gt;rm&lt;/code&gt; is unable to&lt;br&gt;remove a file.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002di&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dignore_002derrors&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eIGNORE-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;When you run &lt;code&gt;make&lt;/code&gt; with the ‘&lt;samp&gt;-i&lt;/samp&gt;’ or ‘&lt;samp&gt;–ignore-errors&lt;/samp&gt;’&lt;br&gt;flag, errors are ignored in all recipes of all rules.  A rule in the&lt;br&gt;makefile for the special target &lt;code&gt;.IGNORE&lt;/code&gt; has the same effect, if&lt;br&gt;there are no prerequisites.  These ways of ignoring errors are obsolete&lt;br&gt;because ‘&lt;samp&gt;-&lt;/samp&gt;’ is more flexible.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When errors are to be ignored, because of either a ‘&lt;samp&gt;-&lt;/samp&gt;’ or the&lt;br&gt;‘&lt;samp&gt;-i&lt;/samp&gt;’ flag, &lt;code&gt;make&lt;/code&gt; treats an error return just like success,&lt;br&gt;except that it prints out a message that tells you the status code&lt;br&gt;the shell exited with, and says that the error has been ignored.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When an error happens that &lt;code&gt;make&lt;/code&gt; has not been told to ignore,&lt;br&gt;it implies that the current target cannot be correctly remade, and neither&lt;br&gt;can any other that depends on it either directly or indirectly.  No further&lt;br&gt;recipes will be executed for these targets, since their preconditions&lt;br&gt;have not been achieved.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;index-_002dk&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dkeep_002dgoing&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Normally &lt;code&gt;make&lt;/code&gt; gives up immediately in this circumstance, returning a&lt;br&gt;nonzero status.  However, if the ‘&lt;samp&gt;-k&lt;/samp&gt;’ or ‘&lt;samp&gt;–keep-going&lt;/samp&gt;’&lt;br&gt;flag is specified, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;continues to consider the other prerequisites of the pending targets,&lt;br&gt;remaking them if necessary, before it gives up and returns nonzero status.&lt;br&gt;For example, after an error in compiling one object file, ‘&lt;samp&gt;make -k&lt;/samp&gt;’&lt;br&gt;will continue compiling other object files even though it already knows&lt;br&gt;that linking them will be impossible.  See &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The usual behavior assumes that your purpose is to get the specified&lt;br&gt;targets up to date; once &lt;code&gt;make&lt;/code&gt; learns that this is impossible, it&lt;br&gt;might as well report the failure immediately.  The ‘&lt;samp&gt;-k&lt;/samp&gt;’ option says&lt;br&gt;that the real purpose is to test as many of the changes made in the&lt;br&gt;program as possible, perhaps to find several independent problems so&lt;br&gt;that you can correct them all before the next attempt to compile.  This&lt;br&gt;is why Emacs’ &lt;code&gt;compile&lt;/code&gt; command passes the ‘&lt;samp&gt;-k&lt;/samp&gt;’ flag by&lt;br&gt;default.&lt;br&gt;&lt;a name=&quot;index-Emacs-_0028M_002dx-compile_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eDELETE_005fON_005fERROR-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-deletion-of-target-files&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-removal-of-target-files&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-target_002c-deleting-on-error&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Usually when a recipe line fails, if it has changed the target file at all,&lt;br&gt;the file is corrupted and cannot be used—or at least it is not&lt;br&gt;completely updated.  Yet the file’s time stamp says that it is now up to&lt;br&gt;date, so the next time &lt;code&gt;make&lt;/code&gt; runs, it will not try to update that&lt;br&gt;file.  The situation is just the same as when the shell is killed by a&lt;br&gt;signal; see &lt;a href=&quot;#Interrupts&quot;&gt;Interrupts&lt;/a&gt;.  So generally the right thing to do is to&lt;br&gt;delete the target file if the recipe fails after beginning to change&lt;br&gt;the file.  &lt;code&gt;make&lt;/code&gt; will do this if &lt;code&gt;.DELETE_ON_ERROR&lt;/code&gt; appears&lt;br&gt;as a target.  This is almost always what you want &lt;code&gt;make&lt;/code&gt; to do, but&lt;br&gt;it is not historical practice; so for compatibility, you must explicitly&lt;br&gt;request it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Interrupts&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Recursion&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Recursion&lt;/a&gt;, Previous: &lt;a href=&quot;#Errors&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Errors&lt;/a&gt;, Up: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recipes&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Interrupting-or-Killing-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;5.6 Interrupting or Killing &lt;code&gt;make&lt;/code&gt;&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-interrupt&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-signal&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-deletion-of-target-files-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-removal-of-target-files-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-target_002c-deleting-on-interrupt&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-killing-_0028interruption_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If &lt;code&gt;make&lt;/code&gt; gets a fatal signal while a shell is executing, it may&lt;br&gt;delete the target file that the recipe was supposed to update.  This is&lt;br&gt;done if the target file’s last-modification time has changed since&lt;br&gt;&lt;code&gt;make&lt;/code&gt; first checked it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The purpose of deleting the target is to make sure that it is remade from&lt;br&gt;scratch when &lt;code&gt;make&lt;/code&gt; is next run.  Why is this?  Suppose you type&lt;br&gt;&lt;kbd&gt;Ctrl-c&lt;/kbd&gt; while a compiler is running, and it has begun to write an&lt;br&gt;object file &lt;samp&gt;foo.o&lt;/samp&gt;.  The &lt;kbd&gt;Ctrl-c&lt;/kbd&gt; kills the compiler, resulting&lt;br&gt;in an incomplete file whose last-modification time is newer than the source&lt;br&gt;file &lt;samp&gt;foo.c&lt;/samp&gt;.  But &lt;code&gt;make&lt;/code&gt; also receives the &lt;kbd&gt;Ctrl-c&lt;/kbd&gt; signal&lt;br&gt;and deletes this incomplete file.  If &lt;code&gt;make&lt;/code&gt; did not do this, the next&lt;br&gt;invocation of &lt;code&gt;make&lt;/code&gt; would think that &lt;samp&gt;foo.o&lt;/samp&gt; did not require&lt;br&gt;updating—resulting in a strange error message from the linker when it&lt;br&gt;tries to link an object file half of which is missing.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002ePRECIOUS-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;You can prevent the deletion of a target file in this way by making the&lt;br&gt;special target &lt;code&gt;.PRECIOUS&lt;/code&gt; depend on it.  Before remaking a target,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; checks to see whether it appears on the prerequisites of&lt;br&gt;&lt;code&gt;.PRECIOUS&lt;/code&gt;, and thereby decides whether the target should be deleted&lt;br&gt;if a signal happens.  Some reasons why you might do this are that the&lt;br&gt;target is updated in some atomic fashion, or exists only to record a&lt;br&gt;modification-time (its contents do not matter), or must exist at all&lt;br&gt;times to prevent other sorts of trouble.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Canned-Recipes&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Canned Recipes&lt;/a&gt;, Previous: &lt;a href=&quot;#Interrupts&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Interrupts&lt;/a&gt;, Up: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recipes&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Recursive-Use-of-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;5.7 Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-subdirectories_002c-recursion-for&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Recursive use of &lt;code&gt;make&lt;/code&gt; means using &lt;code&gt;make&lt;/code&gt; as a command in a&lt;br&gt;makefile.  This technique is useful when you want separate makefiles for&lt;br&gt;various subsystems that compose a larger system.  For example, suppose you&lt;br&gt;have a sub-directory &lt;samp&gt;subdir&lt;/samp&gt; which has its own makefile, and you would&lt;br&gt;like the containing directory’s makefile to run &lt;code&gt;make&lt;/code&gt; on the&lt;br&gt;sub-directory.  You can do it by writing this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;subsystem:&lt;br&gt;        cd subdir &amp;amp;&amp;amp; $(MAKE)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;or, equivalently, this (see &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;):&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;subsystem:&lt;br&gt;        $(MAKE) -C subdir&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;index-_002dC&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002ddirectory&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;You can write recursive &lt;code&gt;make&lt;/code&gt; commands just by copying this example,&lt;br&gt;but there are many things to know about how they work and why, and about&lt;br&gt;how the sub-&lt;code&gt;make&lt;/code&gt; relates to the top-level &lt;code&gt;make&lt;/code&gt;.  You may&lt;br&gt;also find it useful to declare targets that invoke recursive&lt;br&gt;&lt;code&gt;make&lt;/code&gt; commands as ‘&lt;samp&gt;.PHONY&lt;/samp&gt;’ (for more discussion on when&lt;br&gt;this is useful, see &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-CURDIR&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;For your convenience, when GNU &lt;code&gt;make&lt;/code&gt; starts (after it has&lt;br&gt;processed any &lt;code&gt;-C&lt;/code&gt; options) it sets the variable &lt;code&gt;CURDIR&lt;/code&gt; to&lt;br&gt;the pathname of the current working directory.  This value is never&lt;br&gt;touched by &lt;code&gt;make&lt;/code&gt; again: in particular note that if you include&lt;br&gt;files from other directories the value of &lt;code&gt;CURDIR&lt;/code&gt; does not&lt;br&gt;change.  The value has the same precedence it would have if it were&lt;br&gt;set in the makefile (by default, an environment variable &lt;code&gt;CURDIR&lt;/code&gt;&lt;br&gt;will not override this value).  Note that setting this variable has no&lt;br&gt;impact on the operation of &lt;code&gt;make&lt;/code&gt; (it does not cause &lt;code&gt;make&lt;/code&gt;&lt;br&gt;to change its working directory, for example).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#MAKE-Variable&quot; accesskey=&quot;1&quot;&gt;MAKE Variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The special effects of using ‘&lt;samp&gt;$(MAKE)&lt;/samp&gt;’.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Variables_002fRecursion&quot; accesskey=&quot;2&quot;&gt;Variables/Recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to communicate variables to a sub-&lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Options_002fRecursion&quot; accesskey=&quot;3&quot;&gt;Options/Recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to communicate options to a sub-&lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#g_t_002dw-Option&quot; accesskey=&quot;4&quot;&gt;-w Option&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How the ‘&lt;samp&gt;-w&lt;/samp&gt;’ or ‘&lt;samp&gt;–print-directory&lt;/samp&gt;’ option&lt;br&gt;                                  helps debug use of recursive &lt;code&gt;make&lt;/code&gt; commands.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;MAKE-Variable&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Variables_002fRecursion&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Variables/Recursion&lt;/a&gt;, Previous: &lt;a href=&quot;#Recursion&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Recursion&lt;/a&gt;, Up: &lt;a href=&quot;#Recursion&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recursion&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;How-the-MAKE-Variable-Works&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;5.7.1 How the &lt;code&gt;MAKE&lt;/code&gt; Variable Works&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-MAKE&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-MAKE-variable&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Recursive &lt;code&gt;make&lt;/code&gt; commands should always use the variable &lt;code&gt;MAKE&lt;/code&gt;,&lt;br&gt;not the explicit command name ‘&lt;samp&gt;make&lt;/samp&gt;’, as shown here:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;subsystem:&lt;br&gt;        cd subdir &amp;amp;&amp;amp; $(MAKE)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The value of this variable is the file name with which &lt;code&gt;make&lt;/code&gt; was&lt;br&gt;invoked.  If this file name was &lt;samp&gt;/bin/make&lt;/samp&gt;, then the recipe executed&lt;br&gt;is ‘&lt;samp&gt;cd subdir &amp;amp;&amp;amp; /bin/make&lt;/samp&gt;’.  If you use a special version of&lt;br&gt;&lt;code&gt;make&lt;/code&gt; to run the top-level makefile, the same special version will be&lt;br&gt;executed for recursive invocations.&lt;br&gt;&lt;a name=&quot;index-cd-_0028shell-command_0029-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002b_002c-and-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;As a special feature, using the variable &lt;code&gt;MAKE&lt;/code&gt; in the recipe of&lt;br&gt;a rule alters the effects of the ‘&lt;samp&gt;-t&lt;/samp&gt;’ (‘&lt;samp&gt;–touch&lt;/samp&gt;’), ‘&lt;samp&gt;-n&lt;/samp&gt;’&lt;br&gt;(‘&lt;samp&gt;–just-print&lt;/samp&gt;’), or ‘&lt;samp&gt;-q&lt;/samp&gt;’ (‘&lt;samp&gt;&lt;span class=&quot;nolinebreak&quot;&gt;–question&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt;) option.&lt;br&gt;Using the &lt;code&gt;MAKE&lt;/code&gt; variable has the same effect as using a ‘&lt;samp&gt;+&lt;/samp&gt;’&lt;br&gt;character at the beginning of the recipe line.  See &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Executing the Recipes&lt;/a&gt;.  This special feature&lt;br&gt;is only enabled if the &lt;code&gt;MAKE&lt;/code&gt; variable appears directly in the&lt;br&gt;recipe: it does not apply if the &lt;code&gt;MAKE&lt;/code&gt; variable is referenced&lt;br&gt;through expansion of another variable.  In the latter case you must&lt;br&gt;use the ‘&lt;samp&gt;+&lt;/samp&gt;’ token to get these special effects.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Consider the command ‘&lt;samp&gt;make -t&lt;/samp&gt;’ in the above example.  (The&lt;br&gt;‘&lt;samp&gt;-t&lt;/samp&gt;’ option marks targets as up to date without actually running&lt;br&gt;any recipes; see &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;.)  Following the usual&lt;br&gt;definition of ‘&lt;samp&gt;-t&lt;/samp&gt;’, a ‘&lt;samp&gt;make -t&lt;/samp&gt;’ command in the example would&lt;br&gt;create a file named &lt;samp&gt;subsystem&lt;/samp&gt; and do nothing else.  What you&lt;br&gt;really want it to do is run ‘&lt;samp&gt;cd&amp;nbsp;subdir&amp;nbsp;&amp;amp;&amp;amp;&lt;!-- /@w --&gt; make&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-t&lt;/span&gt;&lt;!-- /@w --&gt;&lt;/samp&gt;’; but&lt;br&gt;that would require executing the recipe, and ‘&lt;samp&gt;-t&lt;/samp&gt;’ says not to&lt;br&gt;execute recipes.&lt;br&gt;&lt;a name=&quot;index-_002dt_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-_002dt&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dtouch_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The special feature makes this do what you want: whenever a recipe&lt;br&gt;line of a rule contains the variable &lt;code&gt;MAKE&lt;/code&gt;, the flags ‘&lt;samp&gt;-t&lt;/samp&gt;’,&lt;br&gt;‘&lt;samp&gt;-n&lt;/samp&gt;’ and ‘&lt;samp&gt;-q&lt;/samp&gt;’ do not apply to that line.  Recipe lines&lt;br&gt;containing &lt;code&gt;MAKE&lt;/code&gt; are executed normally despite the presence of a&lt;br&gt;flag that causes most recipes not to be run.  The usual&lt;br&gt;&lt;code&gt;MAKEFLAGS&lt;/code&gt; mechanism passes the flags to the sub-&lt;code&gt;make&lt;/code&gt;&lt;br&gt;(see &lt;a href=&quot;#Options_002fRecursion&quot;&gt;Communicating Options to a&lt;br&gt;Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;), so your request to touch the files, or print the&lt;br&gt;recipes, is propagated to the subsystem.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Variables_002fRecursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Options_002fRecursion&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Options/Recursion&lt;/a&gt;, Previous: &lt;a href=&quot;#MAKE-Variable&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;MAKE Variable&lt;/a&gt;, Up: &lt;a href=&quot;#Recursion&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recursion&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Communicating-Variables-to-a-Sub_002dmake&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;5.7.2 Communicating Variables to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-sub_002dmake&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-environment_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-exporting-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-environment&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-exporting&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-environment&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Variable values of the top-level &lt;code&gt;make&lt;/code&gt; can be passed to the&lt;br&gt;sub-&lt;code&gt;make&lt;/code&gt; through the environment by explicit request.  These&lt;br&gt;variables are defined in the sub-&lt;code&gt;make&lt;/code&gt; as defaults, but they do&lt;br&gt;not override variables defined in the makefile used by&lt;br&gt;the sub-&lt;code&gt;make&lt;/code&gt; unless you use the ‘&lt;samp&gt;-e&lt;/samp&gt;’ switch (see &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To pass down, or &lt;em&gt;export&lt;/em&gt;, a variable, &lt;code&gt;make&lt;/code&gt; adds the&lt;br&gt;variable and its value to the environment for running each line of the&lt;br&gt;recipe.  The sub-&lt;code&gt;make&lt;/code&gt;, in turn, uses the environment to&lt;br&gt;initialize its table of variable values.  See &lt;a href=&quot;#Environment&quot;&gt;Variables from the Environment&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Except by explicit request, &lt;code&gt;make&lt;/code&gt; exports a variable only if it&lt;br&gt;is either defined in the environment initially or set on the command&lt;br&gt;line, and if its name consists only of letters, numbers, and underscores.&lt;br&gt;Some shells cannot cope with environment variable names consisting of&lt;br&gt;characters other than letters, numbers, and underscores.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-SHELL_002c-exported-value&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The value of the &lt;code&gt;make&lt;/code&gt; variable &lt;code&gt;SHELL&lt;/code&gt; is not exported.&lt;br&gt;Instead, the value of the &lt;code&gt;SHELL&lt;/code&gt; variable from the invoking&lt;br&gt;environment is passed to the sub-&lt;code&gt;make&lt;/code&gt;.  You can force&lt;br&gt;&lt;code&gt;make&lt;/code&gt; to export its value for &lt;code&gt;SHELL&lt;/code&gt; by using the&lt;br&gt;&lt;code&gt;export&lt;/code&gt; directive, described below.  See &lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The special variable &lt;code&gt;MAKEFLAGS&lt;/code&gt; is always exported (unless you&lt;br&gt;unexport it).  &lt;code&gt;MAKEFILES&lt;/code&gt; is exported if you set it to anything.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; automatically passes down variable values that were defined&lt;br&gt;on the command line, by putting them in the &lt;code&gt;MAKEFLAGS&lt;/code&gt; variable.&lt;br&gt;See &lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Variables are &lt;em&gt;not&lt;/em&gt; normally passed down if they were created by&lt;br&gt;default by &lt;code&gt;make&lt;/code&gt; (see &lt;a href=&quot;#Implicit-Variables&quot;&gt;Variables Used by&lt;br&gt;Implicit Rules&lt;/a&gt;).  The sub-&lt;code&gt;make&lt;/code&gt; will define these for&lt;br&gt;itself.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-export&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;If you want to export specific variables to a sub-&lt;code&gt;make&lt;/code&gt;, use the&lt;br&gt;&lt;code&gt;export&lt;/code&gt; directive, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;export &lt;var&gt;variable&lt;/var&gt; …&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;a name=&quot;index-unexport&quot;&gt;&lt;/a&gt;&lt;br&gt;If you want to &lt;em&gt;prevent&lt;/em&gt; a variable from being exported, use the&lt;br&gt;&lt;code&gt;unexport&lt;/code&gt; directive, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;unexport &lt;var&gt;variable&lt;/var&gt; …&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In both of these forms, the arguments to &lt;code&gt;export&lt;/code&gt; and&lt;br&gt;&lt;code&gt;unexport&lt;/code&gt; are expanded, and so could be variables or functions&lt;br&gt;which expand to a (list of) variable names to be (un)exported.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;As a convenience, you can define a variable and export it at the same&lt;br&gt;time by doing:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;export &lt;var&gt;variable&lt;/var&gt; = value&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;has the same result as:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;variable&lt;/var&gt; = value&lt;br&gt;export &lt;var&gt;variable&lt;/var&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;and&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;export &lt;var&gt;variable&lt;/var&gt; := value&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;has the same result as:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;variable&lt;/var&gt; := value&lt;br&gt;export &lt;var&gt;variable&lt;/var&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Likewise,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;export &lt;var&gt;variable&lt;/var&gt; += value&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;is just like:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;variable&lt;/var&gt; += value&lt;br&gt;export &lt;var&gt;variable&lt;/var&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;See &lt;a href=&quot;#Appending&quot;&gt;Appending More Text to Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You may notice that the &lt;code&gt;export&lt;/code&gt; and &lt;code&gt;unexport&lt;/code&gt; directives&lt;br&gt;work in &lt;code&gt;make&lt;/code&gt; in the same way they work in the shell, &lt;code&gt;sh&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you want all variables to be exported by default, you can use&lt;br&gt;&lt;code&gt;export&lt;/code&gt; by itself:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;export&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This tells &lt;code&gt;make&lt;/code&gt; that variables which are not explicitly mentioned&lt;br&gt;in an &lt;code&gt;export&lt;/code&gt; or &lt;code&gt;unexport&lt;/code&gt; directive should be exported.&lt;br&gt;Any variable given in an &lt;code&gt;unexport&lt;/code&gt; directive will still &lt;em&gt;not&lt;/em&gt;&lt;br&gt;be exported.  If you use &lt;code&gt;export&lt;/code&gt; by itself to export variables by&lt;br&gt;default, variables whose names contain characters other than&lt;br&gt;alphanumerics and underscores will not be exported unless specifically&lt;br&gt;mentioned in an &lt;code&gt;export&lt;/code&gt; directive.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eEXPORT_005fALL_005fVARIABLES-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The behavior elicited by an &lt;code&gt;export&lt;/code&gt; directive by itself was the&lt;br&gt;default in older versions of GNU &lt;code&gt;make&lt;/code&gt;.  If your makefiles depend&lt;br&gt;on this behavior and you want to be compatible with old versions of&lt;br&gt;&lt;code&gt;make&lt;/code&gt;, you can write a rule for the special target&lt;br&gt;&lt;code&gt;.EXPORT_ALL_VARIABLES&lt;/code&gt; instead of using the &lt;code&gt;export&lt;/code&gt; directive.&lt;br&gt;This will be ignored by old &lt;code&gt;make&lt;/code&gt;s, while the &lt;code&gt;export&lt;/code&gt;&lt;br&gt;directive will cause a syntax error.&lt;br&gt;&lt;a name=&quot;index-compatibility-in-exporting&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Likewise, you can use &lt;code&gt;unexport&lt;/code&gt; by itself to tell &lt;code&gt;make&lt;/code&gt;&lt;br&gt;&lt;em&gt;not&lt;/em&gt; to export variables by default.  Since this is the default&lt;br&gt;behavior, you would only need to do this if &lt;code&gt;export&lt;/code&gt; had been used&lt;br&gt;by itself earlier (in an included makefile, perhaps).  You&lt;br&gt;&lt;strong&gt;cannot&lt;/strong&gt; use &lt;code&gt;export&lt;/code&gt; and &lt;code&gt;unexport&lt;/code&gt; by themselves to&lt;br&gt;have variables exported for some recipes and not for others.  The last&lt;br&gt;&lt;code&gt;export&lt;/code&gt; or &lt;code&gt;unexport&lt;/code&gt; directive that appears by itself&lt;br&gt;determines the behavior for the entire run of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-MAKELEVEL&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-level-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;As a special feature, the variable &lt;code&gt;MAKELEVEL&lt;/code&gt; is changed when it&lt;br&gt;is passed down from level to level.  This variable’s value is a string&lt;br&gt;which is the depth of the level as a decimal number.  The value is&lt;br&gt;‘&lt;samp&gt;0&lt;/samp&gt;’ for the top-level &lt;code&gt;make&lt;/code&gt;; ‘&lt;samp&gt;1&lt;/samp&gt;’ for a sub-&lt;code&gt;make&lt;/code&gt;,&lt;br&gt;‘&lt;samp&gt;2&lt;/samp&gt;’ for a sub-sub-&lt;code&gt;make&lt;/code&gt;, and so on.  The incrementation&lt;br&gt;happens when &lt;code&gt;make&lt;/code&gt; sets up the environment for a recipe.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The main use of &lt;code&gt;MAKELEVEL&lt;/code&gt; is to test it in a conditional&lt;br&gt;directive (see &lt;a href=&quot;#Conditionals&quot;&gt;Conditional Parts of Makefiles&lt;/a&gt;); this&lt;br&gt;way you can write a makefile that behaves one way if run recursively and&lt;br&gt;another way if run directly by you.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-MAKEFILES-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;You can use the variable &lt;code&gt;MAKEFILES&lt;/code&gt; to cause all sub-&lt;code&gt;make&lt;/code&gt;&lt;br&gt;commands to use additional makefiles.  The value of &lt;code&gt;MAKEFILES&lt;/code&gt; is&lt;br&gt;a whitespace-separated list of file names.  This variable, if defined in&lt;br&gt;the outer-level makefile, is passed down through the environment; then&lt;br&gt;it serves as a list of extra makefiles for the sub-&lt;code&gt;make&lt;/code&gt; to read&lt;br&gt;before the usual or specified ones.  See &lt;a href=&quot;#MAKEFILES-Variable&quot;&gt;The&lt;br&gt;Variable &lt;code&gt;MAKEFILES&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Options_002fRecursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#g_t_002dw-Option&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;-w Option&lt;/a&gt;, Previous: &lt;a href=&quot;#Variables_002fRecursion&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Variables/Recursion&lt;/a&gt;, Up: &lt;a href=&quot;#Recursion&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recursion&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Communicating-Options-to-a-Sub_002dmake&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;5.7.3 Communicating Options to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-options_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-options&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-MAKEFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Flags such as ‘&lt;samp&gt;-s&lt;/samp&gt;’ and ‘&lt;samp&gt;-k&lt;/samp&gt;’ are passed automatically to the&lt;br&gt;sub-&lt;code&gt;make&lt;/code&gt; through the variable &lt;code&gt;MAKEFLAGS&lt;/code&gt;.  This variable is&lt;br&gt;set up automatically by &lt;code&gt;make&lt;/code&gt; to contain the flag letters that&lt;br&gt;&lt;code&gt;make&lt;/code&gt; received.  Thus, if you do ‘&lt;samp&gt;make&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-ks&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; then&lt;br&gt;&lt;code&gt;MAKEFLAGS&lt;/code&gt; gets the value ‘&lt;samp&gt;ks&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;As a consequence, every sub-&lt;code&gt;make&lt;/code&gt; gets a value for &lt;code&gt;MAKEFLAGS&lt;/code&gt;&lt;br&gt;in its environment.  In response, it takes the flags from that value and&lt;br&gt;processes them as if they had been given as arguments.&lt;br&gt;See &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-command-line-variable-definitions_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-command-line_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-command-line-variable-definitions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Likewise variables defined on the command line are passed to the&lt;br&gt;sub-&lt;code&gt;make&lt;/code&gt; through &lt;code&gt;MAKEFLAGS&lt;/code&gt;.  Words in the value of&lt;br&gt;&lt;code&gt;MAKEFLAGS&lt;/code&gt; that contain ‘&lt;samp&gt;=&lt;/samp&gt;’, &lt;code&gt;make&lt;/code&gt; treats as variable&lt;br&gt;definitions just as if they appeared on the command line.&lt;br&gt;See &lt;a href=&quot;#Overriding&quot;&gt;Overriding Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002dC_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002df_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002do_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dW_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002ddirectory_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dfile_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dold_002dfile_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dassume_002dold_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dassume_002dnew_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dnew_002dfile_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-_002dC&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-_002df&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-_002do&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-_002dW&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The options ‘&lt;samp&gt;-C&lt;/samp&gt;’, ‘&lt;samp&gt;-f&lt;/samp&gt;’, ‘&lt;samp&gt;-o&lt;/samp&gt;’, and ‘&lt;samp&gt;-W&lt;/samp&gt;’ are not put&lt;br&gt;into &lt;code&gt;MAKEFLAGS&lt;/code&gt;; these options are not passed down.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002dj_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002djobs_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-_002dj&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-job-slots_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The ‘&lt;samp&gt;-j&lt;/samp&gt;’ option is a special case (see &lt;a href=&quot;#Parallel&quot;&gt;Parallel Execution&lt;/a&gt;).&lt;br&gt;If you set it to some numeric value ‘&lt;samp&gt;N&lt;/samp&gt;’ and your operating system&lt;br&gt;supports it (most any UNIX system will; others typically won’t), the&lt;br&gt;parent &lt;code&gt;make&lt;/code&gt; and all the sub-&lt;code&gt;make&lt;/code&gt;s will communicate to&lt;br&gt;ensure that there are only ‘&lt;samp&gt;N&lt;/samp&gt;’ jobs running at the same time&lt;br&gt;between them all.  Note that any job that is marked recursive&lt;br&gt;(see &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Executing Recipes&lt;/a&gt;)&lt;br&gt;doesn’t count against the total jobs (otherwise we could get ‘&lt;samp&gt;N&lt;/samp&gt;’&lt;br&gt;sub-&lt;code&gt;make&lt;/code&gt;s running and have no slots left over for any real work!)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If your operating system doesn’t support the above communication, then&lt;br&gt;no ‘&lt;samp&gt;-j&lt;/samp&gt;’ is added to &lt;code&gt;MAKEFLAGS&lt;/code&gt;, so that sub-&lt;code&gt;make&lt;/code&gt;s&lt;br&gt;run in non-parallel mode.  If the ‘&lt;samp&gt;&lt;span class=&quot;nolinebreak&quot;&gt;-j&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; option were passed down&lt;br&gt;to sub-&lt;code&gt;make&lt;/code&gt;s you would get many more jobs running in parallel&lt;br&gt;than you asked for.  If you give ‘&lt;samp&gt;-j&lt;/samp&gt;’ with no numeric argument,&lt;br&gt;meaning to run as many jobs as possible in parallel, this is passed&lt;br&gt;down, since multiple infinities are no more than one.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you do not want to pass the other flags down, you must change the&lt;br&gt;value of &lt;code&gt;MAKEFLAGS&lt;/code&gt;, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;subsystem:&lt;br&gt;        cd subdir &amp;amp;&amp;amp; $(MAKE) MAKEFLAGS=&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-MAKEOVERRIDES&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The command line variable definitions really appear in the variable&lt;br&gt;&lt;code&gt;MAKEOVERRIDES&lt;/code&gt;, and &lt;code&gt;MAKEFLAGS&lt;/code&gt; contains a reference to this&lt;br&gt;variable.  If you do want to pass flags down normally, but don’t want to&lt;br&gt;pass down the command line variable definitions, you can reset&lt;br&gt;&lt;code&gt;MAKEOVERRIDES&lt;/code&gt; to empty, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;MAKEOVERRIDES =&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;a name=&quot;index-Arg-list-too-long&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-E2BIG&quot;&gt;&lt;/a&gt;&lt;br&gt;This is not usually useful to do.  However, some systems have a small&lt;br&gt;fixed limit on the size of the environment, and putting so much&lt;br&gt;information into the value of &lt;code&gt;MAKEFLAGS&lt;/code&gt; can exceed it.  If you&lt;br&gt;see the error message ‘&lt;samp&gt;Arg list too long&lt;/samp&gt;’, this may be the problem.&lt;br&gt;&lt;a name=&quot;index-_002ePOSIX-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-POSIX-1&quot;&gt;&lt;/a&gt;&lt;br&gt;(For strict compliance with POSIX.2, changing &lt;code&gt;MAKEOVERRIDES&lt;/code&gt; does&lt;br&gt;not affect &lt;code&gt;MAKEFLAGS&lt;/code&gt; if the special target ‘&lt;samp&gt;.POSIX&lt;/samp&gt;’ appears&lt;br&gt;in the makefile.  You probably do not care about this.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-MFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;A similar variable &lt;code&gt;MFLAGS&lt;/code&gt; exists also, for historical&lt;br&gt;compatibility.  It has the same value as &lt;code&gt;MAKEFLAGS&lt;/code&gt; except that it&lt;br&gt;does not contain the command line variable definitions, and it always&lt;br&gt;begins with a hyphen unless it is empty (&lt;code&gt;MAKEFLAGS&lt;/code&gt; begins with a&lt;br&gt;hyphen only when it begins with an option that has no single-letter&lt;br&gt;version, such as ‘&lt;samp&gt;–warn-undefined-variables&lt;/samp&gt;’).  &lt;code&gt;MFLAGS&lt;/code&gt; was&lt;br&gt;traditionally used explicitly in the recursive &lt;code&gt;make&lt;/code&gt; command, like&lt;br&gt;this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;subsystem:&lt;br&gt;        cd subdir &amp;amp;&amp;amp; $(MAKE) $(MFLAGS)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;but now &lt;code&gt;MAKEFLAGS&lt;/code&gt; makes this usage redundant.  If you want your&lt;br&gt;makefiles to be compatible with old &lt;code&gt;make&lt;/code&gt; programs, use this&lt;br&gt;technique; it will work fine with more modern &lt;code&gt;make&lt;/code&gt; versions too.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-setting-options-from-environment&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-options_002c-setting-from-environment&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-setting-options-in-makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-options_002c-setting-in-makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;MAKEFLAGS&lt;/code&gt; variable can also be useful if you want to have&lt;br&gt;certain options, such as ‘&lt;samp&gt;-k&lt;/samp&gt;’ (see &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of&lt;br&gt;Options&lt;/a&gt;), set each time you run &lt;code&gt;make&lt;/code&gt;.  You simply put a value for&lt;br&gt;&lt;code&gt;MAKEFLAGS&lt;/code&gt; in your environment.  You can also set &lt;code&gt;MAKEFLAGS&lt;/code&gt; in&lt;br&gt;a makefile, to specify additional flags that should also be in effect for&lt;br&gt;that makefile.  (Note that you cannot use &lt;code&gt;MFLAGS&lt;/code&gt; this way.  That&lt;br&gt;variable is set only for compatibility; &lt;code&gt;make&lt;/code&gt; does not interpret a&lt;br&gt;value you set for it in any way.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When &lt;code&gt;make&lt;/code&gt; interprets the value of &lt;code&gt;MAKEFLAGS&lt;/code&gt; (either from the&lt;br&gt;environment or from a makefile), it first prepends a hyphen if the value&lt;br&gt;does not already begin with one.  Then it chops the value into words&lt;br&gt;separated by blanks, and parses these words as if they were options given&lt;br&gt;on the command line (except that ‘&lt;samp&gt;-C&lt;/samp&gt;’, ‘&lt;samp&gt;-f&lt;/samp&gt;’, ‘&lt;samp&gt;-h&lt;/samp&gt;’,&lt;br&gt;‘&lt;samp&gt;-o&lt;/samp&gt;’, ‘&lt;samp&gt;-W&lt;/samp&gt;’, and their long-named versions are ignored; and there&lt;br&gt;is no error for an invalid option).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you do put &lt;code&gt;MAKEFLAGS&lt;/code&gt; in your environment, you should be sure not&lt;br&gt;to include any options that will drastically affect the actions of&lt;br&gt;&lt;code&gt;make&lt;/code&gt; and undermine the purpose of makefiles and of &lt;code&gt;make&lt;/code&gt;&lt;br&gt;itself.  For instance, the ‘&lt;samp&gt;-t&lt;/samp&gt;’, ‘&lt;samp&gt;-n&lt;/samp&gt;’, and ‘&lt;samp&gt;-q&lt;/samp&gt;’ options, if&lt;br&gt;put in one of these variables, could have disastrous consequences and would&lt;br&gt;certainly have at least surprising and probably annoying effects.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you’d like to run other implementations of &lt;code&gt;make&lt;/code&gt; in addition&lt;br&gt;to GNU &lt;code&gt;make&lt;/code&gt;, and hence do not want to add GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt;-specific flags to the &lt;code&gt;MAKEFLAGS&lt;/code&gt; variable, you can&lt;br&gt;add them to the &lt;code&gt;GNUMAKEFLAGS&lt;/code&gt; variable instead.  This variable&lt;br&gt;is parsed just before &lt;code&gt;MAKEFLAGS&lt;/code&gt;, in the same way as&lt;br&gt;&lt;code&gt;MAKEFLAGS&lt;/code&gt;.  When &lt;code&gt;make&lt;/code&gt; constructs &lt;code&gt;MAKEFLAGS&lt;/code&gt; to&lt;br&gt;pass to a recursive &lt;code&gt;make&lt;/code&gt; it will include all flags, even those&lt;br&gt;taken from &lt;code&gt;GNUMAKEFLAGS&lt;/code&gt;.  As a result, after parsing&lt;br&gt;&lt;code&gt;GNUMAKEFLAGS&lt;/code&gt; GNU &lt;code&gt;make&lt;/code&gt; sets this variable to the empty&lt;br&gt;string to avoid duplicating flags during recursion.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;It’s best to use &lt;code&gt;GNUMAKEFLAGS&lt;/code&gt; only with flags which won’t&lt;br&gt;materially change the behavior of your makefiles.  If your makefiles&lt;br&gt;require GNU make anyway then simply use &lt;code&gt;MAKEFLAGS&lt;/code&gt;.  Flags such&lt;br&gt;as ‘&lt;samp&gt;–no-print-directory&lt;/samp&gt;’ or ‘&lt;samp&gt;–output-sync&lt;/samp&gt;’ may be&lt;br&gt;appropriate for &lt;code&gt;GNUMAKEFLAGS&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;g_t_002dw-Option&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Options_002fRecursion&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Options/Recursion&lt;/a&gt;, Up: &lt;a href=&quot;#Recursion&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recursion&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-_002d_002dprint_002ddirectory-Option&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;5.7.4 The ‘&lt;samp&gt;–print-directory&lt;/samp&gt;’ Option&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-directories_002c-printing-them&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-printing-directories&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-printing-directories&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you use several levels of recursive &lt;code&gt;make&lt;/code&gt; invocations, the&lt;br&gt;‘&lt;samp&gt;-w&lt;/samp&gt;’ or ‘&lt;samp&gt;&lt;span class=&quot;nolinebreak&quot;&gt;–print-directory&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; option can make the output a&lt;br&gt;lot easier to understand by showing each directory as &lt;code&gt;make&lt;/code&gt;&lt;br&gt;starts processing it and as &lt;code&gt;make&lt;/code&gt; finishes processing it.  For&lt;br&gt;example, if ‘&lt;samp&gt;make -w&lt;/samp&gt;’ is run in the directory &lt;samp&gt;/u/gnu/make&lt;/samp&gt;,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; will print a line of the form:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;make: Entering directory &lt;code&gt;/u/gnu/make&amp;#39;.
&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;p&amp;gt;before doing anything else, and a line of the form:
&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;quot;example&amp;quot;&amp;gt;
&amp;lt;pre class=&amp;quot;example&amp;quot;&amp;gt;make: Leaving directory&lt;/code&gt;/u/gnu/make’.&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;when processing is completed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002dC_002c-and-_002dw&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002ddirectory_002c-and-_002d_002dprint_002ddirectory&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursion_002c-and-_002dw&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dw_002c-and-_002dC&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dw_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dprint_002ddirectory_002c-and-_002d_002ddirectory&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dprint_002ddirectory_002c-and-recursion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dno_002dprint_002ddirectory&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dprint_002ddirectory_002c-disabling&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dw_002c-disabling&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Normally, you do not need to specify this option because ‘&lt;samp&gt;make&lt;/samp&gt;’&lt;br&gt;does it for you: ‘&lt;samp&gt;-w&lt;/samp&gt;’ is turned on automatically when you use the&lt;br&gt;‘&lt;samp&gt;-C&lt;/samp&gt;’ option, and in sub-&lt;code&gt;make&lt;/code&gt;s.  &lt;code&gt;make&lt;/code&gt; will not&lt;br&gt;automatically turn on ‘&lt;samp&gt;-w&lt;/samp&gt;’ if you also use ‘&lt;samp&gt;-s&lt;/samp&gt;’, which says to&lt;br&gt;be silent, or if you use ‘&lt;samp&gt;–no-print-directory&lt;/samp&gt;’ to explicitly&lt;br&gt;disable it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Canned-Recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Empty-Recipes&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Empty Recipes&lt;/a&gt;, Previous: &lt;a href=&quot;#Recursion&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Recursion&lt;/a&gt;, Up: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recipes&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Defining-Canned-Recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;5.8 Defining Canned Recipes&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-canned-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-canned&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-sequences-of-commands&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-commands_002c-sequences-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When the same sequence of commands is useful in making various&lt;br&gt;targets, you can define it as a canned sequence with the &lt;code&gt;define&lt;/code&gt;&lt;br&gt;directive, and refer to the canned sequence from the recipes for those&lt;br&gt;targets.  The canned sequence is actually a variable, so the name must&lt;br&gt;not conflict with other variable names.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is an example of defining a canned recipe:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;define run-yacc =&lt;br&gt;yacc $(firstword $^)&lt;br&gt;mv y.tab.c $@&lt;br&gt;endef&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;index-yacc&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here &lt;code&gt;run-yacc&lt;/code&gt; is the name of the variable being defined;&lt;br&gt;&lt;code&gt;endef&lt;/code&gt; marks the end of the definition; the lines in between are the&lt;br&gt;commands.  The &lt;code&gt;define&lt;/code&gt; directive does not expand variable references&lt;br&gt;and function calls in the canned sequence; the ‘&lt;samp&gt;$&lt;/samp&gt;’ characters,&lt;br&gt;parentheses, variable names, and so on, all become part of the value of the&lt;br&gt;variable you are defining.&lt;br&gt;See &lt;a href=&quot;#Multi_002dLine&quot;&gt;Defining Multi-Line Variables&lt;/a&gt;,&lt;br&gt;for a complete explanation of &lt;code&gt;define&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The first command in this example runs Yacc on the first prerequisite of&lt;br&gt;whichever rule uses the canned sequence.  The output file from Yacc is&lt;br&gt;always named &lt;samp&gt;y.tab.c&lt;/samp&gt;.  The second command moves the output to the&lt;br&gt;rule’s target file name.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To use the canned sequence, substitute the variable into the recipe of a&lt;br&gt;rule.  You can substitute it like any other variable&lt;br&gt;(see &lt;a href=&quot;#Reference&quot;&gt;Basics of Variable References&lt;/a&gt;).&lt;br&gt;Because variables defined by &lt;code&gt;define&lt;/code&gt; are recursively expanded&lt;br&gt;variables, all the variable references you wrote inside the &lt;code&gt;define&lt;/code&gt;&lt;br&gt;are expanded now.  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo.c : foo.y&lt;br&gt;        $(run-yacc)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;‘&lt;samp&gt;foo.y&lt;/samp&gt;’ will be substituted for the variable ‘&lt;samp&gt;$^&lt;/samp&gt;’ when it occurs in&lt;br&gt;&lt;code&gt;run-yacc&lt;/code&gt;’s value, and ‘&lt;samp&gt;foo.c&lt;/samp&gt;’ for ‘&lt;samp&gt;$@&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This is a realistic example, but this particular one is not needed in&lt;br&gt;practice because &lt;code&gt;make&lt;/code&gt; has an implicit rule to figure out these&lt;br&gt;commands based on the file names involved&lt;br&gt;(see &lt;a href=&quot;#Implicit-Rules&quot;&gt;Using Implicit Rules&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0040_002c-and-define&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002c-and-define&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002b_002c-and-define&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;In recipe execution, each line of a canned sequence is treated just as&lt;br&gt;if the line appeared on its own in the rule, preceded by a tab.  In&lt;br&gt;particular, &lt;code&gt;make&lt;/code&gt; invokes a separate sub-shell for each line.  You&lt;br&gt;can use the special prefix characters that affect command lines&lt;br&gt;(‘&lt;samp&gt;@&lt;/samp&gt;’, ‘&lt;samp&gt;-&lt;/samp&gt;’, and ‘&lt;samp&gt;+&lt;/samp&gt;’) on each line of a canned sequence.&lt;br&gt;See &lt;a href=&quot;#Recipes&quot;&gt;Writing Recipes in Rules&lt;/a&gt;.&lt;br&gt;For example, using this canned sequence:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;define frobnicate =&lt;br&gt;@echo “frobnicating target $@”&lt;br&gt;frob-step-1 $&amp;lt; -o $@-step-1&lt;br&gt;frob-step-2 $@-step-1 -o $@&lt;br&gt;endef&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; will not echo the first line, the &lt;code&gt;echo&lt;/code&gt; command.&lt;br&gt;But it &lt;em&gt;will&lt;/em&gt; echo the following two recipe lines.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;On the other hand, prefix characters on the recipe line that refers to&lt;br&gt;a canned sequence apply to every line in the sequence.  So the rule:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;frob.out: frob.in&lt;br&gt;        @$(frobnicate)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;does not echo &lt;em&gt;any&lt;/em&gt; recipe lines.&lt;br&gt;(See &lt;a href=&quot;#Echoing&quot;&gt;Recipe Echoing&lt;/a&gt;, for a full explanation of ‘&lt;samp&gt;@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Empty-Recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Canned-Recipes&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Canned Recipes&lt;/a&gt;, Up: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Recipes&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Using-Empty-Recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;5.9 Using Empty Recipes&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-empty-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-empty&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;It is sometimes useful to define recipes which do nothing.  This is done&lt;br&gt;simply by giving a recipe that consists of nothing but whitespace.  For&lt;br&gt;example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;target: ;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;defines an empty recipe for &lt;samp&gt;target&lt;/samp&gt;.  You could also use a line&lt;br&gt;beginning with a recipe prefix character to define an empty recipe,&lt;br&gt;but this would be confusing because such a line looks empty.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eDEFAULT_002c-and-empty-recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;You may be wondering why you would want to define a recipe that does&lt;br&gt;nothing.  One reason this is useful is to prevent a target from&lt;br&gt;getting implicit recipes (from implicit rules or the &lt;code&gt;.DEFAULT&lt;/code&gt;&lt;br&gt;special target; see &lt;a href=&quot;#Implicit-Rules&quot;&gt;Implicit Rules&lt;/a&gt; and see &lt;a href=&quot;#Last-Resort&quot;&gt;Defining Last-Resort Default Rules&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Empty recipes can also be used to avoid errors for targets that will&lt;br&gt;be created as a side-effect of another recipe: if the target does not&lt;br&gt;exist the empty recipe ensures that &lt;code&gt;make&lt;/code&gt; won’t complain that it&lt;br&gt;doesn’t know how to build the target, and &lt;code&gt;make&lt;/code&gt; will assume the&lt;br&gt;target is out of date.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You may be inclined to define empty recipes for targets that are not&lt;br&gt;actual files, but only exist so that their prerequisites can be&lt;br&gt;remade.  However, this is not the best way to do that, because the&lt;br&gt;prerequisites may not be remade properly if the target file actually&lt;br&gt;does exist.  See &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;, for a better way to&lt;br&gt;do this.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Using-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Conditionals&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Conditionals&lt;/a&gt;, Previous: &lt;a href=&quot;#Recipes&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Recipes&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;How-to-Use-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;6 How to Use Variables&lt;/h2&gt;&lt;br&gt;&lt;a name=&quot;index-variable&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-value&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursive-variable-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-simple-variable-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A &lt;em&gt;variable&lt;/em&gt; is a name defined in a makefile to represent a string&lt;br&gt;of text, called the variable’s &lt;em&gt;value&lt;/em&gt;.  These values are&lt;br&gt;substituted by explicit request into targets, prerequisites, recipes,&lt;br&gt;and other parts of the makefile.  (In some other versions of &lt;code&gt;make&lt;/code&gt;,&lt;br&gt;variables are called &lt;em&gt;macros&lt;/em&gt;.)&lt;br&gt;&lt;a name=&quot;index-macro&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Variables and functions in all parts of a makefile are expanded when&lt;br&gt;read, except for in recipes, the right-hand sides of variable&lt;br&gt;definitions using ‘&lt;samp&gt;=&lt;/samp&gt;’, and the bodies of variable definitions&lt;br&gt;using the &lt;code&gt;define&lt;/code&gt; directive.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Variables can represent lists of file names, options to pass to compilers,&lt;br&gt;programs to run, directories to look in for source files, directories to&lt;br&gt;write output in, or anything else you can imagine.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A variable name may be any sequence of characters not containing&lt;br&gt;‘&lt;samp&gt;:&lt;/samp&gt;’, ‘&lt;samp&gt;#&lt;/samp&gt;’, ‘&lt;samp&gt;=&lt;/samp&gt;’, or whitespace.  However, variable names&lt;br&gt;containing characters other than letters, numbers, and underscores&lt;br&gt;should be considered carefully, as in some shells they cannot be&lt;br&gt;passed through the environment to a sub-&lt;code&gt;make&lt;/code&gt;&lt;br&gt;(see &lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Communicating Variables to a&lt;br&gt;Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;).  Variable names beginning with ‘&lt;samp&gt;.&lt;/samp&gt;’ and an&lt;br&gt;uppercase letter may be given special meaning in future versions of&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Variable names are case-sensitive.  The names ‘&lt;samp&gt;foo&lt;/samp&gt;’, ‘&lt;samp&gt;FOO&lt;/samp&gt;’,&lt;br&gt;and ‘&lt;samp&gt;Foo&lt;/samp&gt;’ all refer to different variables.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;It is traditional to use upper case letters in variable names, but we&lt;br&gt;recommend using lower case letters for variable names that serve internal&lt;br&gt;purposes in the makefile, and reserving upper case for parameters that&lt;br&gt;control implicit rules or for parameters that the user should override with&lt;br&gt;command options (see &lt;a href=&quot;#Overriding&quot;&gt;Overriding Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A few variables have names that are a single punctuation character or&lt;br&gt;just a few characters.  These are the &lt;em&gt;automatic variables&lt;/em&gt;, and&lt;br&gt;they have particular specialized uses.  See &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Reference&quot; accesskey=&quot;1&quot;&gt;Reference&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use the value of a variable.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Flavors&quot; accesskey=&quot;2&quot;&gt;Flavors&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variables come in two flavors.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Advanced&quot; accesskey=&quot;3&quot;&gt;Advanced&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Advanced features for referencing a variable.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Values&quot; accesskey=&quot;4&quot;&gt;Values&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;All the ways variables get their values.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Setting&quot; accesskey=&quot;5&quot;&gt;Setting&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to set a variable in the makefile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Appending&quot; accesskey=&quot;6&quot;&gt;Appending&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to append more text to the old value&lt;br&gt;                                  of a variable.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Override-Directive&quot; accesskey=&quot;7&quot;&gt;Override Directive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to set a variable in the makefile even if&lt;br&gt;                                  the user has set it with a command argument.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Multi_002dLine&quot; accesskey=&quot;8&quot;&gt;Multi-Line&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;An alternate way to set a variable&lt;br&gt;                                  to a multi-line string.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Undefine-Directive&quot; accesskey=&quot;9&quot;&gt;Undefine Directive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to undefine a variable so that it appears&lt;br&gt;                                  as if it was never set.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Environment&quot;&gt;Environment&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variable values can come from the environment.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Target_002dspecific&quot;&gt;Target-specific&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variable values can be defined on a per-target&lt;br&gt;                                  basis.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Pattern_002dspecific&quot;&gt;Pattern-specific&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Target-specific variable values can be applied&lt;br&gt;                                  to a group of targets that match a pattern.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Suppressing-Inheritance&quot;&gt;Suppressing Inheritance&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Suppress inheritance of variables.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variables with special meaning or behavior.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Flavors&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Flavors&lt;/a&gt;, Previous: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Using Variables&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Basics-of-Variable-References&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.1 Basics of Variable References&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-how-to-reference&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-reference-to-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_002c-in-variable-reference&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-dollar-sign-_0028_0024_0029_002c-in-variable-reference&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;To substitute a variable’s value, write a dollar sign followed by the name&lt;br&gt;of the variable in parentheses or braces: either ‘&lt;samp&gt;$(foo)&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;${foo}&lt;/samp&gt;’ is a valid reference to the variable &lt;code&gt;foo&lt;/code&gt;.  This&lt;br&gt;special significance of ‘&lt;samp&gt;$&lt;/samp&gt;’ is why you must write ‘&lt;samp&gt;$$&lt;/samp&gt;’ to have&lt;br&gt;the effect of a single dollar sign in a file name or recipe.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Variable references can be used in any context: targets, prerequisites,&lt;br&gt;recipes, most directives, and new variable values.  Here is an&lt;br&gt;example of a common case, where a variable holds the names of all the&lt;br&gt;object files in a program:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = program.o foo.o utils.o&lt;br&gt;program : $(objects)&lt;br&gt;        cc -o program $(objects)&lt;br&gt;&lt;br&gt;$(objects) : defs.h&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Variable references work by strict textual substitution.  Thus, the rule&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo = c&lt;br&gt;prog.o : prog.$(foo)&lt;br&gt;        $(foo)$(foo) -$(foo) prog.$(foo)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;could be used to compile a C program &lt;samp&gt;prog.c&lt;/samp&gt;.  Since spaces before&lt;br&gt;the variable value are ignored in variable assignments, the value of&lt;br&gt;&lt;code&gt;foo&lt;/code&gt; is precisely ‘&lt;samp&gt;c&lt;/samp&gt;’.  (Don’t actually write your makefiles&lt;br&gt;this way!)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A dollar sign followed by a character other than a dollar sign,&lt;br&gt;open-parenthesis or open-brace treats that single character as the&lt;br&gt;variable name.  Thus, you could reference the variable &lt;code&gt;x&lt;/code&gt; with&lt;br&gt;‘&lt;samp&gt;$x&lt;/samp&gt;’.  However, this practice is strongly discouraged, except in&lt;br&gt;the case of the automatic variables (see &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Flavors&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Advanced&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Advanced&lt;/a&gt;, Previous: &lt;a href=&quot;#Reference&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Reference&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-Two-Flavors-of-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.2 The Two Flavors of Variables&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-flavors-of-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursive-variable-expansion-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-flavors&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recursively-expanded-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-recursively-expanded&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;There are two ways that a variable in GNU &lt;code&gt;make&lt;/code&gt; can have a value;&lt;br&gt;we call them the two &lt;em&gt;flavors&lt;/em&gt; of variables.  The two flavors are&lt;br&gt;distinguished in how they are defined and in what they do when expanded.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_003d&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The first flavor of variable is a &lt;em&gt;recursively expanded&lt;/em&gt; variable.&lt;br&gt;Variables of this sort are defined by lines using ‘&lt;samp&gt;=&lt;/samp&gt;’&lt;br&gt;(see &lt;a href=&quot;#Setting&quot;&gt;Setting Variables&lt;/a&gt;) or by the &lt;code&gt;define&lt;/code&gt; directive&lt;br&gt;(see &lt;a href=&quot;#Multi_002dLine&quot;&gt;Defining Multi-Line Variables&lt;/a&gt;).  The value you specify&lt;br&gt;is installed verbatim; if it contains references to other variables,&lt;br&gt;these references are expanded whenever this variable is substituted (in&lt;br&gt;the course of expanding some other string).  When this happens, it is&lt;br&gt;called &lt;em&gt;recursive expansion&lt;/em&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo = $(bar)&lt;br&gt;bar = $(ugh)&lt;br&gt;ugh = Huh?&lt;br&gt;&lt;br&gt;all:;echo $(foo)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will echo ‘&lt;samp&gt;Huh?&lt;/samp&gt;’: ‘&lt;samp&gt;$(foo)&lt;/samp&gt;’ expands to ‘&lt;samp&gt;$(bar)&lt;/samp&gt;’ which&lt;br&gt;expands to ‘&lt;samp&gt;$(ugh)&lt;/samp&gt;’ which finally expands to ‘&lt;samp&gt;Huh?&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This flavor of variable is the only sort supported by most other&lt;br&gt;versions of &lt;code&gt;make&lt;/code&gt;.  It has its advantages and its disadvantages.&lt;br&gt;An advantage (most would say) is that:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;CFLAGS = $(include_dirs) -O&lt;br&gt;include_dirs = -Ifoo -Ibar&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will do what was intended: when ‘&lt;samp&gt;CFLAGS&lt;/samp&gt;’ is expanded in a recipe,&lt;br&gt;it will expand to ‘&lt;samp&gt;-Ifoo -Ibar -O&lt;/samp&gt;’.  A major disadvantage is that you&lt;br&gt;cannot append something on the end of a variable, as in&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;CFLAGS = $(CFLAGS) -O&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;because it will cause an infinite loop in the variable expansion.&lt;br&gt;(Actually &lt;code&gt;make&lt;/code&gt; detects the infinite loop and reports an error.)&lt;br&gt;&lt;a name=&quot;index-loops-in-variable-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-loops-in-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Another disadvantage is that any functions&lt;br&gt;(see &lt;a href=&quot;#Functions&quot;&gt;Functions for Transforming Text&lt;/a&gt;)&lt;br&gt;referenced in the definition will be executed every time the variable is&lt;br&gt;expanded.  This makes &lt;code&gt;make&lt;/code&gt; run slower; worse, it causes the&lt;br&gt;&lt;code&gt;wildcard&lt;/code&gt; and &lt;code&gt;shell&lt;/code&gt; functions to give unpredictable results&lt;br&gt;because you cannot easily control when they are called, or even how many&lt;br&gt;times.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To avoid all the problems and inconveniences of recursively expanded&lt;br&gt;variables, there is another flavor: simply expanded variables.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-simply-expanded-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-simply-expanded&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003a_003d&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003a_003a_003d&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;Simply expanded variables&lt;/em&gt; are defined by lines using ‘&lt;samp&gt;:=&lt;/samp&gt;’&lt;br&gt;or ‘&lt;samp&gt;::=&lt;/samp&gt;’ (see &lt;a href=&quot;#Setting&quot;&gt;Setting Variables&lt;/a&gt;).  Both forms are&lt;br&gt;equivalent in GNU &lt;code&gt;make&lt;/code&gt;; however only the ‘&lt;samp&gt;::=&lt;/samp&gt;’ form is&lt;br&gt;described by the POSIX standard (support for ‘&lt;samp&gt;::=&lt;/samp&gt;’ was added to&lt;br&gt;the POSIX standard in 2012, so older versions of &lt;code&gt;make&lt;/code&gt; won’t&lt;br&gt;accept this form either).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The value of a simply expanded variable is scanned&lt;br&gt;once and for all, expanding any references to other variables and&lt;br&gt;functions, when the variable is defined.  The actual value of the simply&lt;br&gt;expanded variable is the result of expanding the text that you write.&lt;br&gt;It does not contain any references to other variables; it contains their&lt;br&gt;values &lt;em&gt;as of the time this variable was defined&lt;/em&gt;.  Therefore,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;x := foo&lt;br&gt;y := $(x) bar&lt;br&gt;x := later&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;is equivalent to&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;y := foo bar&lt;br&gt;x := later&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When a simply expanded variable is referenced, its value is substituted&lt;br&gt;verbatim.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is a somewhat more complicated example, illustrating the use of&lt;br&gt;‘&lt;samp&gt;:=&lt;/samp&gt;’ in conjunction with the &lt;code&gt;shell&lt;/code&gt; function.&lt;br&gt;(See &lt;a href=&quot;#Shell-Function&quot;&gt;The &lt;code&gt;shell&lt;/code&gt; Function&lt;/a&gt;.)  This example&lt;br&gt;also shows use of the variable &lt;code&gt;MAKELEVEL&lt;/code&gt;, which is changed&lt;br&gt;when it is passed down from level to level.&lt;br&gt;(See &lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Communicating Variables to a&lt;br&gt;Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;, for information about &lt;code&gt;MAKELEVEL&lt;/code&gt;.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-MAKELEVEL-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-MAKE-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ifeq (0,${MAKELEVEL})&lt;br&gt;whoami    := $(shell whoami)&lt;br&gt;host-type := $(shell arch)&lt;br&gt;MAKE := ${MAKE} host-type=${host-type} whoami=${whoami}&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;An advantage of this use of ‘&lt;samp&gt;:=&lt;/samp&gt;’ is that a typical&lt;br&gt;‘descend into a directory’ recipe then looks like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;${subdirs}:&lt;br&gt;        ${MAKE} -C $@ all&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Simply expanded variables generally make complicated makefile programming&lt;br&gt;more predictable because they work like variables in most programming&lt;br&gt;languages.  They allow you to redefine a variable using its own value (or&lt;br&gt;its value processed in some way by one of the expansion functions) and to&lt;br&gt;use the expansion functions much more efficiently&lt;br&gt;(see &lt;a href=&quot;#Functions&quot;&gt;Functions for Transforming Text&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-spaces_002c-in-variable-values&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-whitespace_002c-in-variable-values&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-spaces-in-values&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;You can also use them to introduce controlled leading whitespace into&lt;br&gt;variable values.  Leading whitespace characters are discarded from your&lt;br&gt;input before substitution of variable references and function calls;&lt;br&gt;this means you can include leading spaces in a variable value by&lt;br&gt;protecting them with variable references, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;nullstring :=&lt;br&gt;space := $(nullstring) # end of the line&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here the value of the variable &lt;code&gt;space&lt;/code&gt; is precisely one space.  The&lt;br&gt;comment ‘&lt;samp&gt;#&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;line&lt;/samp&gt;’&lt;!-- /@w --&gt; is included here just for clarity.&lt;br&gt;Since trailing space characters are &lt;em&gt;not&lt;/em&gt; stripped from variable&lt;br&gt;values, just a space at the end of the line would have the same effect&lt;br&gt;(but be rather hard to read).  If you put whitespace at the end of a&lt;br&gt;variable value, it is a good idea to put a comment like that at the end&lt;br&gt;of the line to make your intent clear.  Conversely, if you do &lt;em&gt;not&lt;/em&gt;&lt;br&gt;want any whitespace characters at the end of your variable value, you&lt;br&gt;must remember not to put a random comment on the end of the line after&lt;br&gt;some whitespace, such as this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;dir := /foo/bar    # directory to put the frobs in&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here the value of the variable &lt;code&gt;dir&lt;/code&gt; is ‘&lt;samp&gt;/foo/bar&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/samp&gt;’&lt;!-- /@w --&gt;&lt;br&gt;(with four trailing spaces), which was probably not the intention.&lt;br&gt;(Imagine something like ‘&lt;samp&gt;$(dir)/file&lt;/samp&gt;’&lt;!-- /@w --&gt; with this definition!)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-conditional-variable-assignment&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-conditional-assignment&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003f_003d&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;There is another assignment operator for variables, ‘&lt;samp&gt;?=&lt;/samp&gt;’.  This&lt;br&gt;is called a conditional variable assignment operator, because it only&lt;br&gt;has an effect if the variable is not yet defined.  This statement:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;FOO ?= bar&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;is exactly equivalent to this&lt;br&gt;(see &lt;a href=&quot;#Origin-Function&quot;&gt;The &lt;code&gt;origin&lt;/code&gt; Function&lt;/a&gt;):&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ifeq ($(origin FOO), undefined)&lt;br&gt;  FOO = bar&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Note that a variable set to an empty value is still defined, so&lt;br&gt;‘&lt;samp&gt;?=&lt;/samp&gt;’ will not set that variable.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Advanced&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Values&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Values&lt;/a&gt;, Previous: &lt;a href=&quot;#Flavors&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Flavors&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Advanced-Features-for-Reference-to-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.3 Advanced Features for Reference to Variables&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-reference-to-variables-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This section describes some advanced features you can use to reference&lt;br&gt;variables in more flexible ways.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Substitution-Refs&quot; accesskey=&quot;1&quot;&gt;Substitution Refs&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Referencing a variable with&lt;br&gt;                                  substitutions on the value.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Computed-Names&quot; accesskey=&quot;2&quot;&gt;Computed Names&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Computing the name of the variable to refer to.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Substitution-Refs&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Computed-Names&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Computed Names&lt;/a&gt;, Previous: &lt;a href=&quot;#Advanced&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Advanced&lt;/a&gt;, Up: &lt;a href=&quot;#Advanced&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Advanced&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Substitution-References&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;6.3.1 Substitution References&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-modified-variable-reference&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-substitution-variable-reference&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-modified-reference&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-substitution-reference&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-substituting-suffix-in&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-suffix_002c-substituting-in-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;A &lt;em&gt;substitution reference&lt;/em&gt; substitutes the value of a variable with&lt;br&gt;alterations that you specify.  It has the form&lt;br&gt;‘&lt;samp&gt;$(&lt;var&gt;var&lt;/var&gt;:&lt;var&gt;a&lt;/var&gt;=&lt;var&gt;b&lt;/var&gt;)&lt;/samp&gt;’ (or&lt;br&gt;‘&lt;samp&gt;${&lt;var&gt;var&lt;/var&gt;:&lt;var&gt;a&lt;/var&gt;=&lt;var&gt;b&lt;/var&gt;}&lt;/samp&gt;’) and its meaning is to take the value&lt;br&gt;of the variable &lt;var&gt;var&lt;/var&gt;, replace every &lt;var&gt;a&lt;/var&gt; at the end of a word with&lt;br&gt;&lt;var&gt;b&lt;/var&gt; in that value, and substitute the resulting string.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When we say “at the end of a word”, we mean that &lt;var&gt;a&lt;/var&gt; must appear&lt;br&gt;either followed by whitespace or at the end of the value in order to be&lt;br&gt;replaced; other occurrences of &lt;var&gt;a&lt;/var&gt; in the value are unaltered.  For&lt;br&gt;example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo := a.o b.o c.o&lt;br&gt;bar := $(foo:.o=.c)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;sets ‘&lt;samp&gt;bar&lt;/samp&gt;’ to ‘&lt;samp&gt;a.c b.c c.c&lt;/samp&gt;’.  See &lt;a href=&quot;#Setting&quot;&gt;Setting Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A substitution reference is actually an abbreviation for use of the&lt;br&gt;&lt;code&gt;patsubst&lt;/code&gt; expansion function (see &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;).  We provide&lt;br&gt;substitution references as well as &lt;code&gt;patsubst&lt;/code&gt; for compatibility with&lt;br&gt;other implementations of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-patsubst&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Another type of substitution reference lets you use the full power of&lt;br&gt;the &lt;code&gt;patsubst&lt;/code&gt; function.  It has the same form&lt;br&gt;‘&lt;samp&gt;$(&lt;var&gt;var&lt;/var&gt;:&lt;var&gt;a&lt;/var&gt;=&lt;var&gt;b&lt;/var&gt;)&lt;/samp&gt;’ described above, except that now&lt;br&gt;&lt;var&gt;a&lt;/var&gt; must contain a single ‘&lt;samp&gt;%&lt;/samp&gt;’ character.  This case is&lt;br&gt;equivalent to ‘&lt;samp&gt;$(patsubst &lt;var&gt;a&lt;/var&gt;,&lt;var&gt;b&lt;/var&gt;,$(&lt;var&gt;var&lt;/var&gt;))&lt;/samp&gt;’.&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;,&lt;br&gt;for a description of the &lt;code&gt;patsubst&lt;/code&gt; function.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;For example:&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;foo := a.o b.o c.o&lt;br&gt;bar := $(foo:%.o=%.c)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;sets ‘&lt;samp&gt;bar&lt;/samp&gt;’ to ‘&lt;samp&gt;a.c b.c c.c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Computed-Names&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Substitution-Refs&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Substitution Refs&lt;/a&gt;, Up: &lt;a href=&quot;#Advanced&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Advanced&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Computed-Variable-Names&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;6.3.2 Computed Variable Names&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-nested-variable-reference&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-computed-variable-name&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-computed-names&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-nested-references&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-_0024-in-name&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_002c-in-variable-name&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-dollar-sign-_0028_0024_0029_002c-in-variable-name&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Computed variable names are a complicated concept needed only for&lt;br&gt;sophisticated makefile programming.  For most purposes you need not&lt;br&gt;consider them, except to know that making a variable with a dollar sign&lt;br&gt;in its name might have strange results.  However, if you are the type&lt;br&gt;that wants to understand everything, or you are actually interested in&lt;br&gt;what they do, read on.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Variables may be referenced inside the name of a variable.  This is&lt;br&gt;called a &lt;em&gt;computed variable name&lt;/em&gt; or a &lt;em&gt;nested variable&lt;br&gt;reference&lt;/em&gt;.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;x = y&lt;br&gt;y = z&lt;br&gt;a := $($(x))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;defines &lt;code&gt;a&lt;/code&gt; as ‘&lt;samp&gt;z&lt;/samp&gt;’: the ‘&lt;samp&gt;$(x)&lt;/samp&gt;’ inside ‘&lt;samp&gt;$($(x))&lt;/samp&gt;’ expands&lt;br&gt;to ‘&lt;samp&gt;y&lt;/samp&gt;’, so ‘&lt;samp&gt;$($(x))&lt;/samp&gt;’ expands to ‘&lt;samp&gt;$(y)&lt;/samp&gt;’ which in turn expands&lt;br&gt;to ‘&lt;samp&gt;z&lt;/samp&gt;’.  Here the name of the variable to reference is not stated&lt;br&gt;explicitly; it is computed by expansion of ‘&lt;samp&gt;$(x)&lt;/samp&gt;’.  The reference&lt;br&gt;‘&lt;samp&gt;$(x)&lt;/samp&gt;’ here is nested within the outer variable reference.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The previous example shows two levels of nesting, but any number of levels&lt;br&gt;is possible.  For example, here are three levels:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;x = y&lt;br&gt;y = z&lt;br&gt;z = u&lt;br&gt;a := $($($(x)))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here the innermost ‘&lt;samp&gt;$(x)&lt;/samp&gt;’ expands to ‘&lt;samp&gt;y&lt;/samp&gt;’, so ‘&lt;samp&gt;$($(x))&lt;/samp&gt;’&lt;br&gt;expands to ‘&lt;samp&gt;$(y)&lt;/samp&gt;’ which in turn expands to ‘&lt;samp&gt;z&lt;/samp&gt;’; now we have&lt;br&gt;‘&lt;samp&gt;$(z)&lt;/samp&gt;’, which becomes ‘&lt;samp&gt;u&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;References to recursively-expanded variables within a variable name are&lt;br&gt;re-expanded in the usual fashion.  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;x = $(y)&lt;br&gt;y = z&lt;br&gt;z = Hello&lt;br&gt;a := $($(x))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;defines &lt;code&gt;a&lt;/code&gt; as ‘&lt;samp&gt;Hello&lt;/samp&gt;’: ‘&lt;samp&gt;$($(x))&lt;/samp&gt;’ becomes ‘&lt;samp&gt;$($(y))&lt;/samp&gt;’&lt;br&gt;which becomes ‘&lt;samp&gt;$(z)&lt;/samp&gt;’ which becomes ‘&lt;samp&gt;Hello&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Nested variable references can also contain modified references and&lt;br&gt;function invocations (see &lt;a href=&quot;#Functions&quot;&gt;Functions for Transforming Text&lt;/a&gt;),&lt;br&gt;just like any other reference.&lt;br&gt;For example, using the &lt;code&gt;subst&lt;/code&gt; function&lt;br&gt;(see &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;):&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;x = variable1&lt;br&gt;variable2 := Hello&lt;br&gt;y = $(subst 1,2,$(x))&lt;br&gt;z = y&lt;br&gt;a := $($($(z)))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;eventually defines &lt;code&gt;a&lt;/code&gt; as ‘&lt;samp&gt;Hello&lt;/samp&gt;’.  It is doubtful that anyone&lt;br&gt;would ever want to write a nested reference as convoluted as this one, but&lt;br&gt;it works: ‘&lt;samp&gt;$($($(z)))&lt;/samp&gt;’ expands to ‘&lt;samp&gt;$($(y))&lt;/samp&gt;’ which becomes&lt;br&gt;‘&lt;samp&gt;$($(subst 1,2,$(x)))&lt;/samp&gt;’.  This gets the value ‘&lt;samp&gt;variable1&lt;/samp&gt;’ from&lt;br&gt;&lt;code&gt;x&lt;/code&gt; and changes it by substitution to ‘&lt;samp&gt;variable2&lt;/samp&gt;’, so that the&lt;br&gt;entire string becomes ‘&lt;samp&gt;$(variable2)&lt;/samp&gt;’, a simple variable reference&lt;br&gt;whose value is ‘&lt;samp&gt;Hello&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A computed variable name need not consist entirely of a single variable&lt;br&gt;reference.  It can contain several variable references, as well as some&lt;br&gt;invariant text.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;a_dirs := dira dirb&lt;br&gt;1_dirs := dir1 dir2&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;a_files := filea fileb&lt;br&gt;1_files := file1 file2&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;ifeq “$(use_a)” “yes”&lt;br&gt;a1 := a&lt;br&gt;else&lt;br&gt;a1 := 1&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;ifeq “$(use&lt;em&gt;dirs)” “yes”&lt;br&gt;df := dirs&lt;br&gt;else&lt;br&gt;df := files&lt;br&gt;endif&lt;br&gt;&lt;br&gt;dirs := $($(a1)&lt;/em&gt;$(df))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will give &lt;code&gt;dirs&lt;/code&gt; the same value as &lt;code&gt;a_dirs&lt;/code&gt;, &lt;code&gt;1_dirs&lt;/code&gt;,&lt;br&gt;&lt;code&gt;a_files&lt;/code&gt; or &lt;code&gt;1_files&lt;/code&gt; depending on the settings of &lt;code&gt;use_a&lt;/code&gt;&lt;br&gt;and &lt;code&gt;use_dirs&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Computed variable names can also be used in substitution references:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;a_objects := a.o b.o c.o&lt;br&gt;1_objects := 1.o 2.o 3.o&lt;br&gt;&lt;br&gt;sources := $($(a1)_objects:.o=.c)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;defines &lt;code&gt;sources&lt;/code&gt; as either ‘&lt;samp&gt;a.c b.c c.c&lt;/samp&gt;’ or ‘&lt;samp&gt;1.c 2.c 3.c&lt;/samp&gt;’,&lt;br&gt;depending on the value of &lt;code&gt;a1&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The only restriction on this sort of use of nested variable references&lt;br&gt;is that they cannot specify part of the name of a function to be called.&lt;br&gt;This is because the test for a recognized function name is done before&lt;br&gt;the expansion of nested references.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ifdef do_sort&lt;br&gt;func := sort&lt;br&gt;else&lt;br&gt;func := strip&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;bar := a d b g q c&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;foo := $($(func) $(bar))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;attempts to give ‘&lt;samp&gt;foo&lt;/samp&gt;’ the value of the variable ‘&lt;samp&gt;sort a d b g&lt;br&gt;q c&lt;/samp&gt;’ or ‘&lt;samp&gt;strip a d b g q c&lt;/samp&gt;’, rather than giving ‘&lt;samp&gt;a d b g q c&lt;/samp&gt;’&lt;br&gt;as the argument to either the &lt;code&gt;sort&lt;/code&gt; or the &lt;code&gt;strip&lt;/code&gt; function.&lt;br&gt;This restriction could be removed in the future if that change is shown&lt;br&gt;to be a good idea.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can also use computed variable names in the left-hand side of a&lt;br&gt;variable assignment, or in a &lt;code&gt;define&lt;/code&gt; directive, as in:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;dir = foo&lt;br&gt;$(dir)_sources := $(wildcard $(dir)/&lt;em&gt;.c)&lt;br&gt;define $(dir)_print =&lt;br&gt;lpr $($(dir)_sources)&lt;br&gt;endef&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This example defines the variables ‘&lt;samp&gt;dir&lt;/samp&gt;’, ‘&lt;samp&gt;foo_sources&lt;/samp&gt;’, and&lt;br&gt;‘&lt;samp&gt;foo_print&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Note that &lt;em&gt;nested variable references&lt;/em&gt; are quite different from&lt;br&gt;&lt;em&gt;recursively expanded variables&lt;/em&gt;&lt;br&gt;(see &lt;a href=&quot;#Flavors&quot;&gt;The Two Flavors of Variables&lt;/a&gt;), though both are&lt;br&gt;used together in complex ways when doing makefile programming.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Values&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Setting&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Setting&lt;/a&gt;, Previous: &lt;a href=&quot;#Advanced&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Advanced&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;How-Variables-Get-Their-Values&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.4 How Variables Get Their Values&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-how-they-get-their-values&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-value_002c-how-a-variable-gets-it&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Variables can get values in several different ways:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; You can specify an overriding value when you run &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;See &lt;a href=&quot;#Overriding&quot;&gt;Overriding Variables&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; You can specify a value in the makefile, either&lt;br&gt;with an assignment (see &lt;a href=&quot;#Setting&quot;&gt;Setting Variables&lt;/a&gt;) or with a&lt;br&gt;verbatim definition (see &lt;a href=&quot;#Multi_002dLine&quot;&gt;Defining Multi-Line Variables&lt;/a&gt;).&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Variables in the environment become &lt;code&gt;make&lt;/code&gt; variables.&lt;br&gt;See &lt;a href=&quot;#Environment&quot;&gt;Variables from the Environment&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Several &lt;em&gt;automatic&lt;/em&gt; variables are given new values for each rule.&lt;br&gt;Each of these has a single conventional use.&lt;br&gt;See &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Several variables have constant initial values.&lt;br&gt;See &lt;a href=&quot;#Implicit-Variables&quot;&gt;Variables Used by Implicit Rules&lt;/a&gt;.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Setting&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Appending&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Appending&lt;/a&gt;, Previous: &lt;a href=&quot;#Values&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Values&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Setting-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.5 Setting Variables&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-setting-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-setting&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003d-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003a_003d-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003a_003a_003d-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003f_003d-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0021_003d&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;To set a variable from the makefile, write a line starting with the&lt;br&gt;variable name followed by ‘&lt;samp&gt;=&lt;/samp&gt;’, ‘&lt;samp&gt;:=&lt;/samp&gt;’, or ‘&lt;samp&gt;::=&lt;/samp&gt;’.  Whatever&lt;br&gt;follows the ‘&lt;samp&gt;=&lt;/samp&gt;’, ‘&lt;samp&gt;:=&lt;/samp&gt;’, or ‘&lt;samp&gt;::=&lt;/samp&gt;’ on the line becomes the&lt;br&gt;value.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = main.o foo.o bar.o utils.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;defines a variable named &lt;code&gt;objects&lt;/code&gt;.  Whitespace around the variable&lt;br&gt;name and immediately after the ‘&lt;samp&gt;=&lt;/samp&gt;’ is ignored.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Variables defined with ‘&lt;samp&gt;=&lt;/samp&gt;’ are &lt;em&gt;recursively expanded&lt;/em&gt;&lt;br&gt;variables.  Variables defined with ‘&lt;samp&gt;:=&lt;/samp&gt;’ or ‘&lt;samp&gt;::=&lt;/samp&gt;’ are&lt;br&gt;&lt;em&gt;simply expanded&lt;/em&gt; variables; these definitions can contain&lt;br&gt;variable references which will be expanded before the definition is&lt;br&gt;made.  See &lt;a href=&quot;#Flavors&quot;&gt;The Two Flavors of Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The variable name may contain function and variable references, which&lt;br&gt;are expanded when the line is read to find the actual variable name to use.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;There is no limit on the length of the value of a variable except the&lt;br&gt;amount of memory on the computer.  You can split the value of a&lt;br&gt;variable into multiple physical lines for readability&lt;br&gt;(see &lt;a href=&quot;#Splitting-Lines&quot;&gt;Splitting Long Lines&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Most variable names are considered to have the empty string as a value if&lt;br&gt;you have never set them.  Several variables have built-in initial values&lt;br&gt;that are not empty, but you can set them in the usual ways&lt;br&gt;(see &lt;a href=&quot;#Implicit-Variables&quot;&gt;Variables Used by Implicit Rules&lt;/a&gt;).&lt;br&gt;Several special variables are set&lt;br&gt;automatically to a new value for each rule; these are called the&lt;br&gt;&lt;em&gt;automatic&lt;/em&gt; variables (see &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you’d like a variable to be set to a value only if it’s not already&lt;br&gt;set, then you can use the shorthand operator ‘&lt;samp&gt;?=&lt;/samp&gt;’ instead of&lt;br&gt;‘&lt;samp&gt;=&lt;/samp&gt;’.  These two settings of the variable ‘&lt;samp&gt;FOO&lt;/samp&gt;’ are identical&lt;br&gt;(see &lt;a href=&quot;#Origin-Function&quot;&gt;The &lt;code&gt;origin&lt;/code&gt; Function&lt;/a&gt;):&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;FOO ?= bar&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;and&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ifeq ($(origin FOO), undefined)&lt;br&gt;FOO = bar&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The shell assignment operator ‘&lt;samp&gt;!=&lt;/samp&gt;’ can be used to execute a&lt;br&gt;shell script and set a variable to its output.  This operator first&lt;br&gt;evaluates the right-hand side, then passes that result to the shell&lt;br&gt;for execution.  If the result of the execution ends in a newline, that&lt;br&gt;one newline is removed; all other newlines are replaced by spaces.&lt;br&gt;The resulting string is then placed into the named&lt;br&gt;recursively-expanded variable.  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;hash != printf ‘\043’&lt;br&gt;file_list != find . -name ‘.c’&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If the result of the execution could produce a &lt;code&gt;$&lt;/code&gt;, and you don’t&lt;br&gt;intend what follows that to be interpreted as a make variable or&lt;br&gt;function reference, then you must replace every &lt;code&gt;$&lt;/code&gt; with&lt;br&gt;&lt;code&gt;$$&lt;/code&gt; as part of the execution.  Alternatively, you can set a&lt;br&gt;simply expanded variable to the result of running a program using the&lt;br&gt;&lt;code&gt;shell&lt;/code&gt; function call.  See &lt;a href=&quot;#Shell-Function&quot;&gt;The &lt;code&gt;shell&lt;/code&gt;&lt;br&gt;Function&lt;/a&gt;.  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;hash := $(shell printf ‘\043’)&lt;br&gt;var := $(shell find . -name “*.c”)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;As with the &lt;code&gt;shell&lt;/code&gt; function, the exit status of the just-invoked&lt;br&gt;shell script is stored in the &lt;code&gt;.SHELLSTATUS&lt;/code&gt; variable.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Appending&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Override-Directive&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Override Directive&lt;/a&gt;, Previous: &lt;a href=&quot;#Setting&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Setting&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Appending-More-Text-to-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.6 Appending More Text to Variables&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-_002b_003d&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-appending-to-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-appending-to&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Often it is useful to add more text to the value of a variable already defined.&lt;br&gt;You do this with a line containing ‘&lt;samp&gt;+=&lt;/samp&gt;’, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects += another.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This takes the value of the variable &lt;code&gt;objects&lt;/code&gt;, and adds the text&lt;br&gt;‘&lt;samp&gt;another.o&lt;/samp&gt;’ to it (preceded by a single space).  Thus:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = main.o foo.o bar.o utils.o&lt;br&gt;objects += another.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;sets &lt;code&gt;objects&lt;/code&gt; to ‘&lt;samp&gt;main.o foo.o bar.o utils.o another.o&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Using ‘&lt;samp&gt;+=&lt;/samp&gt;’ is similar to:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = main.o foo.o bar.o utils.o&lt;br&gt;objects := $(objects) another.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;but differs in ways that become important when you use more complex values.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When the variable in question has not been defined before, ‘&lt;samp&gt;+=&lt;/samp&gt;’&lt;br&gt;acts just like normal ‘&lt;samp&gt;=&lt;/samp&gt;’: it defines a recursively-expanded&lt;br&gt;variable.  However, when there &lt;em&gt;is&lt;/em&gt; a previous definition, exactly&lt;br&gt;what ‘&lt;samp&gt;+=&lt;/samp&gt;’ does depends on what flavor of variable you defined&lt;br&gt;originally.  See &lt;a href=&quot;#Flavors&quot;&gt;The Two Flavors of Variables&lt;/a&gt;, for an&lt;br&gt;explanation of the two flavors of variables.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When you add to a variable’s value with ‘&lt;samp&gt;+=&lt;/samp&gt;’, &lt;code&gt;make&lt;/code&gt; acts&lt;br&gt;essentially as if you had included the extra text in the initial&lt;br&gt;definition of the variable.  If you defined it first with ‘&lt;samp&gt;:=&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;::=&lt;/samp&gt;’, making it a simply-expanded variable, ‘&lt;samp&gt;+=&lt;/samp&gt;’ adds to&lt;br&gt;that simply-expanded definition, and expands the new text before&lt;br&gt;appending it to the old value just as ‘&lt;samp&gt;:=&lt;/samp&gt;’ does (see&lt;br&gt;&lt;a href=&quot;#Setting&quot;&gt;Setting Variables&lt;/a&gt;, for a full explanation of&lt;br&gt;‘&lt;samp&gt;:=&lt;/samp&gt;’ or ‘&lt;samp&gt;::=&lt;/samp&gt;’).  In fact,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;variable := value&lt;br&gt;variable += more&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;is exactly equivalent to:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;variable := value&lt;br&gt;variable := $(variable) more&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;On the other hand, when you use ‘&lt;samp&gt;+=&lt;/samp&gt;’ with a variable that you defined&lt;br&gt;first to be recursively-expanded using plain ‘&lt;samp&gt;=&lt;/samp&gt;’, &lt;code&gt;make&lt;/code&gt; does&lt;br&gt;something a bit different.  Recall that when you define a&lt;br&gt;recursively-expanded variable, &lt;code&gt;make&lt;/code&gt; does not expand the value you set&lt;br&gt;for variable and function references immediately.  Instead it stores the text&lt;br&gt;verbatim, and saves these variable and function references to be expanded&lt;br&gt;later, when you refer to the new variable (see &lt;a href=&quot;#Flavors&quot;&gt;The Two Flavors&lt;br&gt;of Variables&lt;/a&gt;).  When you use ‘&lt;samp&gt;+=&lt;/samp&gt;’ on a recursively-expanded variable,&lt;br&gt;it is this unexpanded text to which &lt;code&gt;make&lt;/code&gt; appends the new text you&lt;br&gt;specify.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;variable = value&lt;br&gt;variable += more&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;is roughly equivalent to:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;temp = value&lt;br&gt;variable = $(temp) more&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;except that of course it never defines a variable called &lt;code&gt;temp&lt;/code&gt;.&lt;br&gt;The importance of this comes when the variable’s old value contains&lt;br&gt;variable references.  Take this common example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;CFLAGS = $(includes) -O&lt;br&gt;…&lt;br&gt;CFLAGS += -pg # enable profiling&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The first line defines the &lt;code&gt;CFLAGS&lt;/code&gt; variable with a reference to another&lt;br&gt;variable, &lt;code&gt;includes&lt;/code&gt;.  (&lt;code&gt;CFLAGS&lt;/code&gt; is used by the rules for C&lt;br&gt;compilation; see &lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Built-In Rules&lt;/a&gt;.)&lt;br&gt;Using ‘&lt;samp&gt;=&lt;/samp&gt;’ for the definition makes &lt;code&gt;CFLAGS&lt;/code&gt; a recursively-expanded&lt;br&gt;variable, meaning ‘&lt;samp&gt;$(includes)&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-O&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; is &lt;em&gt;not&lt;/em&gt; expanded when&lt;br&gt;&lt;code&gt;make&lt;/code&gt; processes the definition of &lt;code&gt;CFLAGS&lt;/code&gt;.  Thus, &lt;code&gt;includes&lt;/code&gt;&lt;br&gt;need not be defined yet for its value to take effect.  It only has to be&lt;br&gt;defined before any reference to &lt;code&gt;CFLAGS&lt;/code&gt;.  If we tried to append to the&lt;br&gt;value of &lt;code&gt;CFLAGS&lt;/code&gt; without using ‘&lt;samp&gt;+=&lt;/samp&gt;’, we might do it like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;CFLAGS := $(CFLAGS) -pg # enable profiling&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This is pretty close, but not quite what we want.  Using ‘&lt;samp&gt;:=&lt;/samp&gt;’&lt;br&gt;redefines &lt;code&gt;CFLAGS&lt;/code&gt; as a simply-expanded variable; this means&lt;br&gt;&lt;code&gt;make&lt;/code&gt; expands the text ‘&lt;samp&gt;$(CFLAGS)&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-pg&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; before setting the&lt;br&gt;variable.  If &lt;code&gt;includes&lt;/code&gt; is not yet defined, we get ‘&lt;samp&gt;&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-O&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-pg&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt;, and a later definition of &lt;code&gt;includes&lt;/code&gt; will have no effect.&lt;br&gt;Conversely, by using ‘&lt;samp&gt;+=&lt;/samp&gt;’ we set &lt;code&gt;CFLAGS&lt;/code&gt; to the&lt;br&gt;&lt;em&gt;unexpanded&lt;/em&gt; value ‘&lt;samp&gt;$(includes)&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-O&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-pg&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt;.  Thus we preserve&lt;br&gt;the reference to &lt;code&gt;includes&lt;/code&gt;, so if that variable gets defined at&lt;br&gt;any later point, a reference like ‘&lt;samp&gt;$(CFLAGS)&lt;/samp&gt;’ still uses its&lt;br&gt;value.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Override-Directive&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Multi_002dLine&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Multi-Line&lt;/a&gt;, Previous: &lt;a href=&quot;#Appending&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Appending&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-override-Directive&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.7 The &lt;code&gt;override&lt;/code&gt; Directive&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-override&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-overriding-with-override&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-overriding&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If a variable has been set with a command argument&lt;br&gt;(see &lt;a href=&quot;#Overriding&quot;&gt;Overriding Variables&lt;/a&gt;),&lt;br&gt;then ordinary assignments in the makefile are ignored.  If you want to set&lt;br&gt;the variable in the makefile even though it was set with a command&lt;br&gt;argument, you can use an &lt;code&gt;override&lt;/code&gt; directive, which is a line that&lt;br&gt;looks like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;override &lt;var&gt;variable&lt;/var&gt; = &lt;var&gt;value&lt;/var&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;or&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;override &lt;var&gt;variable&lt;/var&gt; := &lt;var&gt;value&lt;/var&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;To append more text to a variable defined on the command line, use:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;override &lt;var&gt;variable&lt;/var&gt; += &lt;var&gt;more text&lt;/var&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;See &lt;a href=&quot;#Appending&quot;&gt;Appending More Text to Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Variable assignments marked with the &lt;code&gt;override&lt;/code&gt; flag have a&lt;br&gt;higher priority than all other assignments, except another&lt;br&gt;&lt;code&gt;override&lt;/code&gt;.  Subsequent assignments or appends to this variable&lt;br&gt;which are not marked &lt;code&gt;override&lt;/code&gt; will be ignored.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;override&lt;/code&gt; directive was not invented for escalation in the war&lt;br&gt;between makefiles and command arguments.  It was invented so you can alter&lt;br&gt;and add to values that the user specifies with command arguments.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, suppose you always want the ‘&lt;samp&gt;-g&lt;/samp&gt;’ switch when you run the&lt;br&gt;C compiler, but you would like to allow the user to specify the other&lt;br&gt;switches with a command argument just as usual.  You could use this&lt;br&gt;&lt;code&gt;override&lt;/code&gt; directive:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;override CFLAGS += -g&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;You can also use &lt;code&gt;override&lt;/code&gt; directives with &lt;code&gt;define&lt;/code&gt; directives.&lt;br&gt;This is done as you might expect:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;override define foo =&lt;br&gt;bar&lt;br&gt;endef&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;See &lt;a href=&quot;#Multi_002dLine&quot;&gt;Defining Multi-Line Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Multi_002dLine&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Undefine-Directive&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Undefine Directive&lt;/a&gt;, Previous: &lt;a href=&quot;#Override-Directive&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Override Directive&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Defining-Multi_002dLine-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.8 Defining Multi-Line Variables&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-define&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-endef&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-multi_002dline-variable-definition&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-multi_002dline&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-verbatim-variable-definition&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-defining-variables-verbatim&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-defining-verbatim&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Another way to set the value of a variable is to use the &lt;code&gt;define&lt;/code&gt;&lt;br&gt;directive.  This directive has an unusual syntax which allows newline&lt;br&gt;characters to be included in the value, which is convenient for&lt;br&gt;defining both canned sequences of commands (see &lt;a href=&quot;#Canned-Recipes&quot;&gt;Defining Canned Recipes&lt;/a&gt;), and also sections of makefile syntax to&lt;br&gt;use with &lt;code&gt;eval&lt;/code&gt; (see &lt;a href=&quot;#Eval-Function&quot;&gt;Eval Function&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;define&lt;/code&gt; directive is followed on the same line by the name&lt;br&gt;of the variable being defined and an (optional) assignment operator,&lt;br&gt;and nothing more.  The value to give the variable appears on the&lt;br&gt;following lines.  The end of the value is marked by a line containing&lt;br&gt;just the word &lt;code&gt;endef&lt;/code&gt;.  Aside from this difference in syntax,&lt;br&gt;&lt;code&gt;define&lt;/code&gt; works just like any other variable definition.  The&lt;br&gt;variable name may contain function and variable references, which are&lt;br&gt;expanded when the directive is read to find the actual variable name&lt;br&gt;to use.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You may omit the variable assignment operator if you prefer.  If&lt;br&gt;omitted, &lt;code&gt;make&lt;/code&gt; assumes it to be ‘&lt;samp&gt;=&lt;/samp&gt;’ and creates a&lt;br&gt;recursively-expanded variable (see &lt;a href=&quot;#Flavors&quot;&gt;The Two Flavors of Variables&lt;/a&gt;).&lt;br&gt;When using a ‘&lt;samp&gt;+=&lt;/samp&gt;’ operator, the value is appended to the previous&lt;br&gt;value as with any other append operation: with a single space&lt;br&gt;separating the old and new values.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You may nest &lt;code&gt;define&lt;/code&gt; directives: &lt;code&gt;make&lt;/code&gt; will keep track of&lt;br&gt;nested directives and report an error if they are not all properly&lt;br&gt;closed with &lt;code&gt;endef&lt;/code&gt;.  Note that lines beginning with the recipe&lt;br&gt;prefix character are considered part of a recipe, so any &lt;code&gt;define&lt;/code&gt;&lt;br&gt;or &lt;code&gt;endef&lt;/code&gt; strings appearing on such a line will not be&lt;br&gt;considered &lt;code&gt;make&lt;/code&gt; directives.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;define two-lines =&lt;br&gt;echo foo&lt;br&gt;echo $(bar)&lt;br&gt;endef&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The value in an ordinary assignment cannot contain a newline; but the&lt;br&gt;newlines that separate the lines of the value in a &lt;code&gt;define&lt;/code&gt; become&lt;br&gt;part of the variable’s value (except for the final newline which precedes&lt;br&gt;the &lt;code&gt;endef&lt;/code&gt; and is not considered part of the value).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When used in a recipe, the previous example is functionally equivalent&lt;br&gt;to this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;two-lines = echo foo; echo $(bar)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;since two commands separated by semicolon behave much like two separate&lt;br&gt;shell commands.  However, note that using two separate lines means&lt;br&gt;&lt;code&gt;make&lt;/code&gt; will invoke the shell twice, running an independent sub-shell&lt;br&gt;for each line.  See &lt;a href=&quot;#Execution&quot;&gt;Recipe Execution&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you want variable definitions made with &lt;code&gt;define&lt;/code&gt; to take&lt;br&gt;precedence over command-line variable definitions, you can use the&lt;br&gt;&lt;code&gt;override&lt;/code&gt; directive together with &lt;code&gt;define&lt;/code&gt;:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;override define two-lines =&lt;br&gt;foo&lt;br&gt;$(bar)&lt;br&gt;endef&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;See &lt;a href=&quot;#Override-Directive&quot;&gt;The &lt;code&gt;override&lt;/code&gt; Directive&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Undefine-Directive&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Environment&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Environment&lt;/a&gt;, Previous: &lt;a href=&quot;#Multi_002dLine&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Multi-Line&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Undefining-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.9 Undefining Variables&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-undefine&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-undefining-variable&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you want to clear a variable, setting its value to empty is usually&lt;br&gt;sufficient. Expanding such a variable will yield the same result (empty&lt;br&gt;string) regardless of whether it was set or not. However, if you are&lt;br&gt;using the &lt;code&gt;flavor&lt;/code&gt; (see &lt;a href=&quot;#Flavor-Function&quot;&gt;Flavor Function&lt;/a&gt;) and&lt;br&gt;&lt;code&gt;origin&lt;/code&gt; (see &lt;a href=&quot;#Origin-Function&quot;&gt;Origin Function&lt;/a&gt;) functions, there is a difference&lt;br&gt;between a variable that was never set and a variable with an empty value.&lt;br&gt;In such situations you may want to use the &lt;code&gt;undefine&lt;/code&gt; directive to&lt;br&gt;make a variable appear as if it was never set. For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo := foo&lt;br&gt;bar = bar&lt;br&gt;&lt;br&gt;undefine foo&lt;br&gt;undefine bar&lt;br&gt;&lt;br&gt;$(info $(origin foo))&lt;br&gt;$(info $(flavor bar))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This example will print “undefined” for both variables.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you want to undefine a command-line variable definition, you can use&lt;br&gt;the &lt;code&gt;override&lt;/code&gt; directive together with &lt;code&gt;undefine&lt;/code&gt;, similar to&lt;br&gt;how this is done for variable definitions:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;override undefine CFLAGS&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Environment&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Target_002dspecific&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Target-specific&lt;/a&gt;, Previous: &lt;a href=&quot;#Undefine-Directive&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Undefine Directive&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Variables-from-the-Environment&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.10 Variables from the Environment&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-environment-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-environment&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Variables in &lt;code&gt;make&lt;/code&gt; can come from the environment in which&lt;br&gt;&lt;code&gt;make&lt;/code&gt; is run.  Every environment variable that &lt;code&gt;make&lt;/code&gt; sees&lt;br&gt;when it starts up is transformed into a &lt;code&gt;make&lt;/code&gt; variable with the&lt;br&gt;same name and value.  However, an explicit assignment in the makefile,&lt;br&gt;or with a command argument, overrides the environment.  (If the&lt;br&gt;‘&lt;samp&gt;-e&lt;/samp&gt;’ flag is specified, then values from the environment override&lt;br&gt;assignments in the makefile.  See &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of&lt;br&gt;Options&lt;/a&gt;.  But this is not recommended practice.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Thus, by setting the variable &lt;code&gt;CFLAGS&lt;/code&gt; in your environment, you can&lt;br&gt;cause all C compilations in most makefiles to use the compiler switches you&lt;br&gt;prefer.  This is safe for variables with standard or conventional meanings&lt;br&gt;because you know that no makefile will use them for other things.  (Note&lt;br&gt;this is not totally reliable; some makefiles set &lt;code&gt;CFLAGS&lt;/code&gt; explicitly&lt;br&gt;and therefore are not affected by the value in the environment.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When &lt;code&gt;make&lt;/code&gt; runs a recipe, variables defined in the&lt;br&gt;makefile are placed into the environment of each shell.  This allows&lt;br&gt;you to pass values to sub-&lt;code&gt;make&lt;/code&gt; invocations (see &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;).  By default, only variables that came&lt;br&gt;from the environment or the command line are passed to recursive&lt;br&gt;invocations.  You can use the &lt;code&gt;export&lt;/code&gt; directive to pass other&lt;br&gt;variables.  See &lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Communicating Variables to a&lt;br&gt;Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;, for full details.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Other use of variables from the environment is not recommended.  It is not&lt;br&gt;wise for makefiles to depend for their functioning on environment variables&lt;br&gt;set up outside their control, since this would cause different users to get&lt;br&gt;different results from the same makefile.  This is against the whole&lt;br&gt;purpose of most makefiles.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-SHELL_002c-import-from-environment&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Such problems would be especially likely with the variable&lt;br&gt;&lt;code&gt;SHELL&lt;/code&gt;, which is normally present in the environment to specify&lt;br&gt;the user’s choice of interactive shell.  It would be very undesirable&lt;br&gt;for this choice to affect &lt;code&gt;make&lt;/code&gt;; so, &lt;code&gt;make&lt;/code&gt; handles the&lt;br&gt;&lt;code&gt;SHELL&lt;/code&gt; environment variable in a special way; see &lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Target_002dspecific&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Pattern_002dspecific&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Pattern-specific&lt;/a&gt;, Previous: &lt;a href=&quot;#Environment&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Environment&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Target_002dspecific-Variable-Values&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.11 Target-specific Variable Values&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-target_002dspecific-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-target_002dspecific&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Variable values in &lt;code&gt;make&lt;/code&gt; are usually global; that is, they are the&lt;br&gt;same regardless of where they are evaluated (unless they’re reset, of&lt;br&gt;course).  One exception to that is automatic variables&lt;br&gt;(see &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The other exception is &lt;em&gt;target-specific variable values&lt;/em&gt;.  This&lt;br&gt;feature allows you to define different values for the same variable,&lt;br&gt;based on the target that &lt;code&gt;make&lt;/code&gt; is currently building.  As with&lt;br&gt;automatic variables, these values are only available within the context&lt;br&gt;of a target’s recipe (and in other target-specific assignments).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Set a target-specific variable value like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;target&lt;/var&gt; … : &lt;var&gt;variable-assignment&lt;/var&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Target-specific variable assignments can be prefixed with any or all of the&lt;br&gt;special keywords &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;override&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt;;&lt;br&gt;these apply their normal behavior to this instance of the variable only.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Multiple &lt;var&gt;target&lt;/var&gt; values create a target-specific variable value for&lt;br&gt;each member of the target list individually.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;var&gt;variable-assignment&lt;/var&gt; can be any valid form of assignment;&lt;br&gt;recursive (‘&lt;samp&gt;=&lt;/samp&gt;’), simple (‘&lt;samp&gt;:=&lt;/samp&gt;’ or ‘&lt;samp&gt;::=&lt;/samp&gt;’), appending&lt;br&gt;(‘&lt;samp&gt;+=&lt;/samp&gt;’), or conditional (‘&lt;samp&gt;?=&lt;/samp&gt;’).  All variables that appear&lt;br&gt;within the &lt;var&gt;variable-assignment&lt;/var&gt; are evaluated within the context&lt;br&gt;of the target: thus, any previously-defined target-specific variable&lt;br&gt;values will be in effect.  Note that this variable is actually&lt;br&gt;distinct from any “global” value: the two variables do not have to&lt;br&gt;have the same flavor (recursive vs. simple).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Target-specific variables have the same priority as any other makefile&lt;br&gt;variable.  Variables provided on the command line (and in the&lt;br&gt;environment if the ‘&lt;samp&gt;-e&lt;/samp&gt;’ option is in force) will take precedence.&lt;br&gt;Specifying the &lt;code&gt;override&lt;/code&gt; directive will allow the target-specific&lt;br&gt;variable value to be preferred.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;There is one more special feature of target-specific variables: when&lt;br&gt;you define a target-specific variable that variable value is also in&lt;br&gt;effect for all prerequisites of this target, and all their&lt;br&gt;prerequisites, etc. (unless those prerequisites override that variable&lt;br&gt;with their own target-specific variable value).  So, for example, a&lt;br&gt;statement like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;prog : CFLAGS = -g&lt;br&gt;prog : prog.o foo.o bar.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will set &lt;code&gt;CFLAGS&lt;/code&gt; to ‘&lt;samp&gt;-g&lt;/samp&gt;’ in the recipe for &lt;samp&gt;prog&lt;/samp&gt;, but&lt;br&gt;it will also set &lt;code&gt;CFLAGS&lt;/code&gt; to ‘&lt;samp&gt;-g&lt;/samp&gt;’ in the recipes that create&lt;br&gt;&lt;samp&gt;prog.o&lt;/samp&gt;, &lt;samp&gt;foo.o&lt;/samp&gt;, and &lt;samp&gt;bar.o&lt;/samp&gt;, and any recipes which&lt;br&gt;create their prerequisites.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Be aware that a given prerequisite will only be built once per&lt;br&gt;invocation of make, at most.  If the same file is a prerequisite of&lt;br&gt;multiple targets, and each of those targets has a different value for&lt;br&gt;the same target-specific variable, then the first target to be built&lt;br&gt;will cause that prerequisite to be built and the prerequisite will&lt;br&gt;inherit the target-specific value from the first target.  It will&lt;br&gt;ignore the target-specific values from any other targets.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Pattern_002dspecific&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Suppressing-Inheritance&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Suppressing Inheritance&lt;/a&gt;, Previous: &lt;a href=&quot;#Target_002dspecific&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Target-specific&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Pattern_002dspecific-Variable-Values&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.12 Pattern-specific Variable Values&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-pattern_002dspecific-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-pattern_002dspecific&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In addition to target-specific variable values&lt;br&gt;(see &lt;a href=&quot;#Target_002dspecific&quot;&gt;Target-specific Variable Values&lt;/a&gt;), GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt; supports pattern-specific variable values.  In this form,&lt;br&gt;the variable is defined for any target that matches the pattern&lt;br&gt;specified.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Set a pattern-specific variable value like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;pattern&lt;/var&gt; … : &lt;var&gt;variable-assignment&lt;/var&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;where &lt;var&gt;pattern&lt;/var&gt; is a %-pattern.  As with target-specific variable&lt;br&gt;values, multiple &lt;var&gt;pattern&lt;/var&gt; values create a pattern-specific variable&lt;br&gt;value for each pattern individually.  The &lt;var&gt;variable-assignment&lt;/var&gt; can&lt;br&gt;be any valid form of assignment.  Any command line variable setting will&lt;br&gt;take precedence, unless &lt;code&gt;override&lt;/code&gt; is specified.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;%.o : CFLAGS = -O&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will assign &lt;code&gt;CFLAGS&lt;/code&gt; the value of ‘&lt;samp&gt;-O&lt;/samp&gt;’ for all targets&lt;br&gt;matching the pattern &lt;code&gt;%.o&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If a target matches more than one pattern, the matching pattern-specific&lt;br&gt;variables with longer stems are interpreted first. This results in more&lt;br&gt;specific variables taking precedence over the more generic ones, for&lt;br&gt;example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;%.o: %.c&lt;br&gt;        $(CC) -c $(CFLAGS) $(CPPFLAGS) $&amp;lt; -o $@&lt;br&gt;&lt;br&gt;lib/%.o: CFLAGS := -fPIC -g&lt;br&gt;%.o: CFLAGS := -g&lt;br&gt;&lt;br&gt;all: foo.o lib/bar.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In this example the first definition of the &lt;code&gt;CFLAGS&lt;/code&gt; variable&lt;br&gt;will be used to update &lt;samp&gt;lib/bar.o&lt;/samp&gt; even though the second one&lt;br&gt;also applies to this target. Pattern-specific variables which result&lt;br&gt;in the same stem length are considered in the order in which they&lt;br&gt;were defined in the makefile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Pattern-specific variables are searched after any target-specific&lt;br&gt;variables defined explicitly for that target, and before target-specific&lt;br&gt;variables defined for the parent target.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Suppressing-Inheritance&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Special-Variables&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Special Variables&lt;/a&gt;, Previous: &lt;a href=&quot;#Pattern_002dspecific&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Pattern-specific&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Suppressing-Inheritance-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.13 Suppressing Inheritance&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-private&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-suppressing-inheritance&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-inheritance_002c-suppressing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;As described in previous sections, &lt;code&gt;make&lt;/code&gt; variables are inherited&lt;br&gt;by prerequisites.  This capability allows you to modify the behavior&lt;br&gt;of a prerequisite based on which targets caused it to be rebuilt.  For&lt;br&gt;example, you might set a target-specific variable on a &lt;code&gt;debug&lt;/code&gt;&lt;br&gt;target, then running ‘&lt;samp&gt;make debug&lt;/samp&gt;’ will cause that variable to be&lt;br&gt;inherited by all prerequisites of &lt;code&gt;debug&lt;/code&gt;, while just running&lt;br&gt;‘&lt;samp&gt;make all&lt;/samp&gt;’ (for example) would not have that assignment.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Sometimes, however, you may not want a variable to be inherited.  For&lt;br&gt;these situations, &lt;code&gt;make&lt;/code&gt; provides the &lt;code&gt;private&lt;/code&gt; modifier.&lt;br&gt;Although this modifier can be used with any variable assignment, it&lt;br&gt;makes the most sense with target- and pattern-specific variables.  Any&lt;br&gt;variable marked &lt;code&gt;private&lt;/code&gt; will be visible to its local target but&lt;br&gt;will not be inherited by prerequisites of that target.  A global&lt;br&gt;variable marked &lt;code&gt;private&lt;/code&gt; will be visible in the global scope but&lt;br&gt;will not be inherited by any target, and hence will not be visible&lt;br&gt;in any recipe.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;As an example, consider this makefile:&lt;br&gt;&lt;/p&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;EXTRA_CFLAGS =&lt;br&gt;&lt;br&gt;prog: private EXTRA_CFLAGS = -L/usr/local/lib&lt;br&gt;prog: a.o b.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Due to the &lt;code&gt;private&lt;/code&gt; modifier, &lt;code&gt;a.o&lt;/code&gt; and &lt;code&gt;b.o&lt;/code&gt; will not&lt;br&gt;inherit the &lt;code&gt;EXTRA_CFLAGS&lt;/code&gt; variable assignment from the&lt;br&gt;&lt;code&gt;prog&lt;/code&gt; target.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Special-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Suppressing-Inheritance&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Suppressing Inheritance&lt;/a&gt;, Up: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Using Variables&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Other-Special-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;6.14 Other Special Variables&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-makefiles_002c-and-special-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-special-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;GNU &lt;code&gt;make&lt;/code&gt; supports some variables that have special properties.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;a name=&quot;index-MAKEFILE_005fLIST-_0028list-of-parsed-makefiles_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makefiles_002c-and-MAKEFILE_005fLIST-variable&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-including-_0028MAKEFILE_005fLIST-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKEFILE_LIST&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Contains the name of each makefile that is parsed by &lt;code&gt;make&lt;/code&gt;, in&lt;br&gt;the order in which it was parsed.  The name is appended just&lt;br&gt;before &lt;code&gt;make&lt;/code&gt; begins to parse the makefile.  Thus, if the first&lt;br&gt;thing a makefile does is examine the last word in this variable, it&lt;br&gt;will be the name of the current makefile.  Once the current makefile&lt;br&gt;has used &lt;code&gt;include&lt;/code&gt;, however, the last word will be the&lt;br&gt;just-included makefile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If a makefile named &lt;code&gt;Makefile&lt;/code&gt; has this content:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;name1 := $(lastword $(MAKEFILE_LIST))&lt;br&gt;&lt;br&gt;include inc.mk&lt;br&gt;&lt;br&gt;name2 := $(lastword $(MAKEFILE_LIST))&lt;br&gt;&lt;br&gt;all:&lt;br&gt;        @echo name1 = $(name1)&lt;br&gt;        @echo name2 = $(name2)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;then you would expect to see this output:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;name1 = Makefile&lt;br&gt;name2 = inc.mk&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-_002eDEFAULT_005fGOAL-_0028define-default-goal_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.DEFAULT_GOAL&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Sets the default goal to be used if no targets were specified on the&lt;br&gt;command line (see &lt;a href=&quot;#Goals&quot;&gt;Arguments to Specify the Goals&lt;/a&gt;).  The&lt;br&gt;&lt;code&gt;.DEFAULT_GOAL&lt;/code&gt; variable allows you to discover the current&lt;br&gt;default goal, restart the default goal selection algorithm by clearing&lt;br&gt;its value, or to explicitly set the default goal.  The following&lt;br&gt;example illustrates these cases:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;# Query the default goal.&lt;br&gt;ifeq ($(.DEFAULT_GOAL),)&lt;br&gt;  $(warning no default goal is set)&lt;br&gt;endif&lt;br&gt;&lt;br&gt;.PHONY: foo&lt;br&gt;foo: ; @echo $@&lt;br&gt;&lt;br&gt;$(warning default goal is $(.DEFAULT_GOAL))&lt;br&gt;&lt;br&gt;# Reset the default goal.&lt;br&gt;.DEFAULT_GOAL :=&lt;br&gt;&lt;br&gt;.PHONY: bar&lt;br&gt;bar: ; @echo $@&lt;br&gt;&lt;br&gt;$(warning default goal is $(.DEFAULT_GOAL))&lt;br&gt;&lt;br&gt;# Set our own.&lt;br&gt;.DEFAULT_GOAL := foo&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This makefile prints:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;no default goal is set&lt;br&gt;default goal is foo&lt;br&gt;default goal is bar&lt;br&gt;foo&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Note that assigning more than one target name to &lt;code&gt;.DEFAULT_GOAL&lt;/code&gt; is&lt;br&gt;invalid and will result in an error.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-MAKE_005fRESTARTS-_0028number-of-times-make-has-restarted_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKE_RESTARTS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;This variable is set only if this instance of &lt;code&gt;make&lt;/code&gt; has&lt;br&gt;restarted (see &lt;a href=&quot;#Remaking-Makefiles&quot;&gt;How Makefiles Are Remade&lt;/a&gt;): it&lt;br&gt;will contain the number of times this instance has restarted.  Note&lt;br&gt;this is not the same as recursion (counted by the &lt;code&gt;MAKELEVEL&lt;/code&gt;&lt;br&gt;variable).  You should not set, modify, or export this variable.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-MAKE_005fTERMOUT-_0028whether-stdout-is-a-terminal_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-MAKE_005fTERMERR-_0028whether-stderr-is-a-terminal_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKE_TERMOUT&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKE_TERMERR&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;When &lt;code&gt;make&lt;/code&gt; starts it will check whether stdout and stderr will&lt;br&gt;show their output on a terminal.  If so, it will set&lt;br&gt;&lt;code&gt;MAKE_TERMOUT&lt;/code&gt; and &lt;code&gt;MAKE_TERMERR&lt;/code&gt;, respectively, to the name&lt;br&gt;of the terminal device (or &lt;code&gt;true&lt;/code&gt; if this cannot be determined).&lt;br&gt;If set these variables will be marked for export.  These variables&lt;br&gt;will not be changed by &lt;code&gt;make&lt;/code&gt; and they will not be modified if&lt;br&gt;already set.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;These values can be used (particularly in combination with output&lt;br&gt;synchronization (see &lt;a href=&quot;#Parallel-Output&quot;&gt;Output During Parallel&lt;br&gt;Execution&lt;/a&gt;) to determine whether &lt;code&gt;make&lt;/code&gt; itself is writing to a&lt;br&gt;terminal; they can be tested to decide whether to force recipe&lt;br&gt;commands to generate colorized output for example.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you invoke a sub-&lt;code&gt;make&lt;/code&gt; and redirect its stdout or stderr it&lt;br&gt;is your responsibility to reset or unexport these variables as well,&lt;br&gt;if your makefiles rely on them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eRECIPEPREFIX-_0028change-the-recipe-prefix-character_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.RECIPEPREFIX&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The first character of the value of this variable is used as the&lt;br&gt;character make assumes is introducing a recipe line.  If the variable&lt;br&gt;is empty (as it is by default) that character is the standard tab&lt;br&gt;character.  For example, this is a valid makefile:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.RECIPEPREFIX = &amp;gt;&lt;br&gt;all:&lt;br&gt;&amp;gt; @echo Hello, world&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The value of &lt;code&gt;.RECIPEPREFIX&lt;/code&gt; can be changed multiple times; once set&lt;br&gt;it stays in effect for all rules parsed until it is modified.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eVARIABLES-_0028list-of-variables_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.VARIABLES&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Expands to a list of the &lt;em&gt;names&lt;/em&gt; of all global variables defined&lt;br&gt;so far.  This includes variables which have empty values, as well as&lt;br&gt;built-in variables (see &lt;a href=&quot;#Implicit-Variables&quot;&gt;Variables Used by&lt;br&gt;Implicit Rules&lt;/a&gt;), but does not include any variables which are only&lt;br&gt;defined in a target-specific context.  Note that any value you assign&lt;br&gt;to this variable will be ignored; it will always return its special&lt;br&gt;value.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;index-_002eFEATURES-_0028list-of-supported-features_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;dt&gt;&lt;code&gt;.FEATURES&lt;/code&gt;&lt;/dt&gt;&lt;/p&gt;
&lt;p&gt;&lt;dd&gt;&lt;p&gt;Expands to a list of special features supported by this version of&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.  Possible values include, but are not limited to:&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;/p&gt;
&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;archives&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Supports &lt;code&gt;ar&lt;/code&gt; (archive) files using special file name syntax.&lt;br&gt;See &lt;a href=&quot;#Archives&quot;&gt;Using &lt;code&gt;make&lt;/code&gt; to Update Archive Files&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;check-symlink&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Supports the &lt;code&gt;-L&lt;/code&gt; (&lt;code&gt;–check-symlink-times&lt;/code&gt;) flag.&lt;br&gt;See &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;else-if&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Supports “else if” non-nested conditionals.  See &lt;a href=&quot;#Conditional-Syntax&quot;&gt;Syntax of Conditionals&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;jobserver&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Supports “job server” enhanced parallel builds.  See &lt;a href=&quot;#Parallel&quot;&gt;Parallel Execution&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;oneshell&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Supports the &lt;code&gt;.ONESHELL&lt;/code&gt; special target.  See &lt;a href=&quot;#One-Shell&quot;&gt;Using&lt;br&gt;One Shell&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;order-only&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Supports order-only prerequisites.  See &lt;a href=&quot;#Prerequisite-Types&quot;&gt;Types&lt;br&gt;of Prerequisites&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;second-expansion&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Supports secondary expansion of prerequisite lists.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;shortest-stem&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Uses the “shortest stem” method of choosing which pattern, of&lt;br&gt;multiple applicable options, will be used.  See &lt;a href=&quot;#Pattern-Match&quot;&gt;How&lt;br&gt;Patterns Match&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;target-specific&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Supports target-specific and pattern-specific variable assignments.&lt;br&gt;See &lt;a href=&quot;#Target_002dspecific&quot;&gt;Target-specific Variable Values&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;undefine&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Supports the &lt;code&gt;undefine&lt;/code&gt; directive.  See &lt;a href=&quot;#Undefine-Directive&quot;&gt;Undefine Directive&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;guile&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Has GNU Guile available as an embedded extension language.&lt;br&gt;See &lt;a href=&quot;#Guile-Integration&quot;&gt;GNU Guile Integration&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;load&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Supports dynamically loadable objects for creating custom extensions.&lt;br&gt;See &lt;a href=&quot;#Loading-Objects&quot;&gt;Loading Dynamic Objects&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;

&lt;p&gt;&lt;a name=&quot;index-_002eINCLUDE_005fDIRS-_0028list-of-include-directories_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;dt&gt;&lt;code&gt;.INCLUDE_DIRS&lt;/code&gt;&lt;/dt&gt;&lt;/p&gt;
&lt;p&gt;&lt;dd&gt;&lt;p&gt;Expands to a list of directories that &lt;code&gt;make&lt;/code&gt; searches for&lt;br&gt;included makefiles (see &lt;a href=&quot;#Include&quot;&gt;Including Other Makefiles&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;/p&gt;&lt;/dl&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Conditionals&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Functions&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Functions&lt;/a&gt;, Previous: &lt;a href=&quot;#Using-Variables&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Using Variables&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Conditional-Parts-of-Makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;7 Conditional Parts of Makefiles&lt;/h2&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-conditionals&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;A &lt;em&gt;conditional&lt;/em&gt; directive causes part of a makefile to be obeyed&lt;br&gt;or ignored depending on the values of variables.  Conditionals can&lt;br&gt;compare the value of one variable to another, or the value of a&lt;br&gt;variable to a constant string.  Conditionals control what &lt;code&gt;make&lt;/code&gt;&lt;br&gt;actually “sees” in the makefile, so they &lt;em&gt;cannot&lt;/em&gt; be used to&lt;br&gt;control recipes at the time of execution.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Conditional-Example&quot; accesskey=&quot;1&quot;&gt;Conditional Example&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Example of a conditional&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Conditional-Syntax&quot; accesskey=&quot;2&quot;&gt;Conditional Syntax&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The syntax of conditionals.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Testing-Flags&quot; accesskey=&quot;3&quot;&gt;Testing Flags&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Conditionals that test flags.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Conditional-Example&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Conditional-Syntax&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Conditional Syntax&lt;/a&gt;, Previous: &lt;a href=&quot;#Conditionals&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Conditionals&lt;/a&gt;, Up: &lt;a href=&quot;#Conditionals&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Conditionals&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Example-of-a-Conditional&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;7.1 Example of a Conditional&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The following example of a conditional tells &lt;code&gt;make&lt;/code&gt; to use one&lt;br&gt;set of libraries if the &lt;code&gt;CC&lt;/code&gt; variable is ‘&lt;samp&gt;gcc&lt;/samp&gt;’, and a&lt;br&gt;different set of libraries otherwise.  It works by controlling which&lt;br&gt;of two recipe lines will be used for the rule.  The result is that&lt;br&gt;‘&lt;samp&gt;CC=gcc&lt;/samp&gt;’ as an argument to &lt;code&gt;make&lt;/code&gt; changes not only which&lt;br&gt;compiler is used but also which libraries are linked.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;libs_for_gcc = -lgnu&lt;br&gt;normal_libs =&lt;br&gt;&lt;br&gt;foo: $(objects)&lt;br&gt;ifeq ($(CC),gcc)&lt;br&gt;        $(CC) -o foo $(objects) $(libs_for_gcc)&lt;br&gt;else&lt;br&gt;        $(CC) -o foo $(objects) $(normal_libs)&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This conditional uses three directives: one &lt;code&gt;ifeq&lt;/code&gt;, one &lt;code&gt;else&lt;/code&gt;&lt;br&gt;and one &lt;code&gt;endif&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;ifeq&lt;/code&gt; directive begins the conditional, and specifies the&lt;br&gt;condition.  It contains two arguments, separated by a comma and surrounded&lt;br&gt;by parentheses.  Variable substitution is performed on both arguments and&lt;br&gt;then they are compared.  The lines of the makefile following the&lt;br&gt;&lt;code&gt;ifeq&lt;/code&gt; are obeyed if the two arguments match; otherwise they are&lt;br&gt;ignored.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;else&lt;/code&gt; directive causes the following lines to be obeyed if the&lt;br&gt;previous conditional failed.  In the example above, this means that the&lt;br&gt;second alternative linking command is used whenever the first alternative&lt;br&gt;is not used.  It is optional to have an &lt;code&gt;else&lt;/code&gt; in a conditional.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;endif&lt;/code&gt; directive ends the conditional.  Every conditional must&lt;br&gt;end with an &lt;code&gt;endif&lt;/code&gt;.  Unconditional makefile text follows.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;As this example illustrates, conditionals work at the textual level:&lt;br&gt;the lines of the conditional are treated as part of the makefile, or&lt;br&gt;ignored, according to the condition.  This is why the larger syntactic&lt;br&gt;units of the makefile, such as rules, may cross the beginning or the&lt;br&gt;end of the conditional.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When the variable &lt;code&gt;CC&lt;/code&gt; has the value ‘&lt;samp&gt;gcc&lt;/samp&gt;’, the above example has&lt;br&gt;this effect:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo: $(objects)&lt;br&gt;        $(CC) -o foo $(objects) $(libs_for_gcc)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When the variable &lt;code&gt;CC&lt;/code&gt; has any other value, the effect is this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo: $(objects)&lt;br&gt;        $(CC) -o foo $(objects) $(normal_libs)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Equivalent results can be obtained in another way by conditionalizing a&lt;br&gt;variable assignment and then using the variable unconditionally:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;libs_for_gcc = -lgnu&lt;br&gt;normal_libs =&lt;br&gt;&lt;br&gt;ifeq ($(CC),gcc)&lt;br&gt;  libs=$(libs_for_gcc)&lt;br&gt;else&lt;br&gt;  libs=$(normal_libs)&lt;br&gt;endif&lt;br&gt;&lt;br&gt;foo: $(objects)&lt;br&gt;        $(CC) -o foo $(objects) $(libs)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Conditional-Syntax&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Testing-Flags&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Testing Flags&lt;/a&gt;, Previous: &lt;a href=&quot;#Conditional-Example&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Conditional Example&lt;/a&gt;, Up: &lt;a href=&quot;#Conditionals&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Conditionals&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Syntax-of-Conditionals&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;7.2 Syntax of Conditionals&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-ifdef&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-ifeq&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-ifndef&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-ifneq&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-else&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-endif&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The syntax of a simple conditional with no &lt;code&gt;else&lt;/code&gt; is as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;conditional-directive&lt;/var&gt;&lt;br&gt;&lt;var&gt;text-if-true&lt;/var&gt;&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;var&gt;text-if-true&lt;/var&gt; may be any lines of text, to be considered as part&lt;br&gt;of the makefile if the condition is true.  If the condition is false, no&lt;br&gt;text is used instead.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The syntax of a complex conditional is as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;conditional-directive&lt;/var&gt;&lt;br&gt;&lt;var&gt;text-if-true&lt;/var&gt;&lt;br&gt;else&lt;br&gt;&lt;var&gt;text-if-false&lt;/var&gt;&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;or:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;conditional-directive-one&lt;/var&gt;&lt;br&gt;&lt;var&gt;text-if-one-is-true&lt;/var&gt;&lt;br&gt;else &lt;var&gt;conditional-directive-two&lt;/var&gt;&lt;br&gt;&lt;var&gt;text-if-two-is-true&lt;/var&gt;&lt;br&gt;else&lt;br&gt;&lt;var&gt;text-if-one-and-two-are-false&lt;/var&gt;&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;There can be as many “&lt;code&gt;else&lt;/code&gt; &lt;var&gt;conditional-directive&lt;/var&gt;”&lt;br&gt;clauses as necessary.  Once a given condition is true,&lt;br&gt;&lt;var&gt;text-if-true&lt;/var&gt; is used and no other clause is used; if no&lt;br&gt;condition is true then &lt;var&gt;text-if-false&lt;/var&gt; is used.  The&lt;br&gt;&lt;var&gt;text-if-true&lt;/var&gt; and &lt;var&gt;text-if-false&lt;/var&gt; can be any number of lines&lt;br&gt;of text.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The syntax of the &lt;var&gt;conditional-directive&lt;/var&gt; is the same whether the&lt;br&gt;conditional is simple or complex; after an &lt;code&gt;else&lt;/code&gt; or not.  There&lt;br&gt;are four different directives that test different conditions.  Here is&lt;br&gt;a table of them:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifeq (&lt;var&gt;arg1&lt;/var&gt;, &lt;var&gt;arg2&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifeq ‘&lt;var&gt;arg1&lt;/var&gt;‘ ‘&lt;var&gt;arg2&lt;/var&gt;‘&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifeq “&lt;var&gt;arg1&lt;/var&gt;“ “&lt;var&gt;arg2&lt;/var&gt;“&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifeq “&lt;var&gt;arg1&lt;/var&gt;“ ‘&lt;var&gt;arg2&lt;/var&gt;‘&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifeq ‘&lt;var&gt;arg1&lt;/var&gt;‘ “&lt;var&gt;arg2&lt;/var&gt;“&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Expand all variable references in &lt;var&gt;arg1&lt;/var&gt; and &lt;var&gt;arg2&lt;/var&gt; and&lt;br&gt;compare them.  If they are identical, the &lt;var&gt;text-if-true&lt;/var&gt; is&lt;br&gt;effective; otherwise, the &lt;var&gt;text-if-false&lt;/var&gt;, if any, is effective.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Often you want to test if a variable has a non-empty value.  When the&lt;br&gt;value results from complex expansions of variables and functions,&lt;br&gt;expansions you would consider empty may actually contain whitespace&lt;br&gt;characters and thus are not seen as empty.  However, you can use the&lt;br&gt;&lt;code&gt;strip&lt;/code&gt; function (see &lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;) to avoid interpreting&lt;br&gt;whitespace as a non-empty value.  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ifeq ($(strip $(foo)),)&lt;br&gt;&lt;var&gt;text-if-empty&lt;/var&gt;&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will evaluate &lt;var&gt;text-if-empty&lt;/var&gt; even if the expansion of&lt;br&gt;&lt;code&gt;$(foo)&lt;/code&gt; contains whitespace characters.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifneq (&lt;var&gt;arg1&lt;/var&gt;, &lt;var&gt;arg2&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifneq ‘&lt;var&gt;arg1&lt;/var&gt;‘ ‘&lt;var&gt;arg2&lt;/var&gt;‘&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifneq “&lt;var&gt;arg1&lt;/var&gt;“ “&lt;var&gt;arg2&lt;/var&gt;“&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifneq “&lt;var&gt;arg1&lt;/var&gt;“ ‘&lt;var&gt;arg2&lt;/var&gt;‘&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifneq ‘&lt;var&gt;arg1&lt;/var&gt;‘ “&lt;var&gt;arg2&lt;/var&gt;“&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Expand all variable references in &lt;var&gt;arg1&lt;/var&gt; and &lt;var&gt;arg2&lt;/var&gt; and&lt;br&gt;compare them.  If they are different, the &lt;var&gt;text-if-true&lt;/var&gt; is&lt;br&gt;effective; otherwise, the &lt;var&gt;text-if-false&lt;/var&gt;, if any, is effective.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifdef &lt;var&gt;variable-name&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The &lt;code&gt;ifdef&lt;/code&gt; form takes the &lt;em&gt;name&lt;/em&gt; of a variable as its&lt;br&gt;argument, not a reference to a variable.  If the value of that&lt;br&gt;variable has a non-empty value, the &lt;var&gt;text-if-true&lt;/var&gt; is effective;&lt;br&gt;otherwise, the &lt;var&gt;text-if-false&lt;/var&gt;, if any, is effective.  Variables&lt;br&gt;that have never been defined have an empty value.  The text&lt;br&gt;&lt;var&gt;variable-name&lt;/var&gt; is expanded, so it could be a variable or function&lt;br&gt;that expands to the name of a variable.  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;bar = true&lt;br&gt;foo = bar&lt;br&gt;ifdef $(foo)&lt;br&gt;frobozz = yes&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The variable reference &lt;code&gt;$(foo)&lt;/code&gt; is expanded, yielding &lt;code&gt;bar&lt;/code&gt;,&lt;br&gt;which is considered to be the name of a variable.  The variable&lt;br&gt;&lt;code&gt;bar&lt;/code&gt; is not expanded, but its value is examined to determine if&lt;br&gt;it is non-empty.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Note that &lt;code&gt;ifdef&lt;/code&gt; only tests whether a variable has a value.  It&lt;br&gt;does not expand the variable to see if that value is nonempty.&lt;br&gt;Consequently, tests using &lt;code&gt;ifdef&lt;/code&gt; return true for all definitions&lt;br&gt;except those like &lt;code&gt;foo =&lt;/code&gt;.  To test for an empty value, use&lt;br&gt;&lt;code&gt;ifeq&amp;nbsp;($(foo),)&lt;/code&gt;&lt;!-- /@w --&gt;.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;bar =&lt;br&gt;foo = $(bar)&lt;br&gt;ifdef foo&lt;br&gt;frobozz = yes&lt;br&gt;else&lt;br&gt;frobozz = no&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;sets ‘&lt;samp&gt;frobozz&lt;/samp&gt;’ to ‘&lt;samp&gt;yes&lt;/samp&gt;’, while:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo =&lt;br&gt;ifdef foo&lt;br&gt;frobozz = yes&lt;br&gt;else&lt;br&gt;frobozz = no&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;sets ‘&lt;samp&gt;frobozz&lt;/samp&gt;’ to ‘&lt;samp&gt;no&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifndef &lt;var&gt;variable-name&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;If the variable &lt;var&gt;variable-name&lt;/var&gt; has an empty value, the&lt;br&gt;&lt;var&gt;text-if-true&lt;/var&gt; is effective; otherwise, the &lt;var&gt;text-if-false&lt;/var&gt;,&lt;br&gt;if any, is effective.  The rules for expansion and testing of&lt;br&gt;&lt;var&gt;variable-name&lt;/var&gt; are identical to the &lt;code&gt;ifdef&lt;/code&gt; directive.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Extra spaces are allowed and ignored at the beginning of the&lt;br&gt;conditional directive line, but a tab is not allowed.  (If the line&lt;br&gt;begins with a tab, it will be considered part of a recipe for a rule.)&lt;br&gt;Aside from this, extra spaces or tabs may be inserted with no effect&lt;br&gt;anywhere except within the directive name or within an argument.  A&lt;br&gt;comment starting with ‘&lt;samp&gt;#&lt;/samp&gt;’ may appear at the end of the line.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The other two directives that play a part in a conditional are &lt;code&gt;else&lt;/code&gt;&lt;br&gt;and &lt;code&gt;endif&lt;/code&gt;.  Each of these directives is written as one word, with no&lt;br&gt;arguments.  Extra spaces are allowed and ignored at the beginning of the&lt;br&gt;line, and spaces or tabs at the end.  A comment starting with ‘&lt;samp&gt;#&lt;/samp&gt;’ may&lt;br&gt;appear at the end of the line.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Conditionals affect which lines of the makefile &lt;code&gt;make&lt;/code&gt; uses.  If&lt;br&gt;the condition is true, &lt;code&gt;make&lt;/code&gt; reads the lines of the&lt;br&gt;&lt;var&gt;text-if-true&lt;/var&gt; as part of the makefile; if the condition is false,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; ignores those lines completely.  It follows that syntactic&lt;br&gt;units of the makefile, such as rules, may safely be split across the&lt;br&gt;beginning or the end of the conditional.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; evaluates conditionals when it reads a makefile.&lt;br&gt;Consequently, you cannot use automatic variables in the tests of&lt;br&gt;conditionals because they are not defined until recipes are run&lt;br&gt;(see &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To prevent intolerable confusion, it is not permitted to start a&lt;br&gt;conditional in one makefile and end it in another.  However, you may&lt;br&gt;write an &lt;code&gt;include&lt;/code&gt; directive within a conditional, provided you do&lt;br&gt;not attempt to terminate the conditional inside the included file.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Testing-Flags&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Conditional-Syntax&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Conditional Syntax&lt;/a&gt;, Up: &lt;a href=&quot;#Conditionals&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Conditionals&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Conditionals-that-Test-Flags&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;7.3 Conditionals that Test Flags&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;You can write a conditional that tests &lt;code&gt;make&lt;/code&gt; command flags such as&lt;br&gt;‘&lt;samp&gt;-t&lt;/samp&gt;’ by using the variable &lt;code&gt;MAKEFLAGS&lt;/code&gt; together with the&lt;br&gt;&lt;code&gt;findstring&lt;/code&gt; function&lt;br&gt;(see &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;).&lt;br&gt;This is useful when &lt;code&gt;touch&lt;/code&gt; is not enough to make a file appear up&lt;br&gt;to date.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;findstring&lt;/code&gt; function determines whether one string appears as a&lt;br&gt;substring of another.  If you want to test for the ‘&lt;samp&gt;-t&lt;/samp&gt;’ flag,&lt;br&gt;use ‘&lt;samp&gt;t&lt;/samp&gt;’ as the first string and the value of &lt;code&gt;MAKEFLAGS&lt;/code&gt; as&lt;br&gt;the other.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, here is how to arrange to use ‘&lt;samp&gt;ranlib -t&lt;/samp&gt;’ to finish&lt;br&gt;marking an archive file up to date:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;archive.a: …&lt;br&gt;ifneq (,$(findstring t,$(MAKEFLAGS)))&lt;br&gt;        +touch archive.a&lt;br&gt;        +ranlib -t archive.a&lt;br&gt;else&lt;br&gt;        ranlib archive.a&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The ‘&lt;samp&gt;+&lt;/samp&gt;’ prefix marks those recipe lines as “recursive” so that&lt;br&gt;they will be executed despite use of the ‘&lt;samp&gt;-t&lt;/samp&gt;’ flag.&lt;br&gt;See &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Functions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Running&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Running&lt;/a&gt;, Previous: &lt;a href=&quot;#Conditionals&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Conditionals&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Functions-for-Transforming-Text&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;8 Functions for Transforming Text&lt;/h2&gt;&lt;br&gt;&lt;a name=&quot;index-functions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;Functions&lt;/em&gt; allow you to do text processing in the makefile to&lt;br&gt;compute the files to operate on or the commands to use in recipes.&lt;br&gt;You use a function in a &lt;em&gt;function call&lt;/em&gt;, where you give the name&lt;br&gt;of the function and some text (the &lt;em&gt;arguments&lt;/em&gt;) for the function&lt;br&gt;to operate on.  The result of the function’s processing is substituted&lt;br&gt;into the makefile at the point of the call, just as a variable might&lt;br&gt;be substituted.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Syntax-of-Functions&quot; accesskey=&quot;1&quot;&gt;Syntax of Functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to write a function call.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Text-Functions&quot; accesskey=&quot;2&quot;&gt;Text Functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;General-purpose text manipulation functions.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#File-Name-Functions&quot; accesskey=&quot;3&quot;&gt;File Name Functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Functions for manipulating file names.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Conditional-Functions&quot; accesskey=&quot;4&quot;&gt;Conditional Functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Functions that implement conditions.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Foreach-Function&quot; accesskey=&quot;5&quot;&gt;Foreach Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Repeat some text with controlled variation.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#File-Function&quot; accesskey=&quot;6&quot;&gt;File Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Write text to a file.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Call-Function&quot; accesskey=&quot;7&quot;&gt;Call Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Expand a user-defined function.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Value-Function&quot; accesskey=&quot;8&quot;&gt;Value Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Return the un-expanded value of a variable.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Eval-Function&quot; accesskey=&quot;9&quot;&gt;Eval Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Evaluate the arguments as makefile syntax.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Origin-Function&quot;&gt;Origin Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Find where a variable got its value.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Flavor-Function&quot;&gt;Flavor Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Find out the flavor of a variable.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Functions that control how make runs.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Shell-Function&quot;&gt;Shell Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Substitute the output of a shell command.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Guile-Function&quot;&gt;Guile Function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Use GNU Guile embedded scripting language.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Syntax-of-Functions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Text-Functions&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Text Functions&lt;/a&gt;, Previous: &lt;a href=&quot;#Functions&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Functions&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Function-Call-Syntax&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.1 Function Call Syntax&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_002c-in-function-call&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-dollar-sign-_0028_0024_0029_002c-in-function-call&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-arguments-of-functions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-functions_002c-syntax-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A function call resembles a variable reference.  It can appear&lt;br&gt;anywhere a variable reference can appear, and it is expanded using the&lt;br&gt;same rules as variable references.  A function call looks like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(&lt;var&gt;function&lt;/var&gt; &lt;var&gt;arguments&lt;/var&gt;)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;or like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;${&lt;var&gt;function&lt;/var&gt; &lt;var&gt;arguments&lt;/var&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here &lt;var&gt;function&lt;/var&gt; is a function name; one of a short list of names&lt;br&gt;that are part of &lt;code&gt;make&lt;/code&gt;.  You can also essentially create your own&lt;br&gt;functions by using the &lt;code&gt;call&lt;/code&gt; built-in function.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;var&gt;arguments&lt;/var&gt; are the arguments of the function.  They are&lt;br&gt;separated from the function name by one or more spaces or tabs, and if&lt;br&gt;there is more than one argument, then they are separated by commas.&lt;br&gt;Such whitespace and commas are not part of an argument’s value.  The&lt;br&gt;delimiters which you use to surround the function call, whether&lt;br&gt;parentheses or braces, can appear in an argument only in matching pairs;&lt;br&gt;the other kind of delimiters may appear singly.  If the arguments&lt;br&gt;themselves contain other function calls or variable references, it is&lt;br&gt;wisest to use the same kind of delimiters for all the references; write&lt;br&gt;‘&lt;samp&gt;$(subst&amp;nbsp;a,b,$(x))&lt;/samp&gt;’&lt;!-- /@w --&gt;, not ‘&lt;samp&gt;$(subst&amp;nbsp;a,b,${x})&lt;/samp&gt;’&lt;!-- /@w --&gt;.  This&lt;br&gt;is because it is clearer, and because only one type of delimiter is&lt;br&gt;matched to find the end of the reference.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The text written for each argument is processed by substitution of&lt;br&gt;variables and function calls to produce the argument value, which&lt;br&gt;is the text on which the function acts.  The substitution is done in the&lt;br&gt;order in which the arguments appear.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Commas and unmatched parentheses or braces cannot appear in the text of an&lt;br&gt;argument as written; leading spaces cannot appear in the text of the first&lt;br&gt;argument as written.  These characters can be put into the argument value&lt;br&gt;by variable substitution.  First define variables &lt;code&gt;comma&lt;/code&gt; and&lt;br&gt;&lt;code&gt;space&lt;/code&gt; whose values are isolated comma and space characters, then&lt;br&gt;substitute these variables where such characters are wanted, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;comma:= ,&lt;br&gt;empty:=&lt;br&gt;space:= $(empty) $(empty)&lt;br&gt;foo:= a b c&lt;br&gt;bar:= $(subst $(space),$(comma),$(foo))&lt;br&gt;# &lt;span class=&quot;roman&quot;&gt;bar is now ‘a,b,c’.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here the &lt;code&gt;subst&lt;/code&gt; function replaces each space with a comma, through&lt;br&gt;the value of &lt;code&gt;foo&lt;/code&gt;, and substitutes the result.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Text-Functions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#File-Name-Functions&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;File Name Functions&lt;/a&gt;, Previous: &lt;a href=&quot;#Syntax-of-Functions&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Syntax of Functions&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Functions-for-String-Substitution-and-Analysis&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.2 Functions for String Substitution and Analysis&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-functions_002c-for-text&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here are some functions that operate on strings:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(subst &lt;var&gt;from&lt;/var&gt;,&lt;var&gt;to&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-subst-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Performs a textual replacement on the text &lt;var&gt;text&lt;/var&gt;: each occurrence&lt;br&gt;of &lt;var&gt;from&lt;/var&gt; is replaced by &lt;var&gt;to&lt;/var&gt;.  The result is substituted for&lt;br&gt;the function call.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(subst ee,EE,feet on the street)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;substitutes the string ‘&lt;samp&gt;fEEt on the strEEt&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(patsubst &lt;var&gt;pattern&lt;/var&gt;,&lt;var&gt;replacement&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-patsubst-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Finds whitespace-separated words in &lt;var&gt;text&lt;/var&gt; that match&lt;br&gt;&lt;var&gt;pattern&lt;/var&gt; and replaces them with &lt;var&gt;replacement&lt;/var&gt;.  Here&lt;br&gt;&lt;var&gt;pattern&lt;/var&gt; may contain a ‘&lt;samp&gt;%&lt;/samp&gt;’ which acts as a wildcard,&lt;br&gt;matching any number of any characters within a word.  If&lt;br&gt;&lt;var&gt;replacement&lt;/var&gt; also contains a ‘&lt;samp&gt;%&lt;/samp&gt;’, the ‘&lt;samp&gt;%&lt;/samp&gt;’ is replaced&lt;br&gt;by the text that matched the ‘&lt;samp&gt;%&lt;/samp&gt;’ in &lt;var&gt;pattern&lt;/var&gt;.  Only the first&lt;br&gt;‘&lt;samp&gt;%&lt;/samp&gt;’ in the &lt;var&gt;pattern&lt;/var&gt; and &lt;var&gt;replacement&lt;/var&gt; is treated this&lt;br&gt;way; any subsequent ‘&lt;samp&gt;%&lt;/samp&gt;’ is unchanged.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0025_002c-quoting-in-patsubst&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0025_002c-quoting-with-_005c-_0028backslash_0029-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_005c-_0028backslash_0029_002c-to-quote-_0025-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-backslash-_0028_005c_0029_002c-to-quote-_0025-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-quoting-_0025_002c-in-patsubst&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;‘&lt;samp&gt;%&lt;/samp&gt;’ characters in &lt;code&gt;patsubst&lt;/code&gt; function invocations can be&lt;br&gt;quoted with preceding backslashes (‘&lt;samp&gt;\&lt;/samp&gt;’).  Backslashes that would&lt;br&gt;otherwise quote ‘&lt;samp&gt;%&lt;/samp&gt;’ characters can be quoted with more backslashes.&lt;br&gt;Backslashes that quote ‘&lt;samp&gt;%&lt;/samp&gt;’ characters or other backslashes are&lt;br&gt;removed from the pattern before it is compared file names or has a stem&lt;br&gt;substituted into it.  Backslashes that are not in danger of quoting&lt;br&gt;‘&lt;samp&gt;%&lt;/samp&gt;’ characters go unmolested.  For example, the pattern&lt;br&gt;&lt;samp&gt;the\%weird\%pattern\&lt;/samp&gt; has ‘&lt;samp&gt;the%weird\&lt;/samp&gt;’ preceding the&lt;br&gt;operative ‘&lt;samp&gt;%&lt;/samp&gt;’ character, and ‘&lt;samp&gt;pattern\&lt;/samp&gt;’ following it.  The&lt;br&gt;final two backslashes are left alone because they cannot affect any&lt;br&gt;‘&lt;samp&gt;%&lt;/samp&gt;’ character.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Whitespace between words is folded into single space characters;&lt;br&gt;leading and trailing whitespace is discarded.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(patsubst %.c,%.o,x.c.c bar.c)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;produces the value ‘&lt;samp&gt;x.c.o bar.o&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Substitution references (see &lt;a href=&quot;#Substitution-Refs&quot;&gt;Substitution&lt;br&gt;References&lt;/a&gt;) are a simpler way to get the effect of the &lt;code&gt;patsubst&lt;/code&gt;&lt;br&gt;function:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(&lt;var&gt;var&lt;/var&gt;:&lt;var&gt;pattern&lt;/var&gt;=&lt;var&gt;replacement&lt;/var&gt;)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;is equivalent to&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(patsubst &lt;var&gt;pattern&lt;/var&gt;,&lt;var&gt;replacement&lt;/var&gt;,$(&lt;var&gt;var&lt;/var&gt;))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The second shorthand simplifies one of the most common uses of&lt;br&gt;&lt;code&gt;patsubst&lt;/code&gt;: replacing the suffix at the end of file names.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(&lt;var&gt;var&lt;/var&gt;:&lt;var&gt;suffix&lt;/var&gt;=&lt;var&gt;replacement&lt;/var&gt;)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;is equivalent to&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(patsubst %&lt;var&gt;suffix&lt;/var&gt;,%&lt;var&gt;replacement&lt;/var&gt;,$(&lt;var&gt;var&lt;/var&gt;))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;For example, you might have a list of object files:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects = foo.o bar.o baz.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;To get the list of corresponding source files, you could simply write:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(objects:.o=.c)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;instead of using the general form:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(patsubst %.o,%.c,$(objects))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(strip &lt;var&gt;string&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-stripping-whitespace&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-whitespace_002c-stripping&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-spaces_002c-stripping&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-strip&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Removes leading and trailing whitespace from &lt;var&gt;string&lt;/var&gt; and replaces&lt;br&gt;each internal sequence of one or more whitespace characters with a&lt;br&gt;single space.  Thus, ‘&lt;samp&gt;$(strip a b  c )&lt;/samp&gt;’ results in ‘&lt;samp&gt;a&amp;nbsp;b&amp;nbsp;c&lt;/samp&gt;’&lt;!-- /@w --&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The function &lt;code&gt;strip&lt;/code&gt; can be very useful when used in conjunction&lt;br&gt;with conditionals.  When comparing something with the empty string&lt;br&gt;‘&lt;samp&gt;&lt;/samp&gt;’ using &lt;code&gt;ifeq&lt;/code&gt; or &lt;code&gt;ifneq&lt;/code&gt;, you usually want a string of&lt;br&gt;just whitespace to match the empty string (see &lt;a href=&quot;#Conditionals&quot;&gt;Conditionals&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Thus, the following may fail to have the desired results:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.PHONY: all&lt;br&gt;ifneq   “$(needs_made)” “”&lt;br&gt;all: $(needs_made)&lt;br&gt;else&lt;br&gt;all:;@echo ‘Nothing to make!’&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Replacing the variable reference ‘&lt;samp&gt;&lt;span class=&quot;nolinebreak&quot;&gt;$(needs_made)&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; with the&lt;br&gt;function call ‘&lt;samp&gt;$(strip&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;$(needs_made))&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; in the &lt;code&gt;ifneq&lt;/code&gt;&lt;br&gt;directive would make it more robust.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(findstring &lt;var&gt;find&lt;/var&gt;,&lt;var&gt;in&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-findstring&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-searching-for-strings&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-finding-strings&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-strings_002c-searching-for&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Searches &lt;var&gt;in&lt;/var&gt; for an occurrence of &lt;var&gt;find&lt;/var&gt;.  If it occurs, the&lt;br&gt;value is &lt;var&gt;find&lt;/var&gt;; otherwise, the value is empty.  You can use this&lt;br&gt;function in a conditional to test for the presence of a specific&lt;br&gt;substring in a given string.  Thus, the two examples,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(findstring a,a b c)&lt;br&gt;$(findstring a,b c)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;produce the values ‘&lt;samp&gt;a&lt;/samp&gt;’ and ‘&lt;samp&gt;&lt;/samp&gt;’ (the empty string),&lt;br&gt;respectively.  See &lt;a href=&quot;#Testing-Flags&quot;&gt;Testing Flags&lt;/a&gt;, for a practical application of&lt;br&gt;&lt;code&gt;findstring&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-filter&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-filtering-words&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-words_002c-filtering&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(filter &lt;var&gt;pattern&lt;/var&gt;…,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Returns all whitespace-separated words in &lt;var&gt;text&lt;/var&gt; that &lt;em&gt;do&lt;/em&gt; match&lt;br&gt;any of the &lt;var&gt;pattern&lt;/var&gt; words, removing any words that &lt;em&gt;do not&lt;/em&gt;&lt;br&gt;match.  The patterns are written using ‘&lt;samp&gt;%&lt;/samp&gt;’, just like the patterns&lt;br&gt;used in the &lt;code&gt;patsubst&lt;/code&gt; function above.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; function can be used to separate out different types&lt;br&gt;of strings (such as file names) in a variable.  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;sources := foo.c bar.c baz.s ugh.h&lt;br&gt;foo: $(sources)&lt;br&gt;        cc $(filter %.c %.s,$(sources)) -o foo&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;says that &lt;samp&gt;foo&lt;/samp&gt; depends of &lt;samp&gt;foo.c&lt;/samp&gt;, &lt;samp&gt;bar.c&lt;/samp&gt;,&lt;br&gt;&lt;samp&gt;baz.s&lt;/samp&gt; and &lt;samp&gt;ugh.h&lt;/samp&gt; but only &lt;samp&gt;foo.c&lt;/samp&gt;, &lt;samp&gt;bar.c&lt;/samp&gt; and&lt;br&gt;&lt;samp&gt;baz.s&lt;/samp&gt; should be specified in the command to the&lt;br&gt;compiler.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(filter-out &lt;var&gt;pattern&lt;/var&gt;…,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-filter_002dout&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-filtering-out-words&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-words_002c-filtering-out&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Returns all whitespace-separated words in &lt;var&gt;text&lt;/var&gt; that &lt;em&gt;do not&lt;/em&gt;&lt;br&gt;match any of the &lt;var&gt;pattern&lt;/var&gt; words, removing the words that &lt;em&gt;do&lt;/em&gt;&lt;br&gt;match one or more.  This is the exact opposite of the &lt;code&gt;filter&lt;/code&gt;&lt;br&gt;function.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, given:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;objects=main1.o foo.o main2.o bar.o&lt;br&gt;mains=main1.o main2.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;the following generates a list which contains all the object files not&lt;br&gt;in ‘&lt;samp&gt;mains&lt;/samp&gt;’:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(filter-out $(mains),$(objects))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-sort&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-sorting-words&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(sort &lt;var&gt;list&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Sorts the words of &lt;var&gt;list&lt;/var&gt; in lexical order, removing duplicate&lt;br&gt;words.  The output is a list of words separated by single spaces.&lt;br&gt;Thus,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(sort foo bar lose)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;returns the value ‘&lt;samp&gt;bar foo lose&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-removing-duplicate-words&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-duplicate-words_002c-removing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-words_002c-removing-duplicates&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Incidentally, since &lt;code&gt;sort&lt;/code&gt; removes duplicate words, you can use&lt;br&gt;it for this purpose even if you don’t care about the sort order.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(word &lt;var&gt;n&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-word&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-word_002c-selecting-a&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-selecting-a-word&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Returns the &lt;var&gt;n&lt;/var&gt;th word of &lt;var&gt;text&lt;/var&gt;.  The legitimate values of&lt;br&gt;&lt;var&gt;n&lt;/var&gt; start from 1.  If &lt;var&gt;n&lt;/var&gt; is bigger than the number of words&lt;br&gt;in &lt;var&gt;text&lt;/var&gt;, the value is empty.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(word 2, foo bar baz)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;returns ‘&lt;samp&gt;bar&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(wordlist &lt;var&gt;s&lt;/var&gt;,&lt;var&gt;e&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-wordlist&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-words_002c-selecting-lists-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-selecting-word-lists&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Returns the list of words in &lt;var&gt;text&lt;/var&gt; starting with word &lt;var&gt;s&lt;/var&gt; and&lt;br&gt;ending with word &lt;var&gt;e&lt;/var&gt; (inclusive).  The legitimate values of &lt;var&gt;s&lt;/var&gt;&lt;br&gt;start from 1; &lt;var&gt;e&lt;/var&gt; may start from 0.  If &lt;var&gt;s&lt;/var&gt; is bigger than the&lt;br&gt;number of words in &lt;var&gt;text&lt;/var&gt;, the value is empty.  If &lt;var&gt;e&lt;/var&gt; is&lt;br&gt;bigger than the number of words in &lt;var&gt;text&lt;/var&gt;, words up to the end of&lt;br&gt;&lt;var&gt;text&lt;/var&gt; are returned.  If &lt;var&gt;s&lt;/var&gt; is greater than &lt;var&gt;e&lt;/var&gt;, nothing&lt;br&gt;is returned.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(wordlist 2, 3, foo bar baz)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;returns ‘&lt;samp&gt;bar baz&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(words &lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-words&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-words_002c-finding-number&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Returns the number of words in &lt;var&gt;text&lt;/var&gt;.&lt;br&gt;Thus, the last word of &lt;var&gt;text&lt;/var&gt; is&lt;br&gt;&lt;code&gt;$(word&amp;nbsp;$(words&amp;nbsp;&lt;var&gt;text&lt;/var&gt;),&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;!-- /@w --&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(firstword &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-firstword&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-words_002c-extracting-first&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The argument &lt;var&gt;names&lt;/var&gt; is regarded as a series of names, separated&lt;br&gt;by whitespace.  The value is the first name in the series.  The rest&lt;br&gt;of the names are ignored.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(firstword foo bar)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;produces the result ‘&lt;samp&gt;foo&lt;/samp&gt;’.  Although &lt;code&gt;$(firstword&lt;br&gt;&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt; is the same as &lt;code&gt;$(word 1,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;, the&lt;br&gt;&lt;code&gt;firstword&lt;/code&gt; function is retained for its simplicity.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/dd&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;dt&gt;&lt;code&gt;$(lastword &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;/p&gt;
&lt;p&gt;&lt;dd&gt;&lt;a name=&quot;index-lastword&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-words_002c-extracting-last&quot;&gt;&lt;/a&gt;&lt;/dd&gt;&lt;/p&gt;
&lt;p&gt;The argument &lt;var&gt;names&lt;/var&gt; is regarded as a series of names, separated&lt;br&gt;by whitespace.  The value is the last name in the series.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(lastword foo bar)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;produces the result ‘&lt;samp&gt;bar&lt;/samp&gt;’.  Although &lt;code&gt;$(lastword&lt;br&gt;&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt; is the same as &lt;code&gt;$(word $(words &lt;var&gt;text&lt;/var&gt;),&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;,&lt;br&gt;the &lt;code&gt;lastword&lt;/code&gt; function was added for its simplicity and better&lt;br&gt;performance.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is a realistic example of the use of &lt;code&gt;subst&lt;/code&gt; and&lt;br&gt;&lt;code&gt;patsubst&lt;/code&gt;.  Suppose that a makefile uses the &lt;code&gt;VPATH&lt;/code&gt; variable&lt;br&gt;to specify a list of directories that &lt;code&gt;make&lt;/code&gt; should search for&lt;br&gt;prerequisite files&lt;br&gt;(see &lt;a href=&quot;#General-Search&quot;&gt;&lt;code&gt;VPATH&lt;/code&gt; Search Path for All Prerequisites&lt;/a&gt;).&lt;br&gt;This example shows how to&lt;br&gt;tell the C compiler to search for header files in the same list of&lt;br&gt;directories.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The value of &lt;code&gt;VPATH&lt;/code&gt; is a list of directories separated by colons,&lt;br&gt;such as ‘&lt;samp&gt;src:../headers&lt;/samp&gt;’.  First, the &lt;code&gt;subst&lt;/code&gt; function is used to&lt;br&gt;change the colons to spaces:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(subst :, ,$(VPATH))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This produces ‘&lt;samp&gt;src ../headers&lt;/samp&gt;’.  Then &lt;code&gt;patsubst&lt;/code&gt; is used to turn&lt;br&gt;each directory name into a ‘&lt;samp&gt;-I&lt;/samp&gt;’ flag.  These can be added to the&lt;br&gt;value of the variable &lt;code&gt;CFLAGS&lt;/code&gt;, which is passed automatically to the C&lt;br&gt;compiler, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The effect is to append the text ‘&lt;samp&gt;-Isrc -I../headers&lt;/samp&gt;’ to the&lt;br&gt;previously given value of &lt;code&gt;CFLAGS&lt;/code&gt;.  The &lt;code&gt;override&lt;/code&gt; directive is&lt;br&gt;used so that the new value is assigned even if the previous value of&lt;br&gt;&lt;code&gt;CFLAGS&lt;/code&gt; was specified with a command argument (see &lt;a href=&quot;#Override-Directive&quot;&gt;The &lt;code&gt;override&lt;/code&gt; Directive&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;File-Name-Functions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Conditional-Functions&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Conditional Functions&lt;/a&gt;, Previous: &lt;a href=&quot;#Text-Functions&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Text Functions&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Functions-for-File-Names&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.3 Functions for File Names&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-functions_002c-for-file-names&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name-functions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Several of the built-in expansion functions relate specifically to&lt;br&gt;taking apart file names or lists of file names.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Each of the following functions performs a specific transformation on a&lt;br&gt;file name.  The argument of the function is regarded as a series of file&lt;br&gt;names, separated by whitespace.  (Leading and trailing whitespace is&lt;br&gt;ignored.)  Each file name in the series is transformed in the same way and&lt;br&gt;the results are concatenated with single spaces between them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(dir &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-dir&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-directory-part&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name_002c-directory-part&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extracts the directory-part of each file name in &lt;var&gt;names&lt;/var&gt;.  The&lt;br&gt;directory-part of the file name is everything up through (and&lt;br&gt;including) the last slash in it.  If the file name contains no slash,&lt;br&gt;the directory part is the string ‘&lt;samp&gt;./&lt;/samp&gt;’.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(dir src/foo.c hacks)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;produces the result ‘&lt;samp&gt;src/ ./&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(notdir &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-notdir&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name_002c-nondirectory-part&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-nondirectory-part&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extracts all but the directory-part of each file name in &lt;var&gt;names&lt;/var&gt;.&lt;br&gt;If the file name contains no slash, it is left unchanged.  Otherwise,&lt;br&gt;everything through the last slash is removed from it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A file name that ends with a slash becomes an empty string.  This is&lt;br&gt;unfortunate, because it means that the result does not always have the&lt;br&gt;same number of whitespace-separated file names as the argument had;&lt;br&gt;but we do not see any other valid alternative.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(notdir src/foo.c hacks)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;produces the result ‘&lt;samp&gt;foo.c hacks&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(suffix &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-suffix&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-suffix_002c-function-to-find&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name-suffix&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extracts the suffix of each file name in &lt;var&gt;names&lt;/var&gt;.  If the file name&lt;br&gt;contains a period, the suffix is everything starting with the last&lt;br&gt;period.  Otherwise, the suffix is the empty string.  This frequently&lt;br&gt;means that the result will be empty when &lt;var&gt;names&lt;/var&gt; is not, and if&lt;br&gt;&lt;var&gt;names&lt;/var&gt; contains multiple file names, the result may contain fewer&lt;br&gt;file names.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(suffix src/foo.c src-1.0/bar.c hacks)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;produces the result ‘&lt;samp&gt;.c .c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(basename &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-basename-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-basename&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name_002c-basename-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extracts all but the suffix of each file name in &lt;var&gt;names&lt;/var&gt;.  If the&lt;br&gt;file name contains a period, the basename is everything starting up to&lt;br&gt;(and not including) the last period.  Periods in the directory part are&lt;br&gt;ignored.  If there is no period, the basename is the entire file name.&lt;br&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(basename src/foo.c src-1.0/bar hacks)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;produces the result ‘&lt;samp&gt;src/foo src-1.0/bar hacks&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(addsuffix &lt;var&gt;suffix&lt;/var&gt;,&lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-addsuffix&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-suffix_002c-adding&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name-suffix_002c-adding&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The argument &lt;var&gt;names&lt;/var&gt; is regarded as a series of names, separated&lt;br&gt;by whitespace; &lt;var&gt;suffix&lt;/var&gt; is used as a unit.  The value of&lt;br&gt;&lt;var&gt;suffix&lt;/var&gt; is appended to the end of each individual name and the&lt;br&gt;resulting larger names are concatenated with single spaces between&lt;br&gt;them.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(addsuffix .c,foo bar)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;produces the result ‘&lt;samp&gt;foo.c bar.c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(addprefix &lt;var&gt;prefix&lt;/var&gt;,&lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-addprefix&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-prefix_002c-adding&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name-prefix_002c-adding&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The argument &lt;var&gt;names&lt;/var&gt; is regarded as a series of names, separated&lt;br&gt;by whitespace; &lt;var&gt;prefix&lt;/var&gt; is used as a unit.  The value of&lt;br&gt;&lt;var&gt;prefix&lt;/var&gt; is prepended to the front of each individual name and the&lt;br&gt;resulting larger names are concatenated with single spaces between&lt;br&gt;them.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(addprefix src/,foo bar)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;produces the result ‘&lt;samp&gt;src/foo src/bar&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(join &lt;var&gt;list1&lt;/var&gt;,&lt;var&gt;list2&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-join&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-joining-lists-of-words&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-words_002c-joining-lists&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Concatenates the two arguments word by word: the two first words (one&lt;br&gt;from each argument) concatenated form the first word of the result, the&lt;br&gt;two second words form the second word of the result, and so on.  So the&lt;br&gt;&lt;var&gt;n&lt;/var&gt;th word of the result comes from the &lt;var&gt;n&lt;/var&gt;th word of each&lt;br&gt;argument.  If one argument has more words that the other, the extra&lt;br&gt;words are copied unchanged into the result.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, ‘&lt;samp&gt;$(join a b,.c .o)&lt;/samp&gt;’ produces ‘&lt;samp&gt;a.c b.o&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Whitespace between the words in the lists is not preserved; it is&lt;br&gt;replaced with a single space.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This function can merge the results of the &lt;code&gt;dir&lt;/code&gt; and&lt;br&gt;&lt;code&gt;notdir&lt;/code&gt; functions, to produce the original list of files which&lt;br&gt;was given to those two functions.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(wildcard &lt;var&gt;pattern&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-wildcard-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-wildcard_002c-function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The argument &lt;var&gt;pattern&lt;/var&gt; is a file name pattern, typically containing&lt;br&gt;wildcard characters (as in shell file name patterns).  The result of&lt;br&gt;&lt;code&gt;wildcard&lt;/code&gt; is a space-separated list of the names of existing files&lt;br&gt;that match the pattern.&lt;br&gt;See &lt;a href=&quot;#Wildcards&quot;&gt;Using Wildcard Characters in File Names&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(realpath &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-realpath-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-realpath&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name_002c-realpath-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;For each file name in &lt;var&gt;names&lt;/var&gt; return the canonical absolute name.&lt;br&gt;A canonical name does not contain any &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;..&lt;/code&gt; components,&lt;br&gt;nor any repeated path separators (&lt;code&gt;/&lt;/code&gt;) or symlinks.  In case of a&lt;br&gt;failure the empty string is returned.  Consult the &lt;code&gt;realpath(3)&lt;/code&gt;&lt;br&gt;documentation for a list of possible failure causes.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(abspath &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-abspath-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-abspath&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file-name_002c-abspath-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;For each file name in &lt;var&gt;names&lt;/var&gt; return an absolute name that does&lt;br&gt;not contain any &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;..&lt;/code&gt; components, nor any repeated path&lt;br&gt;separators (&lt;code&gt;/&lt;/code&gt;).  Note that, in contrast to &lt;code&gt;realpath&lt;/code&gt;&lt;br&gt;function, &lt;code&gt;abspath&lt;/code&gt; does not resolve symlinks and does not require&lt;br&gt;the file names to refer to an existing file or directory.  Use the&lt;br&gt;&lt;code&gt;wildcard&lt;/code&gt; function to test for existence.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Conditional-Functions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Foreach-Function&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Foreach Function&lt;/a&gt;, Previous: &lt;a href=&quot;#File-Name-Functions&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;File Name Functions&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Functions-for-Conditionals&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.4 Functions for Conditionals&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-if&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-conditional-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;There are three functions that provide conditional expansion.  A key&lt;br&gt;aspect of these functions is that not all of the arguments are&lt;br&gt;expanded initially.  Only those arguments which need to be expanded,&lt;br&gt;will be expanded.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(if &lt;var&gt;condition&lt;/var&gt;,&lt;var&gt;then-part&lt;/var&gt;[,&lt;var&gt;else-part&lt;/var&gt;])&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-if-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; function provides support for conditional expansion in a&lt;br&gt;functional context (as opposed to the GNU &lt;code&gt;make&lt;/code&gt; makefile&lt;br&gt;conditionals such as &lt;code&gt;ifeq&lt;/code&gt; (see &lt;a href=&quot;#Conditional-Syntax&quot;&gt;Syntax of&lt;br&gt;Conditionals&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The first argument, &lt;var&gt;condition&lt;/var&gt;, first has all preceding and&lt;br&gt;trailing whitespace stripped, then is expanded.  If it expands to any&lt;br&gt;non-empty string, then the condition is considered to be true.  If it&lt;br&gt;expands to an empty string, the condition is considered to be false.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the condition is true then the second argument, &lt;var&gt;then-part&lt;/var&gt;, is&lt;br&gt;evaluated and this is used as the result of the evaluation of the entire&lt;br&gt;&lt;code&gt;if&lt;/code&gt; function.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the condition is false then the third argument, &lt;var&gt;else-part&lt;/var&gt;, is&lt;br&gt;evaluated and this is the result of the &lt;code&gt;if&lt;/code&gt; function.  If there is&lt;br&gt;no third argument, the &lt;code&gt;if&lt;/code&gt; function evaluates to nothing (the&lt;br&gt;empty string).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Note that only one of the &lt;var&gt;then-part&lt;/var&gt; or the &lt;var&gt;else-part&lt;/var&gt; will be&lt;br&gt;evaluated, never both.  Thus, either can contain side-effects (such as&lt;br&gt;&lt;code&gt;shell&lt;/code&gt; function calls, etc.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(or &lt;var&gt;condition1&lt;/var&gt;[,&lt;var&gt;condition2&lt;/var&gt;[,&lt;var&gt;condition3&lt;/var&gt;…]])&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-or&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;or&lt;/code&gt; function provides a “short-circuiting” OR operation.&lt;br&gt;Each argument is expanded, in order.  If an argument expands to a&lt;br&gt;non-empty string the processing stops and the result of the expansion&lt;br&gt;is that string.  If, after all arguments are expanded, all of them are&lt;br&gt;false (empty), then the result of the expansion is the empty string.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(and &lt;var&gt;condition1&lt;/var&gt;[,&lt;var&gt;condition2&lt;/var&gt;[,&lt;var&gt;condition3&lt;/var&gt;…]])&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-and&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;and&lt;/code&gt; function provides a “short-circuiting” AND operation.&lt;br&gt;Each argument is expanded, in order.  If an argument expands to an&lt;br&gt;empty string the processing stops and the result of the expansion is&lt;br&gt;the empty string.  If all arguments expand to a non-empty string then&lt;br&gt;the result of the expansion is the expansion of the last argument.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Foreach-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#File-Function&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;File Function&lt;/a&gt;, Previous: &lt;a href=&quot;#Conditional-Functions&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Conditional Functions&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-foreach-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.5 The &lt;code&gt;foreach&lt;/code&gt; Function&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-foreach&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-words_002c-iterating-over&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;foreach&lt;/code&gt; function is very different from other functions.  It&lt;br&gt;causes one piece of text to be used repeatedly, each time with a different&lt;br&gt;substitution performed on it.  It resembles the &lt;code&gt;for&lt;/code&gt; command in the&lt;br&gt;shell &lt;code&gt;sh&lt;/code&gt; and the &lt;code&gt;foreach&lt;/code&gt; command in the C-shell &lt;code&gt;csh&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The syntax of the &lt;code&gt;foreach&lt;/code&gt; function is:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(foreach &lt;var&gt;var&lt;/var&gt;,&lt;var&gt;list&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The first two arguments, &lt;var&gt;var&lt;/var&gt; and &lt;var&gt;list&lt;/var&gt;, are expanded before&lt;br&gt;anything else is done; note that the last argument, &lt;var&gt;text&lt;/var&gt;, is&lt;br&gt;&lt;strong&gt;not&lt;/strong&gt; expanded at the same time.  Then for each word of the expanded&lt;br&gt;value of &lt;var&gt;list&lt;/var&gt;, the variable named by the expanded value of &lt;var&gt;var&lt;/var&gt;&lt;br&gt;is set to that word, and &lt;var&gt;text&lt;/var&gt; is expanded.  Presumably &lt;var&gt;text&lt;/var&gt;&lt;br&gt;contains references to that variable, so its expansion will be different&lt;br&gt;each time.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The result is that &lt;var&gt;text&lt;/var&gt; is expanded as many times as there are&lt;br&gt;whitespace-separated words in &lt;var&gt;list&lt;/var&gt;.  The multiple expansions of&lt;br&gt;&lt;var&gt;text&lt;/var&gt; are concatenated, with spaces between them, to make the result&lt;br&gt;of &lt;code&gt;foreach&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This simple example sets the variable ‘&lt;samp&gt;files&lt;/samp&gt;’ to the list of all files&lt;br&gt;in the directories in the list ‘&lt;samp&gt;dirs&lt;/samp&gt;’:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;dirs := a b c d&lt;br&gt;files := $(foreach dir,$(dirs),$(wildcard $(dir)/&lt;em&gt;))&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here &lt;var&gt;text&lt;/var&gt; is ‘&lt;samp&gt;$(wildcard $(dir)/)&lt;/samp&gt;’.  The first repetition&lt;br&gt;finds the value ‘&lt;samp&gt;a&lt;/samp&gt;’ for &lt;code&gt;dir&lt;/code&gt;, so it produces the same result&lt;br&gt;as ‘&lt;samp&gt;$(wildcard a/&lt;em&gt;)&lt;/em&gt;&lt;/samp&gt;’; the second repetition produces the result&lt;br&gt;of ‘&lt;samp&gt;$(wildcard b/)&lt;/samp&gt;’; and the third, that of ‘&lt;samp&gt;$(wildcard c/&lt;em&gt;)&lt;/em&gt;&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This example has the same result (except for setting ‘&lt;samp&gt;dirs&lt;/samp&gt;’) as&lt;br&gt;the following example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;files := $(wildcard a/ b/&lt;em&gt; c/&lt;/em&gt; d/&lt;em&gt;)&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When &lt;var&gt;text&lt;/var&gt; is complicated, you can improve readability by giving it&lt;br&gt;a name, with an additional variable:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;find_files = $(wildcard $(dir)/)&lt;br&gt;dirs := a b c d&lt;br&gt;files := $(foreach dir,$(dirs),$(find_files))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here we use the variable &lt;code&gt;find_files&lt;/code&gt; this way.  We use plain ‘&lt;samp&gt;=&lt;/samp&gt;’&lt;br&gt;to define a recursively-expanding variable, so that its value contains an&lt;br&gt;actual function call to be re-expanded under the control of &lt;code&gt;foreach&lt;/code&gt;;&lt;br&gt;a simply-expanded variable would not do, since &lt;code&gt;wildcard&lt;/code&gt; would be&lt;br&gt;called only once at the time of defining &lt;code&gt;find_files&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;foreach&lt;/code&gt; function has no permanent effect on the variable&lt;br&gt;&lt;var&gt;var&lt;/var&gt;; its value and flavor after the &lt;code&gt;foreach&lt;/code&gt; function call are&lt;br&gt;the same as they were beforehand.  The other values which are taken from&lt;br&gt;&lt;var&gt;list&lt;/var&gt; are in effect only temporarily, during the execution of&lt;br&gt;&lt;code&gt;foreach&lt;/code&gt;.  The variable &lt;var&gt;var&lt;/var&gt; is a simply-expanded variable&lt;br&gt;during the execution of &lt;code&gt;foreach&lt;/code&gt;.  If &lt;var&gt;var&lt;/var&gt; was undefined&lt;br&gt;before the &lt;code&gt;foreach&lt;/code&gt; function call, it is undefined after the call.&lt;br&gt;See &lt;a href=&quot;#Flavors&quot;&gt;The Two Flavors of Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You must take care when using complex variable expressions that result in&lt;br&gt;variable names because many strange things are valid variable names, but&lt;br&gt;are probably not what you intended.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;files := $(foreach Esta-escrito-en-espanol!,b c ch,$(find_files))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;might be useful if the value of &lt;code&gt;find_files&lt;/code&gt; references the variable&lt;br&gt;whose name is ‘&lt;samp&gt;Esta-escrito-en-espanol!&lt;/samp&gt;’ (es un nombre bastante largo,&lt;br&gt;no?), but it is more likely to be a mistake.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;File-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Call-Function&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Call Function&lt;/a&gt;, Previous: &lt;a href=&quot;#Foreach-Function&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Foreach Function&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-file-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.6 The &lt;code&gt;file&lt;/code&gt; Function&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-file&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-writing-to-a-file&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file_002c-writing-to&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-reading-from-a-file&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-file_002c-reading-from&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;file&lt;/code&gt; function allows the makefile to write to or read from&lt;br&gt;a file.  Two modes of writing are supported: overwrite, where the text&lt;br&gt;is written to the beginning of the file and any existing content is&lt;br&gt;lost, and append, where the text is written to the end of the file,&lt;br&gt;preserving the existing content.  In both cases the file is created if&lt;br&gt;it does not exist.  It is a fatal error if the file cannot be opened&lt;br&gt;for writing, or if the write operation fails.  The &lt;code&gt;file&lt;/code&gt;&lt;br&gt;function expands to the empty string when writing to a file.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When reading from a file, the &lt;code&gt;file&lt;/code&gt; function expands to the&lt;br&gt;verbatim contents of the file, except that the final newline (if there&lt;br&gt;is one) will be stripped.  Attempting to read from a non-existent file&lt;br&gt;expands to the empty string.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The syntax of the &lt;code&gt;file&lt;/code&gt; function is:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(file &lt;var&gt;op&lt;/var&gt; &lt;var&gt;filename&lt;/var&gt;[,&lt;var&gt;text&lt;/var&gt;])&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When the &lt;code&gt;file&lt;/code&gt; function is evaluated all its arguments are&lt;br&gt;expanded first, then the file indicated by &lt;var&gt;filename&lt;/var&gt; will be&lt;br&gt;opened in the mode described by &lt;var&gt;op&lt;/var&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The operator &lt;var&gt;op&lt;/var&gt; can be &lt;code&gt;&amp;gt;&lt;/code&gt; to indicate the file will be&lt;br&gt;overwritten with new content, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to indicate the current&lt;br&gt;contents of the file will be appended to, or &lt;code&gt;&amp;lt;&lt;/code&gt; to indicate the&lt;br&gt;contents of the file will be read in.  The &lt;var&gt;filename&lt;/var&gt; specifies&lt;br&gt;the file to be written to or read from.  There may optionally be&lt;br&gt;whitespace between the operator and the file name.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When reading files, it is an error to provide a &lt;var&gt;text&lt;/var&gt; value.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When writing files, &lt;var&gt;text&lt;/var&gt; will be written to the file.  If&lt;br&gt;&lt;var&gt;text&lt;/var&gt; does not already end in a newline a final newline will be&lt;br&gt;written (even if &lt;var&gt;text&lt;/var&gt; is the empty string).  If the &lt;var&gt;text&lt;/var&gt;&lt;br&gt;argument is not given at all, nothing will be written.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, the &lt;code&gt;file&lt;/code&gt; function can be useful if your build&lt;br&gt;system has a limited command line size and your recipe runs a command&lt;br&gt;that can accept arguments from a file as well.  Many commands use the&lt;br&gt;convention that an argument prefixed with an &lt;code&gt;@&lt;/code&gt; specifies a&lt;br&gt;file containing more arguments.  Then you might write your recipe in&lt;br&gt;this way:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;program: $(OBJECTS)&lt;br&gt;        $(file &amp;gt;$@.in,$^)&lt;br&gt;        $(CMD) $(CMDFLAGS) @$@.in&lt;br&gt;        @rm $@.in&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If the command required each argument to be on a separate line of the&lt;br&gt;input file, you might write your recipe like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;program: $(OBJECTS)&lt;br&gt;        $(file &amp;gt;$@.in) $(foreach O,$^,$(file &amp;gt;&amp;gt;$@.in,$O))&lt;br&gt;        $(CMD) $(CMDFLAGS) @$@.in&lt;br&gt;        @rm $@.in&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Call-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Value-Function&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Value Function&lt;/a&gt;, Previous: &lt;a href=&quot;#File-Function&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;File Function&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-call-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.7 The &lt;code&gt;call&lt;/code&gt; Function&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-call&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-functions_002c-user-defined&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-user-defined-functions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;call&lt;/code&gt; function is unique in that it can be used to create new&lt;br&gt;parameterized functions.  You can write a complex expression as the&lt;br&gt;value of a variable, then use &lt;code&gt;call&lt;/code&gt; to expand it with different&lt;br&gt;values.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The syntax of the &lt;code&gt;call&lt;/code&gt; function is:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(call &lt;var&gt;variable&lt;/var&gt;,&lt;var&gt;param&lt;/var&gt;,&lt;var&gt;param&lt;/var&gt;,…)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When &lt;code&gt;make&lt;/code&gt; expands this function, it assigns each &lt;var&gt;param&lt;/var&gt; to&lt;br&gt;temporary variables &lt;code&gt;$(1)&lt;/code&gt;, &lt;code&gt;$(2)&lt;/code&gt;, etc.  The variable&lt;br&gt;&lt;code&gt;$(0)&lt;/code&gt; will contain &lt;var&gt;variable&lt;/var&gt;.  There is no maximum number of&lt;br&gt;parameter arguments.  There is no minimum, either, but it doesn’t make&lt;br&gt;sense to use &lt;code&gt;call&lt;/code&gt; with no parameters.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Then &lt;var&gt;variable&lt;/var&gt; is expanded as a &lt;code&gt;make&lt;/code&gt; variable in the context&lt;br&gt;of these temporary assignments.  Thus, any reference to &lt;code&gt;$(1)&lt;/code&gt; in&lt;br&gt;the value of &lt;var&gt;variable&lt;/var&gt; will resolve to the first &lt;var&gt;param&lt;/var&gt; in the&lt;br&gt;invocation of &lt;code&gt;call&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Note that &lt;var&gt;variable&lt;/var&gt; is the &lt;em&gt;name&lt;/em&gt; of a variable, not a&lt;br&gt;&lt;em&gt;reference&lt;/em&gt; to that variable.  Therefore you would not normally use&lt;br&gt;a ‘&lt;samp&gt;$&lt;/samp&gt;’ or parentheses when writing it.  (You can, however, use a&lt;br&gt;variable reference in the name if you want the name not to be a&lt;br&gt;constant.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If &lt;var&gt;variable&lt;/var&gt; is the name of a built-in function, the built-in function&lt;br&gt;is always invoked (even if a &lt;code&gt;make&lt;/code&gt; variable by that name also&lt;br&gt;exists).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;call&lt;/code&gt; function expands the &lt;var&gt;param&lt;/var&gt; arguments before&lt;br&gt;assigning them to temporary variables.  This means that &lt;var&gt;variable&lt;/var&gt;&lt;br&gt;values containing references to built-in functions that have special&lt;br&gt;expansion rules, like &lt;code&gt;foreach&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt;, may not work as you&lt;br&gt;expect.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Some examples may make this clearer.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This macro simply reverses its arguments:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;reverse = $(2) $(1)&lt;br&gt;&lt;br&gt;foo = $(call reverse,a,b)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here &lt;var&gt;foo&lt;/var&gt; will contain ‘&lt;samp&gt;b a&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This one is slightly more interesting: it defines a macro to search for&lt;br&gt;the first instance of a program in &lt;code&gt;PATH&lt;/code&gt;:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;pathsearch = $(firstword $(wildcard $(addsuffix /$(1),$(subst :, ,$(PATH)))))&lt;br&gt;&lt;br&gt;LS := $(call pathsearch,ls)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Now the variable LS contains &lt;code&gt;/bin/ls&lt;/code&gt; or similar.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;call&lt;/code&gt; function can be nested.  Each recursive invocation gets&lt;br&gt;its own local values for &lt;code&gt;$(1)&lt;/code&gt;, etc. that mask the values of&lt;br&gt;higher-level &lt;code&gt;call&lt;/code&gt;.  For example, here is an implementation of a&lt;br&gt;&lt;em&gt;map&lt;/em&gt; function:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;map = $(foreach a,$(2),$(call $(1),$(a)))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Now you can &lt;var&gt;map&lt;/var&gt; a function that normally takes only one argument,&lt;br&gt;such as &lt;code&gt;origin&lt;/code&gt;, to multiple values in one step:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;o = $(call map,origin,o map MAKE)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;and end up with &lt;var&gt;o&lt;/var&gt; containing something like ‘&lt;samp&gt;file file default&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A final caution: be careful when adding whitespace to the arguments to&lt;br&gt;&lt;code&gt;call&lt;/code&gt;.  As with other functions, any whitespace contained in the&lt;br&gt;second and subsequent arguments is kept; this can cause strange&lt;br&gt;effects.  It’s generally safest to remove all extraneous whitespace when&lt;br&gt;providing parameters to &lt;code&gt;call&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Value-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Eval-Function&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Eval Function&lt;/a&gt;, Previous: &lt;a href=&quot;#Call-Function&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Call Function&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-value-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.8 The &lt;code&gt;value&lt;/code&gt; Function&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-value-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-unexpanded-value&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; function provides a way for you to use the value of a&lt;br&gt;variable &lt;em&gt;without&lt;/em&gt; having it expanded.  Please note that this&lt;br&gt;does not undo expansions which have already occurred; for example if&lt;br&gt;you create a simply expanded variable its value is expanded during the&lt;br&gt;definition; in that case the &lt;code&gt;value&lt;/code&gt; function will return the&lt;br&gt;same result as using the variable directly.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The syntax of the &lt;code&gt;value&lt;/code&gt; function is:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(value &lt;var&gt;variable&lt;/var&gt;)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Note that &lt;var&gt;variable&lt;/var&gt; is the &lt;em&gt;name&lt;/em&gt; of a variable, not a&lt;br&gt;&lt;em&gt;reference&lt;/em&gt; to that variable.  Therefore you would not normally&lt;br&gt;use a ‘&lt;samp&gt;$&lt;/samp&gt;’ or parentheses when writing it.  (You can, however, use&lt;br&gt;a variable reference in the name if you want the name not to be a&lt;br&gt;constant.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The result of this function is a string containing the value of&lt;br&gt;&lt;var&gt;variable&lt;/var&gt;, without any expansion occurring.  For example, in this&lt;br&gt;makefile:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;FOO = $PATH&lt;br&gt;&lt;br&gt;all:&lt;br&gt;        @echo $(FOO)&lt;br&gt;        @echo $(value FOO)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The first output line would be &lt;code&gt;ATH&lt;/code&gt;, since the “$P” would be&lt;br&gt;expanded as a &lt;code&gt;make&lt;/code&gt; variable, while the second output line would&lt;br&gt;be the current value of your &lt;code&gt;$PATH&lt;/code&gt; environment variable, since&lt;br&gt;the &lt;code&gt;value&lt;/code&gt; function avoided the expansion.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; function is most often used in conjunction with the&lt;br&gt;&lt;code&gt;eval&lt;/code&gt; function (see &lt;a href=&quot;#Eval-Function&quot;&gt;Eval Function&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Eval-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Origin-Function&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Origin Function&lt;/a&gt;, Previous: &lt;a href=&quot;#Value-Function&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Value Function&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-eval-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.9 The &lt;code&gt;eval&lt;/code&gt; Function&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-eval&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-evaluating-makefile-syntax&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makefile-syntax_002c-evaluating&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;eval&lt;/code&gt; function is very special: it allows you to define new&lt;br&gt;makefile constructs that are not constant; which are the result of&lt;br&gt;evaluating other variables and functions.  The argument to the&lt;br&gt;&lt;code&gt;eval&lt;/code&gt; function is expanded, then the results of that expansion&lt;br&gt;are parsed as makefile syntax.  The expanded results can define new&lt;br&gt;&lt;code&gt;make&lt;/code&gt; variables, targets, implicit or explicit rules, etc.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The result of the &lt;code&gt;eval&lt;/code&gt; function is always the empty string;&lt;br&gt;thus, it can be placed virtually anywhere in a makefile without&lt;br&gt;causing syntax errors.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;It’s important to realize that the &lt;code&gt;eval&lt;/code&gt; argument is expanded&lt;br&gt;&lt;em&gt;twice&lt;/em&gt;; first by the &lt;code&gt;eval&lt;/code&gt; function, then the results of&lt;br&gt;that expansion are expanded again when they are parsed as makefile&lt;br&gt;syntax.  This means you may need to provide extra levels of escaping&lt;br&gt;for “$” characters when using &lt;code&gt;eval&lt;/code&gt;.  The &lt;code&gt;value&lt;/code&gt;&lt;br&gt;function (see &lt;a href=&quot;#Value-Function&quot;&gt;Value Function&lt;/a&gt;) can sometimes be useful in these&lt;br&gt;situations, to circumvent unwanted expansions.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is an example of how &lt;code&gt;eval&lt;/code&gt; can be used; this example&lt;br&gt;combines a number of concepts and other functions.  Although it might&lt;br&gt;seem overly complex to use &lt;code&gt;eval&lt;/code&gt; in this example, rather than&lt;br&gt;just writing out the rules, consider two things: first, the template&lt;br&gt;definition (in &lt;code&gt;PROGRAM_template&lt;/code&gt;) could need to be much more&lt;br&gt;complex than it is here; and second, you might put the complex,&lt;br&gt;“generic” part of this example into another makefile, then include&lt;br&gt;it in all the individual makefiles.  Now your individual makefiles are&lt;br&gt;quite straightforward.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;PROGRAMS    = server client&lt;br&gt;&lt;br&gt;server_OBJS = server.o server_priv.o server_access.o&lt;br&gt;server_LIBS = priv protocol&lt;br&gt;&lt;br&gt;client_OBJS = client.o client_api.o client_mem.o&lt;br&gt;client_LIBS = protocol&lt;br&gt;&lt;br&gt;# Everything after this is generic&lt;br&gt;&lt;br&gt;.PHONY: all&lt;br&gt;all: $(PROGRAMS)&lt;br&gt;&lt;br&gt;define PROGRAM_template =&lt;br&gt; $(1): $$($(1)_OBJS) $$($(1)_LIBS:%=-l%)&lt;br&gt; ALL_OBJS   += $$($(1)_OBJS)&lt;br&gt;endef&lt;br&gt;&lt;br&gt;$(foreach prog,$(PROGRAMS),$(eval $(call PROGRAM_template,$(prog))))&lt;br&gt;&lt;br&gt;$(PROGRAMS):&lt;br&gt;        $(LINK.o) $^ $(LDLIBS) -o $@&lt;br&gt;&lt;br&gt;clean:&lt;br&gt;        rm -f $(ALL_OBJS) $(PROGRAMS)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Origin-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Flavor-Function&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Flavor Function&lt;/a&gt;, Previous: &lt;a href=&quot;#Eval-Function&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Eval Function&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-origin-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.10 The &lt;code&gt;origin&lt;/code&gt; Function&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-origin&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-origin-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-origin-of-variable&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;origin&lt;/code&gt; function is unlike most other functions in that it does&lt;br&gt;not operate on the values of variables; it tells you something &lt;em&gt;about&lt;/em&gt;&lt;br&gt;a variable.  Specifically, it tells you where it came from.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The syntax of the &lt;code&gt;origin&lt;/code&gt; function is:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(origin &lt;var&gt;variable&lt;/var&gt;)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Note that &lt;var&gt;variable&lt;/var&gt; is the &lt;em&gt;name&lt;/em&gt; of a variable to inquire about,&lt;br&gt;not a &lt;em&gt;reference&lt;/em&gt; to that variable.  Therefore you would not normally&lt;br&gt;use a ‘&lt;samp&gt;$&lt;/samp&gt;’ or parentheses when writing it.  (You can, however, use a&lt;br&gt;variable reference in the name if you want the name not to be a constant.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The result of this function is a string telling you how the variable&lt;br&gt;&lt;var&gt;variable&lt;/var&gt; was defined:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;undefined&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;if &lt;var&gt;variable&lt;/var&gt; was never defined.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;default&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;if &lt;var&gt;variable&lt;/var&gt; has a default definition, as is usual with &lt;code&gt;CC&lt;/code&gt;&lt;br&gt;and so on.  See &lt;a href=&quot;#Implicit-Variables&quot;&gt;Variables Used by Implicit Rules&lt;/a&gt;.&lt;br&gt;Note that if you have redefined a default variable, the &lt;code&gt;origin&lt;/code&gt;&lt;br&gt;function will return the origin of the later definition.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;environment&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;if &lt;var&gt;variable&lt;/var&gt; was inherited from the environment provided to&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;environment override&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;if &lt;var&gt;variable&lt;/var&gt; was inherited from the environment provided to&lt;br&gt;&lt;code&gt;make&lt;/code&gt;, and is overriding a setting for &lt;var&gt;variable&lt;/var&gt; in the&lt;br&gt;makefile as a result of the ‘&lt;samp&gt;&lt;span class=&quot;nolinebreak&quot;&gt;-e&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; option (see &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;file&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;if &lt;var&gt;variable&lt;/var&gt; was defined in a makefile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;command line&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;if &lt;var&gt;variable&lt;/var&gt; was defined on the command line.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;override&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;if &lt;var&gt;variable&lt;/var&gt; was defined with an &lt;code&gt;override&lt;/code&gt; directive in a&lt;br&gt;makefile (see &lt;a href=&quot;#Override-Directive&quot;&gt;The &lt;code&gt;override&lt;/code&gt; Directive&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;automatic&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;if &lt;var&gt;variable&lt;/var&gt; is an automatic variable defined for the execution&lt;br&gt;of the recipe for each rule (see &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This information is primarily useful (other than for your curiosity) to&lt;br&gt;determine if you want to believe the value of a variable.  For example,&lt;br&gt;suppose you have a makefile &lt;samp&gt;foo&lt;/samp&gt; that includes another makefile&lt;br&gt;&lt;samp&gt;bar&lt;/samp&gt;.  You want a variable &lt;code&gt;bletch&lt;/code&gt; to be defined in &lt;samp&gt;bar&lt;/samp&gt;&lt;br&gt;if you run the command ‘&lt;samp&gt;make&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-f&lt;/span&gt;&amp;nbsp;bar&lt;/samp&gt;’&lt;!-- /@w --&gt;, even if the environment contains&lt;br&gt;a definition of &lt;code&gt;bletch&lt;/code&gt;.  However, if &lt;samp&gt;foo&lt;/samp&gt; defined&lt;br&gt;&lt;code&gt;bletch&lt;/code&gt; before including &lt;samp&gt;bar&lt;/samp&gt;, you do not want to override that&lt;br&gt;definition.  This could be done by using an &lt;code&gt;override&lt;/code&gt; directive in&lt;br&gt;&lt;samp&gt;foo&lt;/samp&gt;, giving that definition precedence over the later definition in&lt;br&gt;&lt;samp&gt;bar&lt;/samp&gt;; unfortunately, the &lt;code&gt;override&lt;/code&gt; directive would also&lt;br&gt;override any command line definitions.  So, &lt;samp&gt;bar&lt;/samp&gt; could&lt;br&gt;include:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ifdef bletch&lt;br&gt;ifeq “$(origin bletch)” “environment”&lt;br&gt;bletch = barf, gag, etc.&lt;br&gt;endif&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If &lt;code&gt;bletch&lt;/code&gt; has been defined from the environment, this will redefine&lt;br&gt;it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you want to override a previous definition of &lt;code&gt;bletch&lt;/code&gt; if it came&lt;br&gt;from the environment, even under ‘&lt;samp&gt;-e&lt;/samp&gt;’, you could instead write:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ifneq “$(findstring environment,$(origin bletch))” “”&lt;br&gt;bletch = barf, gag, etc.&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here the redefinition takes place if ‘&lt;samp&gt;$(origin bletch)&lt;/samp&gt;’ returns either&lt;br&gt;‘&lt;samp&gt;environment&lt;/samp&gt;’ or ‘&lt;samp&gt;environment override&lt;/samp&gt;’.&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Flavor-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Make-Control-Functions&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Make Control Functions&lt;/a&gt;, Previous: &lt;a href=&quot;#Origin-Function&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Origin Function&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-flavor-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.11 The &lt;code&gt;flavor&lt;/code&gt; Function&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-flavor&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-flavor-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-flavor-of-variable&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;flavor&lt;/code&gt; function, like the &lt;code&gt;origin&lt;/code&gt; function, does not&lt;br&gt;operate on the values of variables but rather it tells you something&lt;br&gt;&lt;em&gt;about&lt;/em&gt; a variable.  Specifically, it tells you the flavor of a&lt;br&gt;variable (see &lt;a href=&quot;#Flavors&quot;&gt;The Two Flavors of Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The syntax of the &lt;code&gt;flavor&lt;/code&gt; function is:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(flavor &lt;var&gt;variable&lt;/var&gt;)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Note that &lt;var&gt;variable&lt;/var&gt; is the &lt;em&gt;name&lt;/em&gt; of a variable to inquire about,&lt;br&gt;not a &lt;em&gt;reference&lt;/em&gt; to that variable.  Therefore you would not normally&lt;br&gt;use a ‘&lt;samp&gt;$&lt;/samp&gt;’ or parentheses when writing it.  (You can, however, use a&lt;br&gt;variable reference in the name if you want the name not to be a constant.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The result of this function is a string that identifies the flavor of the&lt;br&gt;variable &lt;var&gt;variable&lt;/var&gt;:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;undefined&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;if &lt;var&gt;variable&lt;/var&gt; was never defined.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;recursive&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;if &lt;var&gt;variable&lt;/var&gt; is a recursively expanded variable.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;simple&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;if &lt;var&gt;variable&lt;/var&gt; is a simply expanded variable.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Make-Control-Functions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Shell-Function&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Shell Function&lt;/a&gt;, Previous: &lt;a href=&quot;#Flavor-Function&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Flavor Function&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Functions-That-Control-Make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.12 Functions That Control Make&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-functions_002c-for-controlling-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-controlling-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;These functions control the way make runs.  Generally, they are used to&lt;br&gt;provide information to the user of the makefile or to cause make to stop&lt;br&gt;if some sort of environmental error is detected.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(error &lt;var&gt;text&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-error&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-error_002c-stopping-on&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-stopping-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Generates a fatal error where the message is &lt;var&gt;text&lt;/var&gt;.  Note that&lt;br&gt;the error is generated whenever this function is evaluated.  So, if&lt;br&gt;you put it inside a recipe or on the right side of a recursive&lt;br&gt;variable assignment, it won’t be evaluated until later.  The&lt;br&gt;&lt;var&gt;text&lt;/var&gt; will be expanded before the error is generated.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ifdef ERROR1&lt;br&gt;$(error error is $(ERROR1))&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will generate a fatal error during the read of the makefile if the&lt;br&gt;&lt;code&gt;make&lt;/code&gt; variable &lt;code&gt;ERROR1&lt;/code&gt; is defined.  Or,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ERR = $(error found an error!)&lt;br&gt;&lt;br&gt;.PHONY: err&lt;br&gt;err: ; $(ERR)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will generate a fatal error while &lt;code&gt;make&lt;/code&gt; is running, if the&lt;br&gt;&lt;code&gt;err&lt;/code&gt; target is invoked.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(warning &lt;var&gt;text&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-warning&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-warnings_002c-printing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-printing-user-warnings&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;This function works similarly to the &lt;code&gt;error&lt;/code&gt; function, above,&lt;br&gt;except that &lt;code&gt;make&lt;/code&gt; doesn’t exit.  Instead, &lt;var&gt;text&lt;/var&gt; is expanded&lt;br&gt;and the resulting message is displayed, but processing of the makefile&lt;br&gt;continues.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The result of the expansion of this function is the empty string.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(info &lt;var&gt;text&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-info&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-printing-messages&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;This function does nothing more than print its (expanded) argument(s)&lt;br&gt;to standard output.  No makefile name or line number is added.  The&lt;br&gt;result of the expansion of this function is the empty string.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Shell-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Guile-Function&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Guile Function&lt;/a&gt;, Previous: &lt;a href=&quot;#Make-Control-Functions&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Make Control Functions&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-shell-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.13 The &lt;code&gt;shell&lt;/code&gt; Function&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-shell&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-command-expansion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-backquotes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-shell-command_002c-function-for&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;shell&lt;/code&gt; function is unlike any other function other than the&lt;br&gt;&lt;code&gt;wildcard&lt;/code&gt; function&lt;br&gt;(see &lt;a href=&quot;#Wildcard-Function&quot;&gt;The Function &lt;code&gt;wildcard&lt;/code&gt;&lt;/a&gt;) in that it&lt;br&gt;communicates with the world outside of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;shell&lt;/code&gt; function performs the same function that backquotes&lt;br&gt;(‘&lt;samp&gt;`&lt;/samp&gt;’) perform in most shells: it does &lt;em&gt;command expansion&lt;/em&gt;.&lt;br&gt;This means that it takes as an argument a shell command and evaluates&lt;br&gt;to the output of the command.  The only processing &lt;code&gt;make&lt;/code&gt; does on&lt;br&gt;the result is to convert each newline (or carriage-return / newline&lt;br&gt;pair) to a single space.  If there is a trailing (carriage-return&lt;br&gt;and) newline it will simply be removed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The commands run by calls to the &lt;code&gt;shell&lt;/code&gt; function are run when the&lt;br&gt;function calls are expanded (see &lt;a href=&quot;#Reading-Makefiles&quot;&gt;How&lt;br&gt;&lt;code&gt;make&lt;/code&gt; Reads a Makefile&lt;/a&gt;).  Because this function involves&lt;br&gt;spawning a new shell, you should carefully consider the performance&lt;br&gt;implications of using the &lt;code&gt;shell&lt;/code&gt; function within recursively&lt;br&gt;expanded variables vs. simply expanded variables (see &lt;a href=&quot;#Flavors&quot;&gt;The&lt;br&gt;Two Flavors of Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eSHELLSTATUS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;After the &lt;code&gt;shell&lt;/code&gt; function or ‘&lt;samp&gt;!=&lt;/samp&gt;’ assignment operator is&lt;br&gt;used, its exit status is placed in the &lt;code&gt;.SHELLSTATUS&lt;/code&gt; variable.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here are some examples of the use of the &lt;code&gt;shell&lt;/code&gt; function:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;contents := $(shell cat foo)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;sets &lt;code&gt;contents&lt;/code&gt; to the contents of the file &lt;samp&gt;foo&lt;/samp&gt;, with a space&lt;br&gt;(rather than a newline) separating each line.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;files := $(shell echo &lt;em&gt;.c)&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;sets &lt;code&gt;files&lt;/code&gt; to the expansion of ‘&lt;samp&gt;.c&lt;/samp&gt;’.  Unless &lt;code&gt;make&lt;/code&gt; is&lt;br&gt;using a very strange shell, this has the same result as&lt;br&gt;‘&lt;samp&gt;$(wildcard&amp;nbsp;&lt;em&gt;.c)&lt;/em&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; (as long as at least one ‘&lt;samp&gt;.c&lt;/samp&gt;’ file&lt;br&gt;exists).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Guile-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Shell-Function&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Shell Function&lt;/a&gt;, Up: &lt;a href=&quot;#Functions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Functions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-guile-Function&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;8.14 The &lt;code&gt;guile&lt;/code&gt; Function&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-guile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-Guile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If GNU &lt;code&gt;make&lt;/code&gt; is built with support for GNU Guile as an embedded&lt;br&gt;extension language then the &lt;code&gt;guile&lt;/code&gt; function will be available.&lt;br&gt;The &lt;code&gt;guile&lt;/code&gt; function takes one argument which is first expanded&lt;br&gt;by &lt;code&gt;make&lt;/code&gt; in the normal fashion, then passed to the GNU Guile&lt;br&gt;evaluator.  The result of the evaluator is converted into a string and&lt;br&gt;used as the expansion of the &lt;code&gt;guile&lt;/code&gt; function in the makefile.&lt;br&gt;See &lt;a href=&quot;#Guile-Integration&quot;&gt;GNU Guile Integration&lt;/a&gt; for details on&lt;br&gt;writing extensions to &lt;code&gt;make&lt;/code&gt; in Guile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can determine whether GNU Guile support is available by checking&lt;br&gt;the &lt;code&gt;.FEATURES&lt;/code&gt; variable for the word &lt;var&gt;guile&lt;/var&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Running&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Implicit-Rules&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Implicit Rules&lt;/a&gt;, Previous: &lt;a href=&quot;#Functions&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Functions&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;How-to-Run-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;9 How to Run &lt;code&gt;make&lt;/code&gt;&lt;/h2&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A makefile that says how to recompile a program can be used in more&lt;br&gt;than one way.  The simplest use is to recompile every file that is out&lt;br&gt;of date.  Usually, makefiles are written so that if you run&lt;br&gt;&lt;code&gt;make&lt;/code&gt; with no arguments, it does just that.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;But you might want to update only some of the files; you might want to use&lt;br&gt;a different compiler or different compiler options; you might want just to&lt;br&gt;find out which files are out of date without changing them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;By giving arguments when you run &lt;code&gt;make&lt;/code&gt;, you can do any of these&lt;br&gt;things and many others.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-exit-status-of-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The exit status of &lt;code&gt;make&lt;/code&gt; is always one of three values:&lt;br&gt;&lt;/p&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;0&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The exit status is zero if &lt;code&gt;make&lt;/code&gt; is successful.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;2&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The exit status is two if &lt;code&gt;make&lt;/code&gt; encounters any errors.&lt;br&gt;It will print messages describing the particular errors.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;1&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The exit status is one if you use the ‘&lt;samp&gt;-q&lt;/samp&gt;’ flag and &lt;code&gt;make&lt;/code&gt;&lt;br&gt;determines that some target is not already up to date.&lt;br&gt;See &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Executing Recipes&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Makefile-Arguments&quot; accesskey=&quot;1&quot;&gt;Makefile Arguments&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to specify which makefile to use.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Goals&quot; accesskey=&quot;2&quot;&gt;Goals&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use goal arguments to specify which&lt;br&gt;                                  parts of the makefile to use.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Instead-of-Execution&quot; accesskey=&quot;3&quot;&gt;Instead of Execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use mode flags to specify what&lt;br&gt;                                  kind of thing to do with the recipes&lt;br&gt;                                  in the makefile other than simply&lt;br&gt;                                  execute them.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Avoiding-Compilation&quot; accesskey=&quot;4&quot;&gt;Avoiding Compilation&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to avoid recompiling certain files.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Overriding&quot; accesskey=&quot;5&quot;&gt;Overriding&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to override a variable to specify&lt;br&gt;                                  an alternate compiler and other things.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Testing&quot; accesskey=&quot;6&quot;&gt;Testing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to proceed past some errors, to&lt;br&gt;                                  test compilation.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Options-Summary&quot; accesskey=&quot;7&quot;&gt;Options Summary&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Summary of Options&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Makefile-Arguments&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Goals&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Goals&lt;/a&gt;, Previous: &lt;a href=&quot;#Running&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Running&lt;/a&gt;, Up: &lt;a href=&quot;#Running&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Running&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Arguments-to-Specify-the-Makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;9.1 Arguments to Specify the Makefile&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dfile-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dmakefile-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002df-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The way to specify the name of the makefile is with the ‘&lt;samp&gt;-f&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;–file&lt;/samp&gt;’ option (‘&lt;samp&gt;–makefile&lt;/samp&gt;’ also works).  For example,&lt;br&gt;‘&lt;samp&gt;-f altmake&lt;/samp&gt;’ says to use the file &lt;samp&gt;altmake&lt;/samp&gt; as the makefile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you use the ‘&lt;samp&gt;-f&lt;/samp&gt;’ flag several times and follow each ‘&lt;samp&gt;-f&lt;/samp&gt;’&lt;br&gt;with an argument, all the specified files are used jointly as&lt;br&gt;makefiles.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you do not use the ‘&lt;samp&gt;-f&lt;/samp&gt;’ or ‘&lt;samp&gt;–file&lt;/samp&gt;’ flag, the default is&lt;br&gt;to try &lt;samp&gt;GNUmakefile&lt;/samp&gt;, &lt;samp&gt;makefile&lt;/samp&gt;, and &lt;samp&gt;Makefile&lt;/samp&gt;, in&lt;br&gt;that order, and use the first of these three which exists or can be made&lt;br&gt;(see &lt;a href=&quot;#Makefiles&quot;&gt;Writing Makefiles&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Goals&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Instead-of-Execution&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Instead of Execution&lt;/a&gt;, Previous: &lt;a href=&quot;#Makefile-Arguments&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Makefile Arguments&lt;/a&gt;, Up: &lt;a href=&quot;#Running&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Running&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Arguments-to-Specify-the-Goals&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;9.2 Arguments to Specify the Goals&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-goal_002c-how-to-specify&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;em&gt;goals&lt;/em&gt; are the targets that &lt;code&gt;make&lt;/code&gt; should strive ultimately&lt;br&gt;to update.  Other targets are updated as well if they appear as&lt;br&gt;prerequisites of goals, or prerequisites of prerequisites of goals, etc.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;By default, the goal is the first target in the makefile (not counting&lt;br&gt;targets that start with a period).  Therefore, makefiles are usually&lt;br&gt;written so that the first target is for compiling the entire program or&lt;br&gt;programs they describe.  If the first rule in the makefile has several&lt;br&gt;targets, only the first target in the rule becomes the default goal, not&lt;br&gt;the whole list.  You can manage the selection of the default goal from&lt;br&gt;within your makefile using the &lt;code&gt;.DEFAULT_GOAL&lt;/code&gt; variable&lt;br&gt;(see &lt;a href=&quot;#Special-Variables&quot;&gt;Other Special Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can also specify a different goal or goals with command line&lt;br&gt;arguments to &lt;code&gt;make&lt;/code&gt;.  Use the name of the goal as an argument.&lt;br&gt;If you specify several goals, &lt;code&gt;make&lt;/code&gt; processes each of them in&lt;br&gt;turn, in the order you name them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Any target in the makefile may be specified as a goal (unless it&lt;br&gt;starts with ‘&lt;samp&gt;-&lt;/samp&gt;’ or contains an ‘&lt;samp&gt;=&lt;/samp&gt;’, in which case it will be&lt;br&gt;parsed as a switch or variable definition, respectively).  Even&lt;br&gt;targets not in the makefile may be specified, if &lt;code&gt;make&lt;/code&gt; can find&lt;br&gt;implicit rules that say how to make them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-MAKECMDGOALS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;Make&lt;/code&gt; will set the special variable &lt;code&gt;MAKECMDGOALS&lt;/code&gt; to the&lt;br&gt;list of goals you specified on the command line.  If no goals were given&lt;br&gt;on the command line, this variable is empty.  Note that this variable&lt;br&gt;should be used only in special circumstances.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;An example of appropriate use is to avoid including &lt;samp&gt;.d&lt;/samp&gt; files&lt;br&gt;during &lt;code&gt;clean&lt;/code&gt; rules (see &lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;), so&lt;br&gt;&lt;code&gt;make&lt;/code&gt; won’t create them only to immediately remove them&lt;br&gt;again:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;sources = foo.c bar.c&lt;br&gt;&lt;br&gt;ifneq ($(MAKECMDGOALS),clean)&lt;br&gt;include $(sources:.c=.d)&lt;br&gt;endif&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;One use of specifying a goal is if you want to compile only a part of&lt;br&gt;the program, or only one of several programs.  Specify as a goal each&lt;br&gt;file that you wish to remake.  For example, consider a directory containing&lt;br&gt;several programs, with a makefile that starts like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.PHONY: all&lt;br&gt;all: size nm ld ar as&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you are working on the program &lt;code&gt;size&lt;/code&gt;, you might want to say&lt;br&gt;‘&lt;samp&gt;make&amp;nbsp;size&lt;/samp&gt;’&lt;!-- /@w --&gt; so that only the files of that program are recompiled.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Another use of specifying a goal is to make files that are not normally&lt;br&gt;made.  For example, there may be a file of debugging output, or a&lt;br&gt;version of the program that is compiled specially for testing, which has&lt;br&gt;a rule in the makefile but is not a prerequisite of the default goal.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Another use of specifying a goal is to run the recipe associated with&lt;br&gt;a phony target (see &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;) or empty target (see &lt;a href=&quot;#Empty-Targets&quot;&gt;Empty Target Files to Record Events&lt;/a&gt;).  Many makefiles contain&lt;br&gt;a phony target named &lt;samp&gt;clean&lt;/samp&gt; which deletes everything except source&lt;br&gt;files.  Naturally, this is done only if you request it explicitly with&lt;br&gt;‘&lt;samp&gt;make&amp;nbsp;clean&lt;/samp&gt;’&lt;!-- /@w --&gt;.  Following is a list of typical phony and empty&lt;br&gt;target names.  See &lt;a href=&quot;#Standard-Targets&quot;&gt;Standard Targets&lt;/a&gt;, for a detailed list of all the&lt;br&gt;standard target names which GNU software packages use.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;all&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-all-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Make all the top-level targets the makefile knows about.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;clean&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-clean-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Delete all files that are normally created by running &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;mostlyclean&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-mostlyclean-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Like ‘&lt;samp&gt;clean&lt;/samp&gt;’, but may refrain from deleting a few files that people&lt;br&gt;normally don’t want to recompile.  For example, the ‘&lt;samp&gt;mostlyclean&lt;/samp&gt;’&lt;br&gt;target for GCC does not delete &lt;samp&gt;libgcc.a&lt;/samp&gt;, because recompiling it&lt;br&gt;is rarely necessary and takes a lot of time.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;distclean&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-distclean-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;realclean&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-realclean-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;clobber&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-clobber-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Any of these targets might be defined to delete &lt;em&gt;more&lt;/em&gt; files than&lt;br&gt;‘&lt;samp&gt;clean&lt;/samp&gt;’ does.  For example, this would delete configuration files&lt;br&gt;or links that you would normally create as preparation for compilation,&lt;br&gt;even if the makefile itself cannot create these files.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;install&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-install-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Copy the executable file into a directory that users typically search&lt;br&gt;for commands; copy any auxiliary files that the executable uses into&lt;br&gt;the directories where it will look for them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;print&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-print-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Print listings of the source files that have changed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;tar&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-tar-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Create a tar file of the source files.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;shar&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-shar-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Create a shell archive (shar file) of the source files.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;dist&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-dist-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Create a distribution file of the source files.  This might&lt;br&gt;be a tar file, or a shar file, or a compressed version of one of the&lt;br&gt;above, or even more than one of the above.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;TAGS&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-TAGS-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Update a tags table for this program.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;check&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-check-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;samp&gt;test&lt;/samp&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-test-_0028standard-target_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Perform self tests on the program this makefile builds.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Instead-of-Execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Avoiding-Compilation&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Avoiding Compilation&lt;/a&gt;, Previous: &lt;a href=&quot;#Goals&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Goals&lt;/a&gt;, Up: &lt;a href=&quot;#Running&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Running&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Instead-of-Executing-Recipes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;9.3 Instead of Executing Recipes&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-execution_002c-instead-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recipes_002c-instead-of-executing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The makefile tells &lt;code&gt;make&lt;/code&gt; how to tell whether a target is up to date,&lt;br&gt;and how to update each target.  But updating the targets is not always&lt;br&gt;what you want.  Certain options specify other activities for &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-n&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–just-print&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–dry-run&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–recon&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002djust_002dprint-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002ddry_002drun-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002drecon-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dn-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;“No-op”.  Causes &lt;code&gt;make&lt;/code&gt; to print the recipes that are needed to&lt;br&gt;make the targets up to date, but not actually execute them.  Note that&lt;br&gt;some recipes are still executed, even with this flag (see &lt;a href=&quot;#MAKE-Variable&quot;&gt;How the &lt;code&gt;MAKE&lt;/code&gt; Variable Works&lt;/a&gt;).  Also any recipes&lt;br&gt;needed to update included makefiles are still executed&lt;br&gt;(see &lt;a href=&quot;#Remaking-Makefiles&quot;&gt;How Makefiles Are Remade&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-t&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–touch&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dtouch&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-touching-files&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-target_002c-touching&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dt&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;“Touch”.  Marks targets as up to date without actually changing&lt;br&gt;them.  In other words, &lt;code&gt;make&lt;/code&gt; pretends to update the targets but&lt;br&gt;does not really change their contents; instead only their modified&lt;br&gt;times are updated.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-q&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–question&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dquestion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dq&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-question-mode&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;“Question”.  Silently check whether the targets are up to date, but&lt;br&gt;do not execute recipes; the exit code shows whether any updates are&lt;br&gt;needed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-W &lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–what-if=&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–assume-new=&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–new-file=&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dwhat_002dif&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dW&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dassume_002dnew&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dnew_002dfile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-what-if&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-files_002c-assuming-new&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;“What if”.  Each ‘&lt;samp&gt;-W&lt;/samp&gt;’ flag is followed by a file name.  The given&lt;br&gt;files’ modification times are recorded by &lt;code&gt;make&lt;/code&gt; as being the present&lt;br&gt;time, although the actual modification times remain the same.&lt;br&gt;You can use the ‘&lt;samp&gt;-W&lt;/samp&gt;’ flag in conjunction with the ‘&lt;samp&gt;-n&lt;/samp&gt;’ flag&lt;br&gt;to see what would happen if you were to modify specific files.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;With the ‘&lt;samp&gt;-n&lt;/samp&gt;’ flag, &lt;code&gt;make&lt;/code&gt; prints the recipe that it would&lt;br&gt;normally execute but usually does not execute it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;With the ‘&lt;samp&gt;-t&lt;/samp&gt;’ flag, &lt;code&gt;make&lt;/code&gt; ignores the recipes in the rules&lt;br&gt;and uses (in effect) the command &lt;code&gt;touch&lt;/code&gt; for each target that needs to&lt;br&gt;be remade.  The &lt;code&gt;touch&lt;/code&gt; command is also printed, unless ‘&lt;samp&gt;-s&lt;/samp&gt;’ or&lt;br&gt;&lt;code&gt;.SILENT&lt;/code&gt; is used.  For speed, &lt;code&gt;make&lt;/code&gt; does not actually invoke&lt;br&gt;the program &lt;code&gt;touch&lt;/code&gt;.  It does the work directly.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;With the ‘&lt;samp&gt;-q&lt;/samp&gt;’ flag, &lt;code&gt;make&lt;/code&gt; prints nothing and executes no&lt;br&gt;recipes, but the exit status code it returns is zero if and only if the&lt;br&gt;targets to be considered are already up to date.  If the exit status is&lt;br&gt;one, then some updating needs to be done.  If &lt;code&gt;make&lt;/code&gt; encounters an&lt;br&gt;error, the exit status is two, so you can distinguish an error from a&lt;br&gt;target that is not up to date.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;It is an error to use more than one of these three flags in the same&lt;br&gt;invocation of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002b_002c-and-recipe-execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The ‘&lt;samp&gt;-n&lt;/samp&gt;’, ‘&lt;samp&gt;-t&lt;/samp&gt;’, and ‘&lt;samp&gt;-q&lt;/samp&gt;’ options do not affect recipe&lt;br&gt;lines that begin with ‘&lt;samp&gt;+&lt;/samp&gt;’ characters or contain the strings&lt;br&gt;‘&lt;samp&gt;$(MAKE)&lt;/samp&gt;’ or ‘&lt;samp&gt;${MAKE}&lt;/samp&gt;’.  Note that only the line containing&lt;br&gt;the ‘&lt;samp&gt;+&lt;/samp&gt;’ character or the strings ‘&lt;samp&gt;$(MAKE)&lt;/samp&gt;’ or ‘&lt;samp&gt;${MAKE}&lt;/samp&gt;’&lt;br&gt;is run regardless of these options.  Other lines in the same rule are&lt;br&gt;not run unless they too begin with ‘&lt;samp&gt;+&lt;/samp&gt;’ or contain ‘&lt;samp&gt;$(MAKE)&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;${MAKE}&lt;/samp&gt;’ (See &lt;a href=&quot;#MAKE-Variable&quot;&gt;How the &lt;code&gt;MAKE&lt;/code&gt; Variable Works&lt;/a&gt;.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-phony-targets-and-recipe-execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The ‘&lt;samp&gt;-t&lt;/samp&gt;’ flag prevents phony targets (see &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;) from&lt;br&gt;being updated, unless there are recipe lines beginning with ‘&lt;samp&gt;+&lt;/samp&gt;’&lt;br&gt;or containing ‘&lt;samp&gt;$(MAKE)&lt;/samp&gt;’ or ‘&lt;samp&gt;${MAKE}&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The ‘&lt;samp&gt;-W&lt;/samp&gt;’ flag provides two features:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; If you also use the ‘&lt;samp&gt;-n&lt;/samp&gt;’ or ‘&lt;samp&gt;-q&lt;/samp&gt;’ flag, you can see what&lt;br&gt;&lt;code&gt;make&lt;/code&gt; would do if you were to modify some files.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Without the ‘&lt;samp&gt;-n&lt;/samp&gt;’ or ‘&lt;samp&gt;-q&lt;/samp&gt;’ flag, when &lt;code&gt;make&lt;/code&gt; is actually&lt;br&gt;executing recipes, the ‘&lt;samp&gt;-W&lt;/samp&gt;’ flag can direct &lt;code&gt;make&lt;/code&gt; to act as&lt;br&gt;if some files had been modified, without actually running the recipes&lt;br&gt;for those files.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Note that the options ‘&lt;samp&gt;-p&lt;/samp&gt;’ and ‘&lt;samp&gt;-v&lt;/samp&gt;’ allow you to obtain other&lt;br&gt;information about &lt;code&gt;make&lt;/code&gt; or about the makefiles in use&lt;br&gt;(see &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Avoiding-Compilation&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Overriding&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Overriding&lt;/a&gt;, Previous: &lt;a href=&quot;#Instead-of-Execution&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Instead of Execution&lt;/a&gt;, Up: &lt;a href=&quot;#Running&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Running&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Avoiding-Recompilation-of-Some-Files&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;9.4 Avoiding Recompilation of Some Files&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-_002do&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dold_002dfile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dassume_002dold&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-files_002c-assuming-old&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-files_002c-avoiding-recompilation-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-recompilation_002c-avoiding&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Sometimes you may have changed a source file but you do not want to&lt;br&gt;recompile all the files that depend on it.  For example, suppose you add&lt;br&gt;a macro or a declaration to a header file that many other files depend&lt;br&gt;on.  Being conservative, &lt;code&gt;make&lt;/code&gt; assumes that any change in the&lt;br&gt;header file requires recompilation of all dependent files, but you know&lt;br&gt;that they do not need to be recompiled and you would rather not waste&lt;br&gt;the time waiting for them to compile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you anticipate the problem before changing the header file, you can&lt;br&gt;use the ‘&lt;samp&gt;-t&lt;/samp&gt;’ flag.  This flag tells &lt;code&gt;make&lt;/code&gt; not to run the&lt;br&gt;recipes in the rules, but rather to mark the target up to date by&lt;br&gt;changing its last-modification date.  You would follow this procedure:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ol&gt;&lt;br&gt;&lt;li&gt; Use the command ‘&lt;samp&gt;make&lt;/samp&gt;’ to recompile the source files that really&lt;br&gt;need recompilation, ensuring that the object files are up-to-date&lt;br&gt;before you begin.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Make the changes in the header files.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Use the command ‘&lt;samp&gt;make -t&lt;/samp&gt;’ to mark all the object files as&lt;br&gt;up to date.  The next time you run &lt;code&gt;make&lt;/code&gt;, the changes in the&lt;br&gt;header files will not cause any recompilation.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you have already changed the header file at a time when some files&lt;br&gt;do need recompilation, it is too late to do this.  Instead, you can&lt;br&gt;use the ‘&lt;samp&gt;&lt;span class=&quot;nolinebreak&quot;&gt;-o&lt;/span&gt;&amp;nbsp;&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; flag, which marks a specified file as&lt;br&gt;“old” (see &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;).  This means&lt;br&gt;that the file itself will not be remade, and nothing else will be&lt;br&gt;remade on its account.  Follow this procedure:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ol&gt;&lt;br&gt;&lt;li&gt; Recompile the source files that need compilation for reasons independent&lt;br&gt;of the particular header file, with ‘&lt;samp&gt;make -o &lt;var&gt;headerfile&lt;/var&gt;&lt;/samp&gt;’.&lt;br&gt;If several header files are involved, use a separate ‘&lt;samp&gt;-o&lt;/samp&gt;’ option&lt;br&gt;for each header file.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Touch all the object files with ‘&lt;samp&gt;make -t&lt;/samp&gt;’.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Overriding&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Testing&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Testing&lt;/a&gt;, Previous: &lt;a href=&quot;#Avoiding-Compilation&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Avoiding Compilation&lt;/a&gt;, Up: &lt;a href=&quot;#Running&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Running&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Overriding-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;9.5 Overriding Variables&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-overriding-variables-with-arguments&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-overriding-with-arguments&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-command-line-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-command-line&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;An argument that contains ‘&lt;samp&gt;=&lt;/samp&gt;’ specifies the value of a variable:&lt;br&gt;‘&lt;samp&gt;&lt;var&gt;v&lt;/var&gt;=&lt;var&gt;x&lt;/var&gt;&lt;/samp&gt;’ sets the value of the variable &lt;var&gt;v&lt;/var&gt; to &lt;var&gt;x&lt;/var&gt;.&lt;br&gt;If you specify a value in this way, all ordinary assignments of the same&lt;br&gt;variable in the makefile are ignored; we say they have been&lt;br&gt;&lt;em&gt;overridden&lt;/em&gt; by the command line argument.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The most common way to use this facility is to pass extra flags to&lt;br&gt;compilers.  For example, in a properly written makefile, the variable&lt;br&gt;&lt;code&gt;CFLAGS&lt;/code&gt; is included in each recipe that runs the C compiler, so a&lt;br&gt;file &lt;samp&gt;foo.c&lt;/samp&gt; would be compiled something like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;cc -c $(CFLAGS) foo.c&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Thus, whatever value you set for &lt;code&gt;CFLAGS&lt;/code&gt; affects each compilation&lt;br&gt;that occurs.  The makefile probably specifies the usual value for&lt;br&gt;&lt;code&gt;CFLAGS&lt;/code&gt;, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;CFLAGS=-g&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Each time you run &lt;code&gt;make&lt;/code&gt;, you can override this value if you&lt;br&gt;wish.  For example, if you say ‘&lt;samp&gt;make CFLAGS=’-g -O’&lt;/samp&gt;’, each C&lt;br&gt;compilation will be done with ‘&lt;samp&gt;cc -c -g -O&lt;/samp&gt;’.  (This also&lt;br&gt;illustrates how you can use quoting in the shell to enclose spaces and&lt;br&gt;other special characters in the value of a variable when you override&lt;br&gt;it.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The variable &lt;code&gt;CFLAGS&lt;/code&gt; is only one of many standard variables that&lt;br&gt;exist just so that you can change them this way.  See &lt;a href=&quot;#Implicit-Variables&quot;&gt;Variables Used by Implicit Rules&lt;/a&gt;, for a complete list.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can also program the makefile to look at additional variables of your&lt;br&gt;own, giving the user the ability to control other aspects of how the&lt;br&gt;makefile works by changing the variables.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When you override a variable with a command line argument, you can&lt;br&gt;define either a recursively-expanded variable or a simply-expanded&lt;br&gt;variable.  The examples shown above make a recursively-expanded&lt;br&gt;variable; to make a simply-expanded variable, write ‘&lt;samp&gt;:=&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;::=&lt;/samp&gt;’ instead of ‘&lt;samp&gt;=&lt;/samp&gt;’.  But, unless you want to include a&lt;br&gt;variable reference or function call in the &lt;em&gt;value&lt;/em&gt; that you&lt;br&gt;specify, it makes no difference which kind of variable you create.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;There is one way that the makefile can change a variable that you have&lt;br&gt;overridden.  This is to use the &lt;code&gt;override&lt;/code&gt; directive, which is a line&lt;br&gt;that looks like this: ‘&lt;samp&gt;override &lt;var&gt;variable&lt;/var&gt; = &lt;var&gt;value&lt;/var&gt;&lt;/samp&gt;’&lt;br&gt;(see &lt;a href=&quot;#Override-Directive&quot;&gt;The &lt;code&gt;override&lt;/code&gt; Directive&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Testing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Options-Summary&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Options Summary&lt;/a&gt;, Previous: &lt;a href=&quot;#Overriding&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Overriding&lt;/a&gt;, Up: &lt;a href=&quot;#Running&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Running&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Testing-the-Compilation-of-a-Program&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;9.6 Testing the Compilation of a Program&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-testing-compilation&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-compilation_002c-testing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Normally, when an error happens in executing a shell command, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;gives up immediately, returning a nonzero status.  No further recipes are&lt;br&gt;executed for any target.  The error implies that the goal cannot be&lt;br&gt;correctly remade, and &lt;code&gt;make&lt;/code&gt; reports this as soon as it knows.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When you are compiling a program that you have just changed, this is not&lt;br&gt;what you want.  Instead, you would rather that &lt;code&gt;make&lt;/code&gt; try compiling&lt;br&gt;every file that can be tried, to show you as many compilation errors&lt;br&gt;as possible.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002dk-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002d_002dkeep_002dgoing-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;On these occasions, you should use the ‘&lt;samp&gt;-k&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;–keep-going&lt;/samp&gt;’ flag.  This tells &lt;code&gt;make&lt;/code&gt; to continue to&lt;br&gt;consider the other prerequisites of the pending targets, remaking them&lt;br&gt;if necessary, before it gives up and returns nonzero status.  For&lt;br&gt;example, after an error in compiling one object file, ‘&lt;samp&gt;make -k&lt;/samp&gt;’&lt;br&gt;will continue compiling other object files even though it already&lt;br&gt;knows that linking them will be impossible.  In addition to continuing&lt;br&gt;after failed shell commands, ‘&lt;samp&gt;make -k&lt;/samp&gt;’ will continue as much as&lt;br&gt;possible after discovering that it does not know how to make a target&lt;br&gt;or prerequisite file.  This will always cause an error message, but&lt;br&gt;without ‘&lt;samp&gt;-k&lt;/samp&gt;’, it is a fatal error (see &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The usual behavior of &lt;code&gt;make&lt;/code&gt; assumes that your purpose is to get the&lt;br&gt;goals up to date; once &lt;code&gt;make&lt;/code&gt; learns that this is impossible, it might&lt;br&gt;as well report the failure immediately.  The ‘&lt;samp&gt;-k&lt;/samp&gt;’ flag says that the&lt;br&gt;real purpose is to test as much as possible of the changes made in the&lt;br&gt;program, perhaps to find several independent problems so that you can&lt;br&gt;correct them all before the next attempt to compile.  This is why Emacs’&lt;br&gt;&lt;kbd&gt;M-x compile&lt;/kbd&gt; command passes the ‘&lt;samp&gt;-k&lt;/samp&gt;’ flag by default.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Options-Summary&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Testing&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Testing&lt;/a&gt;, Up: &lt;a href=&quot;#Running&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Running&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Summary-of-Options&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;9.7 Summary of Options&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-options&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-flags&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-switches&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is a table of all the options &lt;code&gt;make&lt;/code&gt; understands:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-b&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002db&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-m&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dm&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;These options are ignored for compatibility with other versions of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-B&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dB&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–always-make&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dalways_002dmake&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Consider all targets out-of-date.  GNU &lt;code&gt;make&lt;/code&gt; proceeds to&lt;br&gt;consider targets and their prerequisites using the normal algorithms;&lt;br&gt;however, all targets so considered are always remade regardless of the&lt;br&gt;status of their prerequisites.  To avoid infinite recursion, if&lt;br&gt;&lt;code&gt;MAKE_RESTARTS&lt;/code&gt; (see &lt;a href=&quot;#Special-Variables&quot;&gt;Other Special&lt;br&gt;Variables&lt;/a&gt;) is set to a number greater than 0 this option is disabled&lt;br&gt;when considering whether to remake makefiles (see &lt;a href=&quot;#Remaking-Makefiles&quot;&gt;How Makefiles Are Remade&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-C &lt;var&gt;dir&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dC-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–directory=&lt;var&gt;dir&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002ddirectory-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Change to directory &lt;var&gt;dir&lt;/var&gt; before reading the makefiles.  If multiple&lt;br&gt;‘&lt;samp&gt;-C&lt;/samp&gt;’ options are specified, each is interpreted relative to the&lt;br&gt;previous one: ‘&lt;samp&gt;-C / -C etc&lt;/samp&gt;’ is equivalent to ‘&lt;samp&gt;-C /etc&lt;/samp&gt;’.&lt;br&gt;This is typically used with recursive invocations of &lt;code&gt;make&lt;/code&gt;&lt;br&gt;(see &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-d&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dd&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Print debugging information in addition to normal processing.  The&lt;br&gt;debugging information says which files are being considered for&lt;br&gt;remaking, which file-times are being compared and with what results,&lt;br&gt;which files actually need to be remade, which implicit rules are&lt;br&gt;considered and which are applied—everything interesting about how&lt;br&gt;&lt;code&gt;make&lt;/code&gt; decides what to do.  The &lt;code&gt;-d&lt;/code&gt; option is equivalent to&lt;br&gt;‘&lt;samp&gt;–debug=a&lt;/samp&gt;’ (see below).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–debug[=&lt;var&gt;options&lt;/var&gt;]&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002ddebug&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Print debugging information in addition to normal processing.  Various&lt;br&gt;levels and types of output can be chosen.  With no arguments, print the&lt;br&gt;“basic” level of debugging.  Possible arguments are below; only the&lt;br&gt;first character is considered, and values must be comma- or&lt;br&gt;space-separated.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;a (&lt;i&gt;all&lt;/i&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;All types of debugging output are enabled.  This is equivalent to using&lt;br&gt;‘&lt;samp&gt;-d&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;b (&lt;i&gt;basic&lt;/i&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Basic debugging prints each target that was found to be out-of-date, and&lt;br&gt;whether the build was successful or not.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;v (&lt;i&gt;verbose&lt;/i&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;A level above ‘&lt;samp&gt;basic&lt;/samp&gt;’; includes messages about which makefiles were&lt;br&gt;parsed, prerequisites that did not need to be rebuilt, etc.  This option&lt;br&gt;also enables ‘&lt;samp&gt;basic&lt;/samp&gt;’ messages.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;i (&lt;i&gt;implicit&lt;/i&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Prints messages describing the implicit rule searches for each target.&lt;br&gt;This option also enables ‘&lt;samp&gt;basic&lt;/samp&gt;’ messages.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;j (&lt;i&gt;jobs&lt;/i&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Prints messages giving details on the invocation of specific sub-commands.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;m (&lt;i&gt;makefile&lt;/i&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;By default, the above messages are not enabled while trying to remake&lt;br&gt;the makefiles.  This option enables messages while rebuilding makefiles,&lt;br&gt;too.  Note that the ‘&lt;samp&gt;all&lt;/samp&gt;’ option does enable this option.  This&lt;br&gt;option also enables ‘&lt;samp&gt;basic&lt;/samp&gt;’ messages.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;n (&lt;i&gt;none&lt;/i&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Disable all debugging currently enabled.  If additional debugging&lt;br&gt;flags are encountered after this they will still take effect.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-e&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002de&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–environment-overrides&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002denvironment_002doverrides&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Give variables taken from the environment precedence&lt;br&gt;over variables from makefiles.&lt;br&gt;See &lt;a href=&quot;#Environment&quot;&gt;Variables from the Environment&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–eval=&lt;var&gt;string&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002deval&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Evaluate &lt;var&gt;string&lt;/var&gt; as makefile syntax.  This is a command-line&lt;br&gt;version of the &lt;code&gt;eval&lt;/code&gt; function (see &lt;a href=&quot;#Eval-Function&quot;&gt;Eval Function&lt;/a&gt;).  The&lt;br&gt;evaluation is performed after the default rules and variables have&lt;br&gt;been defined, but before any makefiles are read.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-f &lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002df-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–file=&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dfile-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–makefile=&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dmakefile-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Read the file named &lt;var&gt;file&lt;/var&gt; as a makefile.&lt;br&gt;See &lt;a href=&quot;#Makefiles&quot;&gt;Writing Makefiles&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-h&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dh&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–help&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dhelp&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Remind you of the options that &lt;code&gt;make&lt;/code&gt; understands and then exit.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-i&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002di-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–ignore-errors&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dignore_002derrors-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Ignore all errors in recipes executed to remake files.&lt;br&gt;See &lt;a href=&quot;#Errors&quot;&gt;Errors in Recipes&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-I &lt;var&gt;dir&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dI-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–include-dir=&lt;var&gt;dir&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dinclude_002ddir-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Specifies a directory &lt;var&gt;dir&lt;/var&gt; to search for included makefiles.&lt;br&gt;See &lt;a href=&quot;#Include&quot;&gt;Including Other Makefiles&lt;/a&gt;.  If several ‘&lt;samp&gt;-I&lt;/samp&gt;’&lt;br&gt;options are used to specify several directories, the directories are&lt;br&gt;searched in the order specified.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-j [&lt;var&gt;jobs&lt;/var&gt;]&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dj-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–jobs[=&lt;var&gt;jobs&lt;/var&gt;]&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002djobs-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Specifies the number of recipes (jobs) to run simultaneously.  With no&lt;br&gt;argument, &lt;code&gt;make&lt;/code&gt; runs as many recipes simultaneously as possible.&lt;br&gt;If there is more than one ‘&lt;samp&gt;-j&lt;/samp&gt;’ option, the last one is effective.&lt;br&gt;See &lt;a href=&quot;#Parallel&quot;&gt;Parallel Execution&lt;/a&gt;, for more information on how&lt;br&gt;recipes are run.  Note that this option is ignored on MS-DOS.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-k&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dk-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–keep-going&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dkeep_002dgoing-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Continue as much as possible after an error.  While the target that&lt;br&gt;failed, and those that depend on it, cannot be remade, the other&lt;br&gt;prerequisites of these targets can be processed all the same.&lt;br&gt;See &lt;a href=&quot;#Testing&quot;&gt;Testing the Compilation of a Program&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-l [&lt;var&gt;load&lt;/var&gt;]&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dl&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–load-average[=&lt;var&gt;load&lt;/var&gt;]&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dload_002daverage-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–max-load[=&lt;var&gt;load&lt;/var&gt;]&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dmax_002dload-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Specifies that no new recipes should be started if there are other&lt;br&gt;recipes running and the load average is at least &lt;var&gt;load&lt;/var&gt; (a&lt;br&gt;floating-point number).  With no argument, removes a previous load&lt;br&gt;limit.  See &lt;a href=&quot;#Parallel&quot;&gt;Parallel Execution&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-L&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dL&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–check-symlink-times&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dcheck_002dsymlink_002dtimes&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;On systems that support symbolic links, this option causes &lt;code&gt;make&lt;/code&gt;&lt;br&gt;to consider the timestamps on any symbolic links in addition to the&lt;br&gt;timestamp on the file referenced by those links.  When this option is&lt;br&gt;provided, the most recent timestamp among the file and the symbolic&lt;br&gt;links is taken as the modification time for this target file.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-n&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dn-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–just-print&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002djust_002dprint-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–dry-run&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002ddry_002drun-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–recon&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002drecon-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Print the recipe that would be executed, but do not execute it (except&lt;br&gt;in certain circumstances).&lt;br&gt;See &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Executing Recipes&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-o &lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002do-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–old-file=&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dold_002dfile-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–assume-old=&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dassume_002dold-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Do not remake the file &lt;var&gt;file&lt;/var&gt; even if it is older than its&lt;br&gt;prerequisites, and do not remake anything on account of changes in&lt;br&gt;&lt;var&gt;file&lt;/var&gt;.  Essentially the file is treated as very old and its rules&lt;br&gt;are ignored.  See &lt;a href=&quot;#Avoiding-Compilation&quot;&gt;Avoiding Recompilation of&lt;br&gt;Some Files&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-O[&lt;var&gt;type&lt;/var&gt;]&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dO-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–output-sync[=&lt;var&gt;type&lt;/var&gt;]&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002doutput_002dsync-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-output-during-parallel-execution-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-parallel-execution_002c-output-during-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Ensure that the complete output from each recipe is printed in one&lt;br&gt;uninterrupted sequence.  This option is only useful when using the&lt;br&gt;&lt;code&gt;–jobs&lt;/code&gt; option to run multiple recipes simultaneously&lt;br&gt;(see &lt;a href=&quot;#Parallel&quot;&gt;Parallel Execution&lt;/a&gt;)  Without this option output&lt;br&gt;will be displayed as it is generated by the recipes.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;With no type or the type ‘&lt;samp&gt;target&lt;/samp&gt;’, output from the entire recipe&lt;br&gt;of each target is grouped together.  With the type ‘&lt;samp&gt;line&lt;/samp&gt;’, output&lt;br&gt;from each line in the recipe is grouped together.  With the type&lt;br&gt;‘&lt;samp&gt;recurse&lt;/samp&gt;’, the output from an entire recursive make is grouped&lt;br&gt;together.  With the type ‘&lt;samp&gt;none&lt;/samp&gt;’, no output synchronization is&lt;br&gt;performed.  See &lt;a href=&quot;#Parallel-Output&quot;&gt;Output During Parallel Execution&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-p&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dp&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–print-data-base&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dprint_002ddata_002dbase&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-data-base-of-make-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-predefined-rules-and-variables_002c-printing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Print the data base (rules and variable values) that results from&lt;br&gt;reading the makefiles; then execute as usual or as otherwise&lt;br&gt;specified.  This also prints the version information given by the&lt;br&gt;‘&lt;samp&gt;-v&lt;/samp&gt;’ switch (see below).  To print the data base without trying&lt;br&gt;to remake any files, use ‘&lt;samp&gt;make&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-qp&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt;.  To print the data base&lt;br&gt;of predefined rules and variables, use ‘&lt;samp&gt;make&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-p&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-f&lt;/span&gt;&amp;nbsp;/dev/null&lt;/samp&gt;’&lt;!-- /@w --&gt;.&lt;br&gt;The data base output contains file name and line number information for&lt;br&gt;recipe and variable definitions, so it can be a useful debugging tool&lt;br&gt;in complex environments.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-q&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dq-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–question&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dquestion-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;“Question mode”.  Do not run any recipes, or print anything; just&lt;br&gt;return an exit status that is zero if the specified targets are already&lt;br&gt;up to date, one if any remaking is required, or two if an error is&lt;br&gt;encountered.  See &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Executing&lt;br&gt;Recipes&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-r&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dr&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–no-builtin-rules&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dno_002dbuiltin_002drules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Eliminate use of the built-in implicit rules (see &lt;a href=&quot;#Implicit-Rules&quot;&gt;Using Implicit Rules&lt;/a&gt;).  You can still define your own by writing&lt;br&gt;pattern rules (see &lt;a href=&quot;#Pattern-Rules&quot;&gt;Defining and Redefining Pattern&lt;br&gt;Rules&lt;/a&gt;).  The ‘&lt;samp&gt;-r&lt;/samp&gt;’ option also clears out the default list of&lt;br&gt;suffixes for suffix rules (see &lt;a href=&quot;#Suffix-Rules&quot;&gt;Old-Fashioned Suffix&lt;br&gt;Rules&lt;/a&gt;).  But you can still define your own suffixes with a rule for&lt;br&gt;&lt;code&gt;.SUFFIXES&lt;/code&gt;, and then define your own suffix rules.  Note that only&lt;br&gt;&lt;em&gt;rules&lt;/em&gt; are affected by the &lt;code&gt;-r&lt;/code&gt; option; default variables&lt;br&gt;remain in effect (see &lt;a href=&quot;#Implicit-Variables&quot;&gt;Variables Used by Implicit&lt;br&gt;Rules&lt;/a&gt;); see the ‘&lt;samp&gt;-R&lt;/samp&gt;’ option below.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-R&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dR&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–no-builtin-variables&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dno_002dbuiltin_002dvariables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Eliminate use of the built-in rule-specific variables (see &lt;a href=&quot;#Implicit-Variables&quot;&gt;Variables Used by Implicit Rules&lt;/a&gt;).  You can still define&lt;br&gt;your own, of course.  The ‘&lt;samp&gt;-R&lt;/samp&gt;’ option also automatically enables&lt;br&gt;the ‘&lt;samp&gt;-r&lt;/samp&gt;’ option (see above), since it doesn’t make sense to have&lt;br&gt;implicit rules without any definitions for the variables that they use.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-s&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002ds-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–silent&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dsilent-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–quiet&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dquiet-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Silent operation; do not print the recipes as they are executed.&lt;br&gt;See &lt;a href=&quot;#Echoing&quot;&gt;Recipe Echoing&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-S&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–no-keep-going&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dno_002dkeep_002dgoing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–stop&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dstop&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Cancel the effect of the ‘&lt;samp&gt;-k&lt;/samp&gt;’ option.  This is never necessary&lt;br&gt;except in a recursive &lt;code&gt;make&lt;/code&gt; where ‘&lt;samp&gt;-k&lt;/samp&gt;’ might be inherited&lt;br&gt;from the top-level &lt;code&gt;make&lt;/code&gt; via &lt;code&gt;MAKEFLAGS&lt;/code&gt;&lt;br&gt;(see &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;)&lt;br&gt;or if you set ‘&lt;samp&gt;-k&lt;/samp&gt;’ in &lt;code&gt;MAKEFLAGS&lt;/code&gt; in your environment.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-t&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dt-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–touch&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dtouch-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Touch files (mark them up to date without really changing them)&lt;br&gt;instead of running their recipes.  This is used to pretend that the&lt;br&gt;recipes were done, in order to fool future invocations of&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.  See &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Executing Recipes&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–trace&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dtrace&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Show tracing information for &lt;code&gt;make&lt;/code&gt; execution.  Prints the entire&lt;br&gt;recipe to be executed, even for recipes that are normally silent (due&lt;br&gt;to &lt;code&gt;.SILENT&lt;/code&gt; or ‘&lt;samp&gt;@&lt;/samp&gt;’).  Also prints the makefile name and&lt;br&gt;line number where the recipe was defined, and information on why the&lt;br&gt;target is being rebuilt.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-v&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dv&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–version&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dversion&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Print the version of the &lt;code&gt;make&lt;/code&gt; program plus a copyright, a list&lt;br&gt;of authors, and a notice that there is no warranty; then exit.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-w&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dw&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–print-directory&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dprint_002ddirectory&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Print a message containing the working directory both before and after&lt;br&gt;executing the makefile.  This may be useful for tracking down errors&lt;br&gt;from complicated nests of recursive &lt;code&gt;make&lt;/code&gt; commands.&lt;br&gt;See &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.  (In practice, you&lt;br&gt;rarely need to specify this option since ‘&lt;samp&gt;make&lt;/samp&gt;’ does it for you;&lt;br&gt;see &lt;a href=&quot;#g_t_002dw-Option&quot;&gt;The ‘&lt;samp&gt;–print-directory&lt;/samp&gt;’ Option&lt;/a&gt;.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–no-print-directory&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dno_002dprint_002ddirectory-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Disable printing of the working directory under &lt;code&gt;-w&lt;/code&gt;.&lt;br&gt;This option is useful when &lt;code&gt;-w&lt;/code&gt; is turned on automatically,&lt;br&gt;but you do not want to see the extra messages.&lt;br&gt;See &lt;a href=&quot;#g_t_002dw-Option&quot;&gt;The ‘&lt;samp&gt;–print-directory&lt;/samp&gt;’ Option&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;-W &lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002dW-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–what-if=&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dwhat_002dif-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–new-file=&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dnew_002dfile-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–assume-new=&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dassume_002dnew-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Pretend that the target &lt;var&gt;file&lt;/var&gt; has just been modified.  When used&lt;br&gt;with the ‘&lt;samp&gt;-n&lt;/samp&gt;’ flag, this shows you what would happen if you were&lt;br&gt;to modify that file.  Without ‘&lt;samp&gt;-n&lt;/samp&gt;’, it is almost the same as&lt;br&gt;running a &lt;code&gt;touch&lt;/code&gt; command on the given file before running&lt;br&gt;&lt;code&gt;make&lt;/code&gt;, except that the modification time is changed only in the&lt;br&gt;imagination of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;See &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Executing Recipes&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;–warn-undefined-variables&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_002d_002dwarn_002dundefined_002dvariables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-warning-for-undefined&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-undefined-variables_002c-warning-message&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Issue a warning message whenever &lt;code&gt;make&lt;/code&gt; sees a reference to an&lt;br&gt;undefined variable.  This can be helpful when you are trying to debug&lt;br&gt;makefiles which use variables in complex ways.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Implicit-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Archives&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Archives&lt;/a&gt;, Previous: &lt;a href=&quot;#Running&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Running&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Using-Implicit-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;10 Using Implicit Rules&lt;/h2&gt;&lt;br&gt;&lt;a name=&quot;index-implicit-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-implicit&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Certain standard ways of remaking target files are used very often.  For&lt;br&gt;example, one customary way to make an object file is from a C source file&lt;br&gt;using the C compiler, &lt;code&gt;cc&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;Implicit rules&lt;/em&gt; tell &lt;code&gt;make&lt;/code&gt; how to use customary techniques so&lt;br&gt;that you do not have to specify them in detail when you want to use&lt;br&gt;them.  For example, there is an implicit rule for C compilation.  File&lt;br&gt;names determine which implicit rules are run.  For example, C&lt;br&gt;compilation typically takes a &lt;samp&gt;.c&lt;/samp&gt; file and makes a &lt;samp&gt;.o&lt;/samp&gt; file.&lt;br&gt;So &lt;code&gt;make&lt;/code&gt; applies the implicit rule for C compilation when it sees&lt;br&gt;this combination of file name endings.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A chain of implicit rules can apply in sequence; for example, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;will remake a &lt;samp&gt;.o&lt;/samp&gt; file from a &lt;samp&gt;.y&lt;/samp&gt; file by way of a &lt;samp&gt;.c&lt;/samp&gt; file.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The built-in implicit rules use several variables in their recipes so&lt;br&gt;that, by changing the values of the variables, you can change the way the&lt;br&gt;implicit rule works.  For example, the variable &lt;code&gt;CFLAGS&lt;/code&gt; controls the&lt;br&gt;flags given to the C compiler by the implicit rule for C compilation.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can define your own implicit rules by writing &lt;em&gt;pattern rules&lt;/em&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;Suffix rules&lt;/em&gt; are a more limited way to define implicit rules.&lt;br&gt;Pattern rules are more general and clearer, but suffix rules are&lt;br&gt;retained for compatibility.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Using-Implicit&quot; accesskey=&quot;1&quot;&gt;Using Implicit&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use an existing implicit rule&lt;br&gt;                                  to get the recipes for updating a file.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Catalogue-of-Rules&quot; accesskey=&quot;2&quot;&gt;Catalogue of Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;A list of built-in rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Implicit-Variables&quot; accesskey=&quot;3&quot;&gt;Implicit Variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to change what predefined rules do.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Chained-Rules&quot; accesskey=&quot;4&quot;&gt;Chained Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use a chain of implicit rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Pattern-Rules&quot; accesskey=&quot;5&quot;&gt;Pattern Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to define new implicit rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Last-Resort&quot; accesskey=&quot;6&quot;&gt;Last Resort&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to define a recipe for rules which&lt;br&gt;                                  cannot find any.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Suffix-Rules&quot; accesskey=&quot;7&quot;&gt;Suffix Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The old-fashioned style of implicit rule.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Implicit-Rule-Search&quot; accesskey=&quot;8&quot;&gt;Implicit Rule Search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The precise algorithm for applying&lt;br&gt;                                  implicit rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Using-Implicit&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Catalogue-of-Rules&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Catalogue of Rules&lt;/a&gt;, Previous: &lt;a href=&quot;#Implicit-Rules&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Implicit Rules&lt;/a&gt;, Up: &lt;a href=&quot;#Implicit-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Implicit Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Using-Implicit-Rules-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;10.1 Using Implicit Rules&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-implicit-rule_002c-how-to-use&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-implicit_002c-how-to-use&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;To allow &lt;code&gt;make&lt;/code&gt; to find a customary method for updating a target&lt;br&gt;file, all you have to do is refrain from specifying recipes yourself.&lt;br&gt;Either write a rule with no recipe, or don’t write a rule at all.&lt;br&gt;Then &lt;code&gt;make&lt;/code&gt; will figure out which implicit rule to use based on&lt;br&gt;which kind of source file exists or can be made.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, suppose the makefile looks like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo : foo.o bar.o&lt;br&gt;        cc -o foo foo.o bar.o $(CFLAGS) $(LDFLAGS)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Because you mention &lt;samp&gt;foo.o&lt;/samp&gt; but do not give a rule for it, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;will automatically look for an implicit rule that tells how to update it.&lt;br&gt;This happens whether or not the file &lt;samp&gt;foo.o&lt;/samp&gt; currently exists.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If an implicit rule is found, it can supply both a recipe and one or&lt;br&gt;more prerequisites (the source files).  You would want to write a rule&lt;br&gt;for &lt;samp&gt;foo.o&lt;/samp&gt; with no recipe if you need to specify additional&lt;br&gt;prerequisites, such as header files, that the implicit rule cannot&lt;br&gt;supply.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Each implicit rule has a target pattern and prerequisite patterns.  There may&lt;br&gt;be many implicit rules with the same target pattern.  For example, numerous&lt;br&gt;rules make ‘&lt;samp&gt;.o&lt;/samp&gt;’ files: one, from a ‘&lt;samp&gt;.c&lt;/samp&gt;’ file with the C compiler;&lt;br&gt;another, from a ‘&lt;samp&gt;.p&lt;/samp&gt;’ file with the Pascal compiler; and so on.  The rule&lt;br&gt;that actually applies is the one whose prerequisites exist or can be made.&lt;br&gt;So, if you have a file &lt;samp&gt;foo.c&lt;/samp&gt;, &lt;code&gt;make&lt;/code&gt; will run the C compiler;&lt;br&gt;otherwise, if you have a file &lt;samp&gt;foo.p&lt;/samp&gt;, &lt;code&gt;make&lt;/code&gt; will run the Pascal&lt;br&gt;compiler; and so on.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Of course, when you write the makefile, you know which implicit rule you&lt;br&gt;want &lt;code&gt;make&lt;/code&gt; to use, and you know it will choose that one because you&lt;br&gt;know which possible prerequisite files are supposed to exist.&lt;br&gt;See &lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Built-In Rules&lt;/a&gt;,&lt;br&gt;for a catalogue of all the predefined implicit rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Above, we said an implicit rule applies if the required prerequisites “exist&lt;br&gt;or can be made”.  A file “can be made” if it is mentioned explicitly in&lt;br&gt;the makefile as a target or a prerequisite, or if an implicit rule can be&lt;br&gt;recursively found for how to make it.  When an implicit prerequisite is the&lt;br&gt;result of another implicit rule, we say that &lt;em&gt;chaining&lt;/em&gt; is occurring.&lt;br&gt;See &lt;a href=&quot;#Chained-Rules&quot;&gt;Chains of Implicit Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In general, &lt;code&gt;make&lt;/code&gt; searches for an implicit rule for each target, and&lt;br&gt;for each double-colon rule, that has no recipe.  A file that is mentioned&lt;br&gt;only as a prerequisite is considered a target whose rule specifies nothing,&lt;br&gt;so implicit rule search happens for it.  See &lt;a href=&quot;#Implicit-Rule-Search&quot;&gt;Implicit Rule Search Algorithm&lt;/a&gt;, for the&lt;br&gt;details of how the search is done.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Note that explicit prerequisites do not influence implicit rule search.&lt;br&gt;For example, consider this explicit rule:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo.o: foo.p&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The prerequisite on &lt;samp&gt;foo.p&lt;/samp&gt; does not necessarily mean that&lt;br&gt;&lt;code&gt;make&lt;/code&gt; will remake &lt;samp&gt;foo.o&lt;/samp&gt; according to the implicit rule to&lt;br&gt;make an object file, a &lt;samp&gt;.o&lt;/samp&gt; file, from a Pascal source file, a&lt;br&gt;&lt;samp&gt;.p&lt;/samp&gt; file.  For example, if &lt;samp&gt;foo.c&lt;/samp&gt; also exists, the implicit&lt;br&gt;rule to make an object file from a C source file is used instead,&lt;br&gt;because it appears before the Pascal rule in the list of predefined&lt;br&gt;implicit rules (see &lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Built-In&lt;br&gt;Rules&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you do not want an implicit rule to be used for a target that has no&lt;br&gt;recipe, you can give that target an empty recipe by writing a semicolon&lt;br&gt;(see &lt;a href=&quot;#Empty-Recipes&quot;&gt;Defining Empty Recipes&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Catalogue-of-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Implicit-Variables&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Implicit Variables&lt;/a&gt;, Previous: &lt;a href=&quot;#Using-Implicit&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Using Implicit&lt;/a&gt;, Up: &lt;a href=&quot;#Implicit-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Implicit Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Catalogue-of-Built_002dIn-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;10.2 Catalogue of Built-In Rules&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-implicit-rule_002c-predefined&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-implicit_002c-predefined&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is a catalogue of predefined implicit rules which are always&lt;br&gt;available unless the makefile explicitly overrides or cancels them.&lt;br&gt;See &lt;a href=&quot;#Canceling-Rules&quot;&gt;Canceling Implicit Rules&lt;/a&gt;, for information on&lt;br&gt;canceling or overriding an implicit rule.  The ‘&lt;samp&gt;-r&lt;/samp&gt;’ or&lt;br&gt;‘&lt;samp&gt;–no-builtin-rules&lt;/samp&gt;’ option cancels all predefined rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This manual only documents the default rules available on POSIX-based&lt;br&gt;operating systems.  Other operating systems, such as VMS, Windows,&lt;br&gt;OS/2, etc. may have different sets of default rules.  To see the full&lt;br&gt;list of default rules and variables available in your version of GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt;, run ‘&lt;samp&gt;make -p&lt;/samp&gt;’ in a directory with no makefile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Not all of these rules will always be defined, even when the ‘&lt;samp&gt;-r&lt;/samp&gt;’&lt;br&gt;option is not given.  Many of the predefined implicit rules are&lt;br&gt;implemented in &lt;code&gt;make&lt;/code&gt; as suffix rules, so which ones will be&lt;br&gt;defined depends on the &lt;em&gt;suffix list&lt;/em&gt; (the list of prerequisites of&lt;br&gt;the special target &lt;code&gt;.SUFFIXES&lt;/code&gt;).  The default suffix list is:&lt;br&gt;&lt;code&gt;.out&lt;/code&gt;, &lt;code&gt;.a&lt;/code&gt;, &lt;code&gt;.ln&lt;/code&gt;, &lt;code&gt;.o&lt;/code&gt;, &lt;code&gt;.c&lt;/code&gt;, &lt;code&gt;.cc&lt;/code&gt;,&lt;br&gt;&lt;code&gt;.C&lt;/code&gt;, &lt;code&gt;.cpp&lt;/code&gt;, &lt;code&gt;.p&lt;/code&gt;, &lt;code&gt;.f&lt;/code&gt;, &lt;code&gt;.F&lt;/code&gt;, &lt;code&gt;.m&lt;/code&gt;,&lt;br&gt;&lt;code&gt;.r&lt;/code&gt;, &lt;code&gt;.y&lt;/code&gt;, &lt;code&gt;.l&lt;/code&gt;, &lt;code&gt;.ym&lt;/code&gt;, &lt;code&gt;.lm&lt;/code&gt;, &lt;code&gt;.s&lt;/code&gt;,&lt;br&gt;&lt;code&gt;.S&lt;/code&gt;, &lt;code&gt;.mod&lt;/code&gt;, &lt;code&gt;.sym&lt;/code&gt;, &lt;code&gt;.def&lt;/code&gt;, &lt;code&gt;.h&lt;/code&gt;,&lt;br&gt;&lt;code&gt;.info&lt;/code&gt;, &lt;code&gt;.dvi&lt;/code&gt;, &lt;code&gt;.tex&lt;/code&gt;, &lt;code&gt;.texinfo&lt;/code&gt;, &lt;code&gt;.texi&lt;/code&gt;,&lt;br&gt;&lt;code&gt;.txinfo&lt;/code&gt;, &lt;code&gt;.w&lt;/code&gt;, &lt;code&gt;.ch&lt;/code&gt; &lt;code&gt;.web&lt;/code&gt;, &lt;code&gt;.sh&lt;/code&gt;,&lt;br&gt;&lt;code&gt;.elc&lt;/code&gt;, &lt;code&gt;.el&lt;/code&gt;.  All of the implicit rules described below&lt;br&gt;whose prerequisites have one of these suffixes are actually suffix&lt;br&gt;rules.  If you modify the suffix list, the only predefined suffix&lt;br&gt;rules in effect will be those named by one or two of the suffixes that&lt;br&gt;are on the list you specify; rules whose suffixes fail to be on the&lt;br&gt;list are disabled.  See &lt;a href=&quot;#Suffix-Rules&quot;&gt;Old-Fashioned Suffix Rules&lt;/a&gt;,&lt;br&gt;for full details on suffix rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;Compiling C programs&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-C_002c-rule-to-compile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-cc&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-gcc&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eo&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002ec&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt; is made automatically from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt; with&lt;br&gt;a recipe of the form ‘&lt;samp&gt;$(CC) $(CPPFLAGS) $(CFLAGS) -c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Compiling C++ programs&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-C_002b_002b_002c-rule-to-compile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-g_002b_002b&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002ecc&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002ecpp&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eC&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt; is made automatically from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.cc&lt;/samp&gt;,&lt;br&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.cpp&lt;/samp&gt;, or &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.C&lt;/samp&gt; with a recipe of the form&lt;br&gt;‘&lt;samp&gt;$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c&lt;/samp&gt;’.  We encourage you to use the&lt;br&gt;suffix ‘&lt;samp&gt;.cc&lt;/samp&gt;’ for C++ source files instead of ‘&lt;samp&gt;.C&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Compiling Pascal programs&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-Pascal_002c-rule-to-compile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-pc&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002ep&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt; is made automatically from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.p&lt;/samp&gt;&lt;br&gt;with the recipe ‘&lt;samp&gt;$(PC) $(PFLAGS) -c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Compiling Fortran and Ratfor programs&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-Fortran_002c-rule-to-compile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-Ratfor_002c-rule-to-compile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-f77&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002ef&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002er&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eF&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt; is made automatically from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.r&lt;/samp&gt;,&lt;br&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.F&lt;/samp&gt; or &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.f&lt;/samp&gt; by running the&lt;br&gt;Fortran compiler.  The precise recipe used is as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;.f&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;‘&lt;samp&gt;$(FC) $(FFLAGS) -c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;.F&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;‘&lt;samp&gt;$(FC) $(FFLAGS) $(CPPFLAGS) -c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;.r&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;‘&lt;samp&gt;$(FC) $(FFLAGS) $(RFLAGS) -c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Preprocessing Fortran and Ratfor programs&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.f&lt;/samp&gt; is made automatically from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.r&lt;/samp&gt; or&lt;br&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.F&lt;/samp&gt;.  This rule runs just the preprocessor to convert a&lt;br&gt;Ratfor or preprocessable Fortran program into a strict Fortran&lt;br&gt;program.  The precise recipe used is as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;.F&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;‘&lt;samp&gt;$(FC) $(CPPFLAGS) $(FFLAGS) -F&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;.r&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;‘&lt;samp&gt;$(FC) $(FFLAGS) $(RFLAGS) -F&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Compiling Modula-2 programs&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-Modula_002d2_002c-rule-to-compile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-m2c&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002esym&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002edef&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002emod&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.sym&lt;/samp&gt; is made from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.def&lt;/samp&gt; with a recipe&lt;br&gt;of the form ‘&lt;samp&gt;$(M2C) $(M2FLAGS) $(DEFFLAGS)&lt;/samp&gt;’.  &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt;&lt;br&gt;is made from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.mod&lt;/samp&gt;; the form is:&lt;br&gt;‘&lt;samp&gt;$(M2C)&amp;nbsp;$(M2FLAGS)&amp;nbsp;$(MODFLAGS)&lt;/samp&gt;’&lt;!-- /@w --&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Assembling and preprocessing assembler programs&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-assembly_002c-rule-to-compile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-as&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002es&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt; is made automatically from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.s&lt;/samp&gt; by&lt;br&gt;running the assembler, &lt;code&gt;as&lt;/code&gt;.  The precise recipe is&lt;br&gt;‘&lt;samp&gt;$(AS) $(ASFLAGS)&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.s&lt;/samp&gt; is made automatically from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.S&lt;/samp&gt; by&lt;br&gt;running the C preprocessor, &lt;code&gt;cpp&lt;/code&gt;.  The precise recipe is&lt;br&gt;‘&lt;samp&gt;$(CPP)&amp;nbsp;$(CPPFLAGS)&lt;/samp&gt;’&lt;!-- /@w --&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Linking a single object file&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-linking_002c-predefined-rule-for&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-ld&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eo-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;&lt;/samp&gt; is made automatically from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt; by running&lt;br&gt;the linker (usually called &lt;code&gt;ld&lt;/code&gt;) via the C compiler.  The precise&lt;br&gt;recipe used is ‘&lt;samp&gt;$(CC)&amp;nbsp;$(LDFLAGS)&amp;nbsp;&lt;var&gt;n&lt;/var&gt;.o&amp;nbsp;$(LOADLIBES)&amp;nbsp;$(LDLIBS)&lt;/samp&gt;’&lt;!-- /@w --&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This rule does the right thing for a simple program with only one&lt;br&gt;source file.  It will also do the right thing if there are multiple&lt;br&gt;object files (presumably coming from various other source files), one&lt;br&gt;of which has a name matching that of the executable file.  Thus,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;x: y.o z.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;when &lt;samp&gt;x.c&lt;/samp&gt;, &lt;samp&gt;y.c&lt;/samp&gt; and &lt;samp&gt;z.c&lt;/samp&gt; all exist will execute:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;cc -c x.c -o x.o&lt;br&gt;cc -c y.c -o y.o&lt;br&gt;cc -c z.c -o z.o&lt;br&gt;cc x.o y.o z.o -o x&lt;br&gt;rm -f x.o&lt;br&gt;rm -f y.o&lt;br&gt;rm -f z.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In more complicated cases, such as when there is no object file whose&lt;br&gt;name derives from the executable file name, you must write an explicit&lt;br&gt;recipe for linking.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Each kind of file automatically made into ‘&lt;samp&gt;.o&lt;/samp&gt;’ object files will&lt;br&gt;be automatically linked by using the compiler (‘&lt;samp&gt;$(CC)&lt;/samp&gt;’,&lt;br&gt;‘&lt;samp&gt;$(FC)&lt;/samp&gt;’ or ‘&lt;samp&gt;$(PC)&lt;/samp&gt;’; the C compiler ‘&lt;samp&gt;$(CC)&lt;/samp&gt;’ is used to&lt;br&gt;assemble ‘&lt;samp&gt;.s&lt;/samp&gt;’ files) without the ‘&lt;samp&gt;-c&lt;/samp&gt;’ option.  This could be&lt;br&gt;done by using the ‘&lt;samp&gt;.o&lt;/samp&gt;’ object files as intermediates, but it is&lt;br&gt;faster to do the compiling and linking in one step, so that’s how it’s&lt;br&gt;done.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Yacc for C programs&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-yacc-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-Yacc_002c-rule-to-run&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002ey&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt; is made automatically from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.y&lt;/samp&gt; by&lt;br&gt;running Yacc with the recipe ‘&lt;samp&gt;$(YACC) $(YFLAGS)&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Lex for C programs&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-lex&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-Lex_002c-rule-to-run&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002el&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt; is made automatically from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.l&lt;/samp&gt; by&lt;br&gt;running Lex.  The actual recipe is ‘&lt;samp&gt;$(LEX) $(LFLAGS)&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Lex for Ratfor programs&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.r&lt;/samp&gt; is made automatically from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.l&lt;/samp&gt; by&lt;br&gt;running Lex.  The actual recipe is ‘&lt;samp&gt;$(LEX) $(LFLAGS)&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The convention of using the same suffix ‘&lt;samp&gt;.l&lt;/samp&gt;’ for all Lex files&lt;br&gt;regardless of whether they produce C code or Ratfor code makes it&lt;br&gt;impossible for &lt;code&gt;make&lt;/code&gt; to determine automatically which of the two&lt;br&gt;languages you are using in any particular case.  If &lt;code&gt;make&lt;/code&gt; is&lt;br&gt;called upon to remake an object file from a ‘&lt;samp&gt;.l&lt;/samp&gt;’ file, it must&lt;br&gt;guess which compiler to use.  It will guess the C compiler, because&lt;br&gt;that is more common.  If you are using Ratfor, make sure &lt;code&gt;make&lt;/code&gt;&lt;br&gt;knows this by mentioning &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.r&lt;/samp&gt; in the makefile.  Or, if you&lt;br&gt;are using Ratfor exclusively, with no C files, remove ‘&lt;samp&gt;.c&lt;/samp&gt;’ from&lt;br&gt;the list of implicit rule suffixes with:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.SUFFIXES:&lt;br&gt;.SUFFIXES: .o .r .f .l …&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Making Lint Libraries from C, Yacc, or Lex programs&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-lint&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-lint_002c-rule-to-run&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eln&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.ln&lt;/samp&gt; is made from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt; by running &lt;code&gt;lint&lt;/code&gt;.&lt;br&gt;The precise recipe is ‘&lt;samp&gt;$(LINT)&amp;nbsp;$(LINTFLAGS)&amp;nbsp;$(CPPFLAGS)&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;-i&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt;.&lt;br&gt;The same recipe is used on the C code produced from&lt;br&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.y&lt;/samp&gt; or &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.l&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;TeX and Web&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-TeX_002c-rule-to-run&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-Web_002c-rule-to-run&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-tex&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-cweave&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-weave&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-tangle&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-ctangle&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002edvi&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002etex&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002eweb&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002ew&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002ech&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.dvi&lt;/samp&gt; is made from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.tex&lt;/samp&gt; with the recipe&lt;br&gt;‘&lt;samp&gt;$(TEX)&lt;/samp&gt;’.  &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.tex&lt;/samp&gt; is made from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.web&lt;/samp&gt; with&lt;br&gt;‘&lt;samp&gt;$(WEAVE)&lt;/samp&gt;’, or from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.w&lt;/samp&gt; (and from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.ch&lt;/samp&gt; if&lt;br&gt;it exists or can be made) with ‘&lt;samp&gt;$(CWEAVE)&lt;/samp&gt;’.  &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.p&lt;/samp&gt; is&lt;br&gt;made from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.web&lt;/samp&gt; with ‘&lt;samp&gt;$(TANGLE)&lt;/samp&gt;’ and &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt;&lt;br&gt;is made from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.w&lt;/samp&gt; (and from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.ch&lt;/samp&gt; if it exists&lt;br&gt;or can be made) with ‘&lt;samp&gt;$(CTANGLE)&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;Texinfo and Info&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-Texinfo_002c-rule-to-format&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-Info_002c-rule-to-format&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-texi2dvi&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-makeinfo&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002etexinfo&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002einfo&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002etexi&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002etxinfo&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.dvi&lt;/samp&gt; is made from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.texinfo&lt;/samp&gt;,&lt;br&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.texi&lt;/samp&gt;, or &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.txinfo&lt;/samp&gt;, with the recipe&lt;br&gt;‘&lt;samp&gt;$(TEXI2DVI)&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;$(TEXI2DVI_FLAGS)&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt;.  &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.info&lt;/samp&gt; is made from&lt;br&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.texinfo&lt;/samp&gt;, &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.texi&lt;/samp&gt;, or &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.txinfo&lt;/samp&gt;, with&lt;br&gt;the recipe ‘&lt;samp&gt;$(MAKEINFO)&amp;nbsp;&lt;span class=&quot;nolinebreak&quot;&gt;$(MAKEINFO_FLAGS)&lt;/span&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;RCS&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-RCS_002c-rule-to-extract-from&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-co&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002cv-_0028RCS-file-extension_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Any file &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;&lt;/samp&gt; is extracted if necessary from an RCS file&lt;br&gt;named either &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;,v&lt;/samp&gt; or &lt;samp&gt;RCS/&lt;var&gt;n&lt;/var&gt;,v&lt;/samp&gt;.  The precise&lt;br&gt;recipe used is ‘&lt;samp&gt;$(CO)&amp;nbsp;$(COFLAGS)&lt;/samp&gt;’&lt;!-- /@w --&gt;.  &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;&lt;/samp&gt; will not be&lt;br&gt;extracted from RCS if it already exists, even if the RCS file is&lt;br&gt;newer.  The rules for RCS are terminal&lt;br&gt;(see &lt;a href=&quot;#Match_002dAnything-Rules&quot;&gt;Match-Anything Pattern Rules&lt;/a&gt;),&lt;br&gt;so RCS files cannot be generated from another source; they must&lt;br&gt;actually exist.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;SCCS&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-SCCS_002c-rule-to-extract-from&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-get&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-s_002e-_0028SCCS-file-prefix_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Any file &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;&lt;/samp&gt; is extracted if necessary from an SCCS file&lt;br&gt;named either &lt;samp&gt;s.&lt;var&gt;n&lt;/var&gt;&lt;/samp&gt; or &lt;samp&gt;SCCS/s.&lt;var&gt;n&lt;/var&gt;&lt;/samp&gt;.  The precise&lt;br&gt;recipe used is ‘&lt;samp&gt;$(GET)&amp;nbsp;$(GFLAGS)&lt;/samp&gt;’&lt;!-- /@w --&gt;.  The rules for SCCS are&lt;br&gt;terminal (see &lt;a href=&quot;#Match_002dAnything-Rules&quot;&gt;Match-Anything Pattern Rules&lt;/a&gt;),&lt;br&gt;so SCCS files cannot be generated from another source; they must&lt;br&gt;actually exist.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002esh&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;For the benefit of SCCS, a file &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;&lt;/samp&gt; is copied from&lt;br&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.sh&lt;/samp&gt; and made executable (by everyone).  This is for&lt;br&gt;shell scripts that are checked into SCCS.  Since RCS preserves the&lt;br&gt;execution permission of a file, you do not need to use this feature&lt;br&gt;with RCS.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;We recommend that you avoid using of SCCS.  RCS is widely held to be&lt;br&gt;superior, and is also free.  By choosing free software in place of&lt;br&gt;comparable (or inferior) proprietary software, you support the free&lt;br&gt;software movement.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Usually, you want to change only the variables listed in the table&lt;br&gt;above, which are documented in the following section.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;However, the recipes in built-in implicit rules actually use&lt;br&gt;variables such as &lt;code&gt;COMPILE.c&lt;/code&gt;, &lt;code&gt;LINK.p&lt;/code&gt;, and&lt;br&gt;&lt;code&gt;PREPROCESS.S&lt;/code&gt;, whose values contain the recipes listed above.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; follows the convention that the rule to compile a&lt;br&gt;&lt;samp&gt;.&lt;var&gt;x&lt;/var&gt;&lt;/samp&gt; source file uses the variable &lt;code&gt;COMPILE.&lt;var&gt;x&lt;/var&gt;&lt;/code&gt;.&lt;br&gt;Similarly, the rule to produce an executable from a &lt;samp&gt;.&lt;var&gt;x&lt;/var&gt;&lt;/samp&gt;&lt;br&gt;file uses &lt;code&gt;LINK.&lt;var&gt;x&lt;/var&gt;&lt;/code&gt;; and the rule to preprocess a&lt;br&gt;&lt;samp&gt;.&lt;var&gt;x&lt;/var&gt;&lt;/samp&gt; file uses &lt;code&gt;PREPROCESS.&lt;var&gt;x&lt;/var&gt;&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-OUTPUT_005fOPTION&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Every rule that produces an object file uses the variable&lt;br&gt;&lt;code&gt;OUTPUT_OPTION&lt;/code&gt;.  &lt;code&gt;make&lt;/code&gt; defines this variable either to&lt;br&gt;contain ‘&lt;samp&gt;-o $@&lt;/samp&gt;’, or to be empty, depending on a compile-time&lt;br&gt;option.  You need the ‘&lt;samp&gt;-o&lt;/samp&gt;’ option to ensure that the output goes&lt;br&gt;into the right file when the source file is in a different directory,&lt;br&gt;as when using &lt;code&gt;VPATH&lt;/code&gt; (see &lt;a href=&quot;#Directory-Search&quot;&gt;Directory Search&lt;/a&gt;).  However,&lt;br&gt;compilers on some systems do not accept a ‘&lt;samp&gt;-o&lt;/samp&gt;’ switch for object&lt;br&gt;files.  If you use such a system, and use &lt;code&gt;VPATH&lt;/code&gt;, some&lt;br&gt;compilations will put their output in the wrong place.&lt;br&gt;A possible workaround for this problem is to give &lt;code&gt;OUTPUT_OPTION&lt;/code&gt;&lt;br&gt;the value ‘&lt;samp&gt;;&amp;nbsp;mv&amp;nbsp;$.o&amp;nbsp;$@&lt;/samp&gt;’&lt;!-- /@w --&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Implicit-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Chained-Rules&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Chained Rules&lt;/a&gt;, Previous: &lt;a href=&quot;#Catalogue-of-Rules&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Catalogue of Rules&lt;/a&gt;, Up: &lt;a href=&quot;#Implicit-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Implicit Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Variables-Used-by-Implicit-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;10.3 Variables Used by Implicit Rules&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-flags-for-compilers&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The recipes in built-in implicit rules make liberal use of certain&lt;br&gt;predefined variables.  You can alter the values of these variables in&lt;br&gt;the makefile, with arguments to &lt;code&gt;make&lt;/code&gt;, or in the environment to&lt;br&gt;alter how the implicit rules work without redefining the rules&lt;br&gt;themselves.  You can cancel all variables used by implicit rules with&lt;br&gt;the ‘&lt;samp&gt;-R&lt;/samp&gt;’ or ‘&lt;samp&gt;–no-builtin-variables&lt;/samp&gt;’ option.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, the recipe used to compile a C source file actually says&lt;br&gt;‘&lt;samp&gt;$(CC) -c $(CFLAGS) $(CPPFLAGS)&lt;/samp&gt;’.  The default values of the variables&lt;br&gt;used are ‘&lt;samp&gt;cc&lt;/samp&gt;’ and nothing, resulting in the command ‘&lt;samp&gt;cc -c&lt;/samp&gt;’.  By&lt;br&gt;redefining ‘&lt;samp&gt;CC&lt;/samp&gt;’ to ‘&lt;samp&gt;ncc&lt;/samp&gt;’, you could cause ‘&lt;samp&gt;ncc&lt;/samp&gt;’ to be&lt;br&gt;used for all C compilations performed by the implicit rule.  By redefining&lt;br&gt;‘&lt;samp&gt;CFLAGS&lt;/samp&gt;’ to be ‘&lt;samp&gt;-g&lt;/samp&gt;’, you could pass the ‘&lt;samp&gt;-g&lt;/samp&gt;’ option to&lt;br&gt;each compilation.  &lt;em&gt;All&lt;/em&gt; implicit rules that do C compilation use&lt;br&gt;‘&lt;samp&gt;$(CC)&lt;/samp&gt;’ to get the program name for the compiler and &lt;em&gt;all&lt;/em&gt;&lt;br&gt;include ‘&lt;samp&gt;$(CFLAGS)&lt;/samp&gt;’ among the arguments given to the compiler.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The variables used in implicit rules fall into two classes: those that are&lt;br&gt;names of programs (like &lt;code&gt;CC&lt;/code&gt;) and those that contain arguments for the&lt;br&gt;programs (like &lt;code&gt;CFLAGS&lt;/code&gt;).  (The “name of a program” may also contain&lt;br&gt;some command arguments, but it must start with an actual executable program&lt;br&gt;name.)  If a variable value contains more than one argument, separate them&lt;br&gt;with spaces.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The following tables describe of some of the more commonly-used predefined&lt;br&gt;variables.  This list is not exhaustive, and the default values shown here may&lt;br&gt;not be what &lt;code&gt;make&lt;/code&gt; selects for your environment.  To see the&lt;br&gt;complete list of predefined variables for your instance of GNU &lt;code&gt;make&lt;/code&gt; you&lt;br&gt;can run ‘&lt;samp&gt;make -p&lt;/samp&gt;’ in a directory with no makefiles.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is a table of some of the more common variables used as names of&lt;br&gt;programs in built-in rules:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;AR&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-AR&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Archive-maintaining program; default ‘&lt;samp&gt;ar&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-ar&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;AS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-AS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program for compiling assembly files; default ‘&lt;samp&gt;as&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-as-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;CC&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-CC&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program for compiling C programs; default ‘&lt;samp&gt;cc&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-cc-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;CXX&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-CXX&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program for compiling C++ programs; default ‘&lt;samp&gt;g++&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-g_002b_002b-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;CPP&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-CPP&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program for running the C preprocessor, with results to standard output;&lt;br&gt;default ‘&lt;samp&gt;$(CC) -E&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;FC&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-FC&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program for compiling or preprocessing Fortran and Ratfor programs;&lt;br&gt;default ‘&lt;samp&gt;f77&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-f77-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;M2C&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-M2C&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program to use to compile Modula-2 source code; default ‘&lt;samp&gt;m2c&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-m2c-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;PC&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-PC&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program for compiling Pascal programs; default ‘&lt;samp&gt;pc&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-pc-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;CO&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-CO&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program for extracting a file from RCS; default ‘&lt;samp&gt;co&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-co-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-GET&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program for extracting a file from SCCS; default ‘&lt;samp&gt;get&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-get-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;LEX&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-LEX&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program to use to turn Lex grammars into source code; default ‘&lt;samp&gt;lex&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-lex-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;YACC&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-YACC&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program to use to turn Yacc grammars into source code; default ‘&lt;samp&gt;yacc&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-yacc-2&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;LINT&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-LINT&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program to use to run lint on source code; default ‘&lt;samp&gt;lint&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-lint-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKEINFO&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-MAKEINFO&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program to convert a Texinfo source file into an Info file; default&lt;br&gt;‘&lt;samp&gt;makeinfo&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-makeinfo-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;TEX&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-TEX&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program to make TeX &lt;small&gt;DVI&lt;/small&gt; files from TeX source;&lt;br&gt;default ‘&lt;samp&gt;tex&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-tex-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;TEXI2DVI&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-TEXI2DVI&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program to make TeX &lt;small&gt;DVI&lt;/small&gt; files from Texinfo source;&lt;br&gt;default ‘&lt;samp&gt;texi2dvi&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-texi2dvi-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;WEAVE&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-WEAVE&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program to translate Web into TeX; default ‘&lt;samp&gt;weave&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-weave-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;CWEAVE&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-CWEAVE&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program to translate C Web into TeX; default ‘&lt;samp&gt;cweave&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-cweave-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;TANGLE&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-TANGLE&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program to translate Web into Pascal; default ‘&lt;samp&gt;tangle&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-tangle-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;CTANGLE&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-CTANGLE&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Program to translate C Web into C; default ‘&lt;samp&gt;ctangle&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-ctangle-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;RM&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-RM&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Command to remove a file; default ‘&lt;samp&gt;rm -f&lt;/samp&gt;’.&lt;br&gt;&lt;a name=&quot;index-rm&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is a table of variables whose values are additional arguments for the&lt;br&gt;programs above.  The default values for all of these is the empty&lt;br&gt;string, unless otherwise noted.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ARFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-ARFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Flags to give the archive-maintaining program; default ‘&lt;samp&gt;rv&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ASFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-ASFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to the assembler (when explicitly&lt;br&gt;invoked on a ‘&lt;samp&gt;.s&lt;/samp&gt;’ or ‘&lt;samp&gt;.S&lt;/samp&gt;’ file).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;CFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-CFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to the C compiler.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;CXXFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-CXXFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to the C++ compiler.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;COFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-COFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to the RCS &lt;code&gt;co&lt;/code&gt; program.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;CPPFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-CPPFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to the C preprocessor and programs&lt;br&gt;that use it (the C and Fortran compilers).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;FFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-FFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to the Fortran compiler.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;GFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-GFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to the SCCS &lt;code&gt;get&lt;/code&gt; program.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;LDFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-LDFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to compilers when they are supposed to invoke the linker,&lt;br&gt;‘&lt;samp&gt;ld&lt;/samp&gt;’, such as &lt;code&gt;-L&lt;/code&gt;.  Libraries (&lt;code&gt;-lfoo&lt;/code&gt;) should be&lt;br&gt;added to the &lt;code&gt;LDLIBS&lt;/code&gt; variable instead.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;LDLIBS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-LDLIBS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-LOADLIBES&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Library flags or names given to compilers when they are supposed to&lt;br&gt;invoke the linker, ‘&lt;samp&gt;ld&lt;/samp&gt;’.  &lt;code&gt;LOADLIBES&lt;/code&gt; is a deprecated (but&lt;br&gt;still supported) alternative to &lt;code&gt;LDLIBS&lt;/code&gt;.  Non-library linker&lt;br&gt;flags, such as &lt;code&gt;-L&lt;/code&gt;, should go in the &lt;code&gt;LDFLAGS&lt;/code&gt; variable.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;LFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-LFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to Lex.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;YFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-YFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to Yacc.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;PFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-PFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to the Pascal compiler.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;RFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-RFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to the Fortran compiler for Ratfor programs.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;LINTFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-LINTFLAGS&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Extra flags to give to lint.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Chained-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Pattern-Rules&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Pattern Rules&lt;/a&gt;, Previous: &lt;a href=&quot;#Implicit-Variables&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Implicit Variables&lt;/a&gt;, Up: &lt;a href=&quot;#Implicit-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Implicit Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Chains-of-Implicit-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;10.4 Chains of Implicit Rules&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-chains-of-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-implicit_002c-chains-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Sometimes a file can be made by a sequence of implicit rules.  For example,&lt;br&gt;a file &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt; could be made from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.y&lt;/samp&gt; by running&lt;br&gt;first Yacc and then &lt;code&gt;cc&lt;/code&gt;.  Such a sequence is called a &lt;em&gt;chain&lt;/em&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the file &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt; exists, or is mentioned in the makefile, no&lt;br&gt;special searching is required: &lt;code&gt;make&lt;/code&gt; finds that the object file can&lt;br&gt;be made by C compilation from &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt;; later on, when considering&lt;br&gt;how to make &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt;, the rule for running Yacc is&lt;br&gt;used.  Ultimately both &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt; and &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt; are&lt;br&gt;updated.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-intermediate-files&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-files_002c-intermediate&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;However, even if &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt; does not exist and is not mentioned,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; knows how to envision it as the missing link between&lt;br&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt; and &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.y&lt;/samp&gt;!  In this case, &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt; is&lt;br&gt;called an &lt;em&gt;intermediate file&lt;/em&gt;.  Once &lt;code&gt;make&lt;/code&gt; has decided to use the&lt;br&gt;intermediate file, it is entered in the data base as if it had been&lt;br&gt;mentioned in the makefile, along with the implicit rule that says how to&lt;br&gt;create it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Intermediate files are remade using their rules just like all other&lt;br&gt;files.  But intermediate files are treated differently in two ways.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The first difference is what happens if the intermediate file does not&lt;br&gt;exist.  If an ordinary file &lt;var&gt;b&lt;/var&gt; does not exist, and &lt;code&gt;make&lt;/code&gt;&lt;br&gt;considers a target that depends on &lt;var&gt;b&lt;/var&gt;, it invariably creates&lt;br&gt;&lt;var&gt;b&lt;/var&gt; and then updates the target from &lt;var&gt;b&lt;/var&gt;.  But if &lt;var&gt;b&lt;/var&gt; is an&lt;br&gt;intermediate file, then &lt;code&gt;make&lt;/code&gt; can leave well enough alone.  It&lt;br&gt;won’t bother updating &lt;var&gt;b&lt;/var&gt;, or the ultimate target, unless some&lt;br&gt;prerequisite of &lt;var&gt;b&lt;/var&gt; is newer than that target or there is some other&lt;br&gt;reason to update that target.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The second difference is that if &lt;code&gt;make&lt;/code&gt; &lt;em&gt;does&lt;/em&gt; create &lt;var&gt;b&lt;/var&gt;&lt;br&gt;in order to update something else, it deletes &lt;var&gt;b&lt;/var&gt; later on after it&lt;br&gt;is no longer needed.  Therefore, an intermediate file which did not&lt;br&gt;exist before &lt;code&gt;make&lt;/code&gt; also does not exist after &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;code&gt;make&lt;/code&gt; reports the deletion to you by printing a ‘&lt;samp&gt;rm -f&lt;/samp&gt;’&lt;br&gt;command showing which file it is deleting.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Ordinarily, a file cannot be intermediate if it is mentioned in the&lt;br&gt;makefile as a target or prerequisite.  However, you can explicitly mark a&lt;br&gt;file as intermediate by listing it as a prerequisite of the special target&lt;br&gt;&lt;code&gt;.INTERMEDIATE&lt;/code&gt;.  This takes effect even if the file is mentioned&lt;br&gt;explicitly in some other way.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-intermediate-files_002c-preserving&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-preserving-intermediate-files&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-secondary-files&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;You can prevent automatic deletion of an intermediate file by marking it&lt;br&gt;as a &lt;em&gt;secondary&lt;/em&gt; file.  To do this, list it as a prerequisite of the&lt;br&gt;special target &lt;code&gt;.SECONDARY&lt;/code&gt;.  When a file is secondary, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;will not create the file merely because it does not already exist, but&lt;br&gt;&lt;code&gt;make&lt;/code&gt; does not automatically delete the file.  Marking a file as&lt;br&gt;secondary also marks it as intermediate.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can list the target pattern of an implicit rule (such as ‘&lt;samp&gt;%.o&lt;/samp&gt;’)&lt;br&gt;as a prerequisite of the special target &lt;code&gt;.PRECIOUS&lt;/code&gt; to preserve&lt;br&gt;intermediate files made by implicit rules whose target patterns match&lt;br&gt;that file’s name; see &lt;a href=&quot;#Interrupts&quot;&gt;Interrupts&lt;/a&gt;.&lt;br&gt;&lt;a name=&quot;index-preserving-with-_002ePRECIOUS-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002ePRECIOUS-intermediate-files&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A chain can involve more than two implicit rules.  For example, it is&lt;br&gt;possible to make a file &lt;samp&gt;foo&lt;/samp&gt; from &lt;samp&gt;RCS/foo.y,v&lt;/samp&gt; by running RCS,&lt;br&gt;Yacc and &lt;code&gt;cc&lt;/code&gt;.  Then both &lt;samp&gt;foo.y&lt;/samp&gt; and &lt;samp&gt;foo.c&lt;/samp&gt; are&lt;br&gt;intermediate files that are deleted at the end.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;No single implicit rule can appear more than once in a chain.  This means&lt;br&gt;that &lt;code&gt;make&lt;/code&gt; will not even consider such a ridiculous thing as making&lt;br&gt;&lt;samp&gt;foo&lt;/samp&gt; from &lt;samp&gt;foo.o.o&lt;/samp&gt; by running the linker twice.  This&lt;br&gt;constraint has the added benefit of preventing any infinite loop in the&lt;br&gt;search for an implicit rule chain.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;There are some special implicit rules to optimize certain cases that would&lt;br&gt;otherwise be handled by rule chains.  For example, making &lt;samp&gt;foo&lt;/samp&gt; from&lt;br&gt;&lt;samp&gt;foo.c&lt;/samp&gt; could be handled by compiling and linking with separate&lt;br&gt;chained rules, using &lt;samp&gt;foo.o&lt;/samp&gt; as an intermediate file.  But what&lt;br&gt;actually happens is that a special rule for this case does the compilation&lt;br&gt;and linking with a single &lt;code&gt;cc&lt;/code&gt; command.  The optimized rule is used in&lt;br&gt;preference to the step-by-step chain because it comes earlier in the&lt;br&gt;ordering of rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Pattern-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Last-Resort&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Last Resort&lt;/a&gt;, Previous: &lt;a href=&quot;#Chained-Rules&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Chained Rules&lt;/a&gt;, Up: &lt;a href=&quot;#Implicit-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Implicit Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Defining-and-Redefining-Pattern-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;10.5 Defining and Redefining Pattern Rules&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;You define an implicit rule by writing a &lt;em&gt;pattern rule&lt;/em&gt;.  A pattern&lt;br&gt;rule looks like an ordinary rule, except that its target contains the&lt;br&gt;character ‘&lt;samp&gt;%&lt;/samp&gt;’ (exactly one of them).  The target is considered a&lt;br&gt;pattern for matching file names; the ‘&lt;samp&gt;%&lt;/samp&gt;’ can match any nonempty&lt;br&gt;substring, while other characters match only themselves.  The prerequisites&lt;br&gt;likewise use ‘&lt;samp&gt;%&lt;/samp&gt;’ to show how their names relate to the target name.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Thus, a pattern rule ‘&lt;samp&gt;%.o : %.c&lt;/samp&gt;’ says how to make any file&lt;br&gt;&lt;samp&gt;&lt;var&gt;stem&lt;/var&gt;.o&lt;/samp&gt; from another file &lt;samp&gt;&lt;var&gt;stem&lt;/var&gt;.c&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Note that expansion using ‘&lt;samp&gt;%&lt;/samp&gt;’ in pattern rules occurs&lt;br&gt;&lt;strong&gt;after&lt;/strong&gt; any variable or function expansions, which take place&lt;br&gt;when the makefile is read.  See &lt;a href=&quot;#Using-Variables&quot;&gt;How to Use&lt;br&gt;Variables&lt;/a&gt;, and &lt;a href=&quot;#Functions&quot;&gt;Functions for Transforming Text&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Pattern-Intro&quot; accesskey=&quot;1&quot;&gt;Pattern Intro&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;An introduction to pattern rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Pattern-Examples&quot; accesskey=&quot;2&quot;&gt;Pattern Examples&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Examples of pattern rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Automatic-Variables&quot; accesskey=&quot;3&quot;&gt;Automatic Variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to use automatic variables in the&lt;br&gt;                                  recipe of implicit rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Pattern-Match&quot; accesskey=&quot;4&quot;&gt;Pattern Match&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How patterns match.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Match_002dAnything-Rules&quot; accesskey=&quot;5&quot;&gt;Match-Anything Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Precautions you should take prior to&lt;br&gt;                                  defining rules that can match any&lt;br&gt;                                  target file whatever.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Canceling-Rules&quot; accesskey=&quot;6&quot;&gt;Canceling Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to override or cancel built-in rules.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Pattern-Intro&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Pattern-Examples&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Pattern Examples&lt;/a&gt;, Previous: &lt;a href=&quot;#Pattern-Rules&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Pattern Rules&lt;/a&gt;, Up: &lt;a href=&quot;#Pattern-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Pattern Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Introduction-to-Pattern-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;10.5.1 Introduction to Pattern Rules&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-pattern-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-rule_002c-pattern&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A pattern rule contains the character ‘&lt;samp&gt;%&lt;/samp&gt;’ (exactly one of them)&lt;br&gt;in the target; otherwise, it looks exactly like an ordinary rule.  The&lt;br&gt;target is a pattern for matching file names; the ‘&lt;samp&gt;%&lt;/samp&gt;’ matches any&lt;br&gt;nonempty substring, while other characters match only themselves.&lt;br&gt;&lt;a name=&quot;index-target-pattern_002c-implicit&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0025_002c-in-pattern-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, ‘&lt;samp&gt;%.c&lt;/samp&gt;’ as a pattern matches any file name that ends in&lt;br&gt;‘&lt;samp&gt;.c&lt;/samp&gt;’.  ‘&lt;samp&gt;s.%.c&lt;/samp&gt;’ as a pattern matches any file name that starts&lt;br&gt;with ‘&lt;samp&gt;s.&lt;/samp&gt;’, ends in ‘&lt;samp&gt;.c&lt;/samp&gt;’ and is at least five characters long.&lt;br&gt;(There must be at least one character to match the ‘&lt;samp&gt;%&lt;/samp&gt;’.)  The substring&lt;br&gt;that the ‘&lt;samp&gt;%&lt;/samp&gt;’ matches is called the &lt;em&gt;stem&lt;/em&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;‘&lt;samp&gt;%&lt;/samp&gt;’ in a prerequisite of a pattern rule stands for the same stem&lt;br&gt;that was matched by the ‘&lt;samp&gt;%&lt;/samp&gt;’ in the target.  In order for the&lt;br&gt;pattern rule to apply, its target pattern must match the file name&lt;br&gt;under consideration and all of its prerequisites (after pattern&lt;br&gt;substitution) must name files that exist or can be made.  These files&lt;br&gt;become prerequisites of the target.&lt;br&gt;&lt;a name=&quot;index-prerequisite-pattern_002c-implicit&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Thus, a rule of the form&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;%.o : %.c ; &lt;var&gt;recipe&lt;/var&gt;…&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;specifies how to make a file &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt;, with another file&lt;br&gt;&lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt; as its prerequisite, provided that &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt;&lt;br&gt;exists or can be made.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;There may also be prerequisites that do not use ‘&lt;samp&gt;%&lt;/samp&gt;’; such a prerequisite&lt;br&gt;attaches to every file made by this pattern rule.  These unvarying&lt;br&gt;prerequisites are useful occasionally.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A pattern rule need not have any prerequisites that contain ‘&lt;samp&gt;%&lt;/samp&gt;’, or&lt;br&gt;in fact any prerequisites at all.  Such a rule is effectively a general&lt;br&gt;wildcard.  It provides a way to make any file that matches the target&lt;br&gt;pattern.  See &lt;a href=&quot;#Last-Resort&quot;&gt;Last Resort&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;More than one pattern rule may match a target.  In this case&lt;br&gt;&lt;code&gt;make&lt;/code&gt; will choose the “best fit” rule.  See &lt;a href=&quot;#Pattern-Match&quot;&gt;How Patterns Match&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Pattern rules may have more than one target.  Unlike normal rules,&lt;br&gt;this does not act as many different rules with the same prerequisites&lt;br&gt;and recipe.  If a pattern rule has multiple targets, &lt;code&gt;make&lt;/code&gt; knows&lt;br&gt;that the rule’s recipe is responsible for making all of the targets.&lt;br&gt;The recipe is executed only once to make all the targets.  When&lt;br&gt;searching for a pattern rule to match a target, the target patterns of&lt;br&gt;a rule other than the one that matches the target in need of a rule&lt;br&gt;are incidental: &lt;code&gt;make&lt;/code&gt; worries only about giving a recipe and&lt;br&gt;prerequisites to the file presently in question.  However, when this&lt;br&gt;file’s recipe is run, the other targets are marked as having been&lt;br&gt;updated themselves.&lt;br&gt;&lt;a name=&quot;index-multiple-targets_002c-in-pattern-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-target_002c-multiple-in-pattern-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Pattern-Examples&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Automatic-Variables&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Automatic Variables&lt;/a&gt;, Previous: &lt;a href=&quot;#Pattern-Intro&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Pattern Intro&lt;/a&gt;, Up: &lt;a href=&quot;#Pattern-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Pattern Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Pattern-Rule-Examples&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;10.5.2 Pattern Rule Examples&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here are some examples of pattern rules actually predefined in&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.  First, the rule that compiles ‘&lt;samp&gt;.c&lt;/samp&gt;’ files into ‘&lt;samp&gt;.o&lt;/samp&gt;’&lt;br&gt;files:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;%.o : %.c&lt;br&gt;        $(CC) -c $(CFLAGS) $(CPPFLAGS) $&amp;lt; -o $@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;defines a rule that can make any file &lt;samp&gt;&lt;var&gt;x&lt;/var&gt;.o&lt;/samp&gt; from&lt;br&gt;&lt;samp&gt;&lt;var&gt;x&lt;/var&gt;.c&lt;/samp&gt;.  The recipe uses the automatic variables ‘&lt;samp&gt;$@&lt;/samp&gt;’ and&lt;br&gt;‘&lt;samp&gt;$&amp;lt;&lt;/samp&gt;’ to substitute the names of the target file and the source file&lt;br&gt;in each case where the rule applies (see &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is a second built-in rule:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;% :: RCS/%,v&lt;br&gt;        $(CO) $(COFLAGS) $&amp;lt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;defines a rule that can make any file &lt;samp&gt;&lt;var&gt;x&lt;/var&gt;&lt;/samp&gt; whatsoever from a&lt;br&gt;corresponding file &lt;samp&gt;&lt;var&gt;x&lt;/var&gt;,v&lt;/samp&gt; in the sub-directory &lt;samp&gt;RCS&lt;/samp&gt;.  Since&lt;br&gt;the target is ‘&lt;samp&gt;%&lt;/samp&gt;’, this rule will apply to any file whatever, provided&lt;br&gt;the appropriate prerequisite file exists.  The double colon makes the rule&lt;br&gt;&lt;em&gt;terminal&lt;/em&gt;, which means that its prerequisite may not be an intermediate&lt;br&gt;file (see &lt;a href=&quot;#Match_002dAnything-Rules&quot;&gt;Match-Anything Pattern Rules&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This pattern rule has two targets:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;%.tab.c %.tab.h: %.y&lt;br&gt;        bison -d $&amp;lt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This tells &lt;code&gt;make&lt;/code&gt; that the recipe ‘&lt;samp&gt;bison -d &lt;var&gt;x&lt;/var&gt;.y&lt;/samp&gt;’ will&lt;br&gt;make both &lt;samp&gt;&lt;var&gt;x&lt;/var&gt;.tab.c&lt;/samp&gt; and &lt;samp&gt;&lt;var&gt;x&lt;/var&gt;.tab.h&lt;/samp&gt;.  If the file&lt;br&gt;&lt;samp&gt;foo&lt;/samp&gt; depends on the files &lt;samp&gt;parse.tab.o&lt;/samp&gt; and &lt;samp&gt;scan.o&lt;/samp&gt;&lt;br&gt;and the file &lt;samp&gt;scan.o&lt;/samp&gt; depends on the file &lt;samp&gt;parse.tab.h&lt;/samp&gt;,&lt;br&gt;when &lt;samp&gt;parse.y&lt;/samp&gt; is changed, the recipe ‘&lt;samp&gt;bison -d parse.y&lt;/samp&gt;’&lt;br&gt;will be executed only once, and the prerequisites of both&lt;br&gt;&lt;samp&gt;parse.tab.o&lt;/samp&gt; and &lt;samp&gt;scan.o&lt;/samp&gt; will be satisfied.  (Presumably&lt;br&gt;the file &lt;samp&gt;parse.tab.o&lt;/samp&gt; will be recompiled from &lt;samp&gt;parse.tab.c&lt;/samp&gt;&lt;br&gt;and the file &lt;samp&gt;scan.o&lt;/samp&gt; from &lt;samp&gt;scan.c&lt;/samp&gt;, while &lt;samp&gt;foo&lt;/samp&gt; is&lt;br&gt;linked from &lt;samp&gt;parse.tab.o&lt;/samp&gt;, &lt;samp&gt;scan.o&lt;/samp&gt;, and its other&lt;br&gt;prerequisites, and it will execute happily ever after.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Automatic-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Pattern-Match&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Pattern Match&lt;/a&gt;, Previous: &lt;a href=&quot;#Pattern-Examples&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Pattern Examples&lt;/a&gt;, Up: &lt;a href=&quot;#Pattern-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Pattern Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Automatic-Variables-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;10.5.3 Automatic Variables&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-automatic-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-automatic&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-variables_002c-and-implicit-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Suppose you are writing a pattern rule to compile a ‘&lt;samp&gt;.c&lt;/samp&gt;’ file into a&lt;br&gt;‘&lt;samp&gt;.o&lt;/samp&gt;’ file: how do you write the ‘&lt;samp&gt;cc&lt;/samp&gt;’ command so that it operates&lt;br&gt;on the right source file name?  You cannot write the name in the recipe,&lt;br&gt;because the name is different each time the implicit rule is applied.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;What you do is use a special feature of &lt;code&gt;make&lt;/code&gt;, the &lt;em&gt;automatic&lt;br&gt;variables&lt;/em&gt;.  These variables have values computed afresh for each rule that&lt;br&gt;is executed, based on the target and prerequisites of the rule.  In this&lt;br&gt;example, you would use ‘&lt;samp&gt;$@&lt;/samp&gt;’ for the object file name and ‘&lt;samp&gt;$&amp;lt;&lt;/samp&gt;’&lt;br&gt;for the source file name.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-automatic-variables-in-prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-prerequisites_002c-and-automatic-variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;It’s very important that you recognize the limited scope in which&lt;br&gt;automatic variable values are available: they only have values within&lt;br&gt;the recipe.  In particular, you cannot use them anywhere&lt;br&gt;within the target list of a rule; they have no value there and will&lt;br&gt;expand to the empty string.  Also, they cannot be accessed directly&lt;br&gt;within the prerequisite list of a rule.  A common mistake is&lt;br&gt;attempting to use &lt;code&gt;$@&lt;/code&gt; within the prerequisites list; this will&lt;br&gt;not work.  However, there is a special feature of GNU &lt;code&gt;make&lt;/code&gt;,&lt;br&gt;secondary expansion (see &lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;), which will allow&lt;br&gt;automatic variable values to be used in prerequisite lists.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is a table of automatic variables:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_0024_0040&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0040-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$@&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The file name of the target of the rule.  If the target is an archive&lt;br&gt;member, then ‘&lt;samp&gt;$@&lt;/samp&gt;’ is the name of the archive file.  In a pattern&lt;br&gt;rule that has multiple targets (see &lt;a href=&quot;#Pattern-Intro&quot;&gt;Introduction to&lt;br&gt;Pattern Rules&lt;/a&gt;), ‘&lt;samp&gt;$@&lt;/samp&gt;’ is the name of whichever target caused the&lt;br&gt;rule’s recipe to be run.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_0025&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0025-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$%&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The target member name, when the target is an archive member.&lt;br&gt;See &lt;a href=&quot;#Archives&quot;&gt;Archives&lt;/a&gt;.  For example, if the target is &lt;samp&gt;foo.a(bar.o)&lt;/samp&gt; then&lt;br&gt;‘&lt;samp&gt;$%&lt;/samp&gt;’ is &lt;samp&gt;bar.o&lt;/samp&gt; and ‘&lt;samp&gt;$@&lt;/samp&gt;’ is &lt;samp&gt;foo.a&lt;/samp&gt;.  ‘&lt;samp&gt;$%&lt;/samp&gt;’ is&lt;br&gt;empty when the target is not an archive member.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_003c&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003c-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$&amp;lt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The name of the first prerequisite.  If the target got its recipe from&lt;br&gt;an implicit rule, this will be the first prerequisite added by the&lt;br&gt;implicit rule (see &lt;a href=&quot;#Implicit-Rules&quot;&gt;Implicit Rules&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_003f&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003f-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$?&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The names of all the prerequisites that are newer than the target, with&lt;br&gt;spaces between them.  For prerequisites which are archive members, only&lt;br&gt;the named member is used (see &lt;a href=&quot;#Archives&quot;&gt;Archives&lt;/a&gt;).&lt;br&gt;&lt;a name=&quot;index-prerequisites_002c-list-of-changed&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-list-of-changed-prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_005e&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_005e-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$^&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The names of all the prerequisites, with spaces between them.  For&lt;br&gt;prerequisites which are archive members, only the named member is used&lt;br&gt;(see &lt;a href=&quot;#Archives&quot;&gt;Archives&lt;/a&gt;).  A target has only one prerequisite on each other file&lt;br&gt;it depends on, no matter how many times each file is listed as a&lt;br&gt;prerequisite.  So if you list a prerequisite more than once for a target,&lt;br&gt;the value of &lt;code&gt;$^&lt;/code&gt; contains just one copy of the name.  This list&lt;br&gt;does &lt;strong&gt;not&lt;/strong&gt; contain any of the order-only prerequisites; for those&lt;br&gt;see the ‘&lt;samp&gt;$|&lt;/samp&gt;’ variable, below.&lt;br&gt;&lt;a name=&quot;index-prerequisites_002c-list-of-all&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-list-of-all-prerequisites&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_002b&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002b-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$+&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;This is like ‘&lt;samp&gt;$^&lt;/samp&gt;’, but prerequisites listed more than once are&lt;br&gt;duplicated in the order they were listed in the makefile.  This is&lt;br&gt;primarily useful for use in linking commands where it is meaningful to&lt;br&gt;repeat library file names in a particular order.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_007c&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_007c-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$|&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The names of all the order-only prerequisites, with spaces between&lt;br&gt;them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_002a&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002a-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$&lt;em&gt;&lt;/em&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The stem with which an implicit rule matches (see &lt;a href=&quot;#Pattern-Match&quot;&gt;How&lt;br&gt;Patterns Match&lt;/a&gt;).  If the target is &lt;samp&gt;dir/a.foo.b&lt;/samp&gt; and the target&lt;br&gt;pattern is &lt;samp&gt;a.%.b&lt;/samp&gt; then the stem is &lt;samp&gt;dir/foo&lt;/samp&gt;.  The stem is&lt;br&gt;useful for constructing names of related files.&lt;br&gt;&lt;a name=&quot;index-stem_002c-variable-for&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In a static pattern rule, the stem is part of the file name that matched&lt;br&gt;the ‘&lt;samp&gt;%&lt;/samp&gt;’ in the target pattern.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In an explicit rule, there is no stem; so ‘&lt;samp&gt;$&lt;/samp&gt;’ cannot be determined&lt;br&gt;in that way.  Instead, if the target name ends with a recognized suffix&lt;br&gt;(see &lt;a href=&quot;#Suffix-Rules&quot;&gt;Old-Fashioned Suffix Rules&lt;/a&gt;), ‘&lt;samp&gt;$&lt;em&gt;&lt;/em&gt;&lt;/samp&gt;’ is set to&lt;br&gt;the target name minus the suffix.  For example, if the target name is&lt;br&gt;‘&lt;samp&gt;foo.c&lt;/samp&gt;’, then ‘&lt;samp&gt;$&lt;/samp&gt;’ is set to ‘&lt;samp&gt;foo&lt;/samp&gt;’, since ‘&lt;samp&gt;.c&lt;/samp&gt;’ is a&lt;br&gt;suffix.  GNU &lt;code&gt;make&lt;/code&gt; does this bizarre thing only for compatibility&lt;br&gt;with other implementations of &lt;code&gt;make&lt;/code&gt;.  You should generally avoid&lt;br&gt;using ‘&lt;samp&gt;$&lt;em&gt;&lt;/em&gt;&lt;/samp&gt;’ except in implicit rules or static pattern rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the target name in an explicit rule does not end with a recognized&lt;br&gt;suffix, ‘&lt;samp&gt;$&lt;/samp&gt;’ is set to the empty string for that rule.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;‘&lt;samp&gt;$?&lt;/samp&gt;’ is useful even in explicit rules when you wish to operate on only&lt;br&gt;the prerequisites that have changed.  For example, suppose that an archive&lt;br&gt;named &lt;samp&gt;lib&lt;/samp&gt; is supposed to contain copies of several object files.&lt;br&gt;This rule copies just the changed object files into the archive:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;lib: foo.o bar.o lose.o win.o&lt;br&gt;        ar r lib $?&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Of the variables listed above, four have values that are single file&lt;br&gt;names, and three have values that are lists of file names.  These seven&lt;br&gt;have variants that get just the file’s directory name or just the file&lt;br&gt;name within the directory.  The variant variables’ names are formed by&lt;br&gt;appending ‘&lt;samp&gt;D&lt;/samp&gt;’ or ‘&lt;samp&gt;F&lt;/samp&gt;’, respectively.  These variants are&lt;br&gt;semi-obsolete in GNU &lt;code&gt;make&lt;/code&gt; since the functions &lt;code&gt;dir&lt;/code&gt; and&lt;br&gt;&lt;code&gt;notdir&lt;/code&gt; can be used to get a similar effect (see &lt;a href=&quot;#File-Name-Functions&quot;&gt;Functions for File Names&lt;/a&gt;).  Note, however, that the&lt;br&gt;‘&lt;samp&gt;D&lt;/samp&gt;’ variants all omit the trailing slash which always appears in&lt;br&gt;the output of the &lt;code&gt;dir&lt;/code&gt; function.  Here is a table of the variants:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_0024_0028_0040D_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0040D-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(@D)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory part of the file name of the target, with the trailing&lt;br&gt;slash removed.  If the value of ‘&lt;samp&gt;$@&lt;/samp&gt;’ is &lt;samp&gt;dir/foo.o&lt;/samp&gt; then&lt;br&gt;‘&lt;samp&gt;$(@D)&lt;/samp&gt;’ is &lt;samp&gt;dir&lt;/samp&gt;.  This value is &lt;samp&gt;.&lt;/samp&gt; if ‘&lt;samp&gt;$@&lt;/samp&gt;’ does&lt;br&gt;not contain a slash.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_0028_0040F_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0040F-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(@F)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The file-within-directory part of the file name of the target.  If the&lt;br&gt;value of ‘&lt;samp&gt;$@&lt;/samp&gt;’ is &lt;samp&gt;dir/foo.o&lt;/samp&gt; then ‘&lt;samp&gt;$(@F)&lt;/samp&gt;’ is&lt;br&gt;&lt;samp&gt;foo.o&lt;/samp&gt;.  ‘&lt;samp&gt;$(@F)&lt;/samp&gt;’ is equivalent to ‘&lt;samp&gt;$(notdir $@)&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_0028_002aD_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002aD-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(&lt;em&gt;D)&lt;/em&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_0024_0028_002aF_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002aF-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(F)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory part and the file-within-directory&lt;br&gt;part of the stem; &lt;samp&gt;dir&lt;/samp&gt; and &lt;samp&gt;foo&lt;/samp&gt; in this example.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_0028_0025D_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0025D-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(%D)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_0024_0028_0025F_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_0025F-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(%F)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory part and the file-within-directory part of the target&lt;br&gt;archive member name.  This makes sense only for archive member targets&lt;br&gt;of the form &lt;samp&gt;&lt;var&gt;archive&lt;/var&gt;(&lt;var&gt;member&lt;/var&gt;)&lt;/samp&gt; and is useful only when&lt;br&gt;&lt;var&gt;member&lt;/var&gt; may contain a directory name.  (See &lt;a href=&quot;#Archive-Members&quot;&gt;Archive Members as Targets&lt;/a&gt;.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_0028_003cD_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003cD-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(&amp;lt;D)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_0024_0028_003cF_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003cF-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(&amp;lt;F)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory part and the file-within-directory&lt;br&gt;part of the first prerequisite.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_0028_005eD_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_005eD-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(^D)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_0024_0028_005eF_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_005eF-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(^F)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Lists of the directory parts and the file-within-directory&lt;br&gt;parts of all prerequisites.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_0028_002bD_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002bD-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(+D)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_0024_0028_002bF_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002bF-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(+F)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Lists of the directory parts and the file-within-directory&lt;br&gt;parts of all prerequisites, including multiple instances of duplicated&lt;br&gt;prerequisites.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_0024_0028_003fD_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003fD-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(?D)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-_0024_0028_003fF_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_003fF-_0028automatic-variable_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;$(?F)&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Lists of the directory parts and the file-within-directory parts of&lt;br&gt;all prerequisites that are newer than the target.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Note that we use a special stylistic convention when we talk about these&lt;br&gt;automatic variables; we write “the value of ‘&lt;samp&gt;$&amp;lt;&lt;/samp&gt;’”, rather than&lt;br&gt;“the&amp;nbsp;variable&amp;nbsp;&lt;code&gt;&amp;lt;&lt;/code&gt;”&lt;!-- /@w --&gt; as we would write for ordinary variables&lt;br&gt;such as &lt;code&gt;objects&lt;/code&gt; and &lt;code&gt;CFLAGS&lt;/code&gt;.  We think this convention&lt;br&gt;looks more natural in this special case.  Please do not assume it has a&lt;br&gt;deep significance; ‘&lt;samp&gt;$&amp;lt;&lt;/samp&gt;’ refers to the variable named &lt;code&gt;&amp;lt;&lt;/code&gt; just&lt;br&gt;as ‘&lt;samp&gt;$(CFLAGS)&lt;/samp&gt;’ refers to the variable named &lt;code&gt;CFLAGS&lt;/code&gt;.&lt;br&gt;You could just as well use ‘&lt;samp&gt;$(&amp;lt;)&lt;/samp&gt;’ in place of ‘&lt;samp&gt;$&amp;lt;&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Pattern-Match&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Match_002dAnything-Rules&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Match-Anything Rules&lt;/a&gt;, Previous: &lt;a href=&quot;#Automatic-Variables&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Automatic Variables&lt;/a&gt;, Up: &lt;a href=&quot;#Pattern-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Pattern Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;How-Patterns-Match&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;10.5.4 How Patterns Match&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-stem-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;A target pattern is composed of a ‘&lt;samp&gt;%&lt;/samp&gt;’ between a prefix and a suffix,&lt;br&gt;either or both of which may be empty.  The pattern matches a file name only&lt;br&gt;if the file name starts with the prefix and ends with the suffix, without&lt;br&gt;overlap.  The text between the prefix and the suffix is called the&lt;br&gt;&lt;em&gt;stem&lt;/em&gt;.  Thus, when the pattern ‘&lt;samp&gt;%.o&lt;/samp&gt;’ matches the file name&lt;br&gt;&lt;samp&gt;test.o&lt;/samp&gt;, the stem is ‘&lt;samp&gt;test&lt;/samp&gt;’.  The pattern rule prerequisites are&lt;br&gt;turned into actual file names by substituting the stem for the character&lt;br&gt;‘&lt;samp&gt;%&lt;/samp&gt;’.  Thus, if in the same example one of the prerequisites is written&lt;br&gt;as ‘&lt;samp&gt;%.c&lt;/samp&gt;’, it expands to ‘&lt;samp&gt;test.c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When the target pattern does not contain a slash (and it usually does&lt;br&gt;not), directory names in the file names are removed from the file name&lt;br&gt;before it is compared with the target prefix and suffix.  After the&lt;br&gt;comparison of the file name to the target pattern, the directory&lt;br&gt;names, along with the slash that ends them, are added on to the&lt;br&gt;prerequisite file names generated from the pattern rule’s prerequisite&lt;br&gt;patterns and the file name.  The directories are ignored only for the&lt;br&gt;purpose of finding an implicit rule to use, not in the application of&lt;br&gt;that rule.  Thus, ‘&lt;samp&gt;e%t&lt;/samp&gt;’ matches the file name &lt;samp&gt;src/eat&lt;/samp&gt;,&lt;br&gt;with ‘&lt;samp&gt;src/a&lt;/samp&gt;’ as the stem.  When prerequisites are turned into file&lt;br&gt;names, the directories from the stem are added at the front, while the&lt;br&gt;rest of the stem is substituted for the ‘&lt;samp&gt;%&lt;/samp&gt;’.  The stem&lt;br&gt;‘&lt;samp&gt;src/a&lt;/samp&gt;’ with a prerequisite pattern ‘&lt;samp&gt;c%r&lt;/samp&gt;’ gives the file name&lt;br&gt;&lt;samp&gt;src/car&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-pattern-rules_002c-order-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-order-of-pattern-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;A pattern rule can be used to build a given file only if there is a&lt;br&gt;target pattern that matches the file name, &lt;em&gt;and&lt;/em&gt; all&lt;br&gt;prerequisites in that rule either exist or can be built.  The rules&lt;br&gt;you write take precedence over those that are built in. Note however,&lt;br&gt;that a rule whose prerequisites actually exist or are mentioned always&lt;br&gt;takes priority over a rule with prerequisites that must be made by&lt;br&gt;chaining other implicit rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-stem_002c-shortest&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;It is possible that more than one pattern rule will meet these&lt;br&gt;criteria.  In that case, &lt;code&gt;make&lt;/code&gt; will choose the rule with the&lt;br&gt;shortest stem (that is, the pattern that matches most specifically).&lt;br&gt;If more than one pattern rule has the shortest stem, &lt;code&gt;make&lt;/code&gt; will&lt;br&gt;choose the first one found in the makefile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This algorithm results in more specific rules being preferred over&lt;br&gt;more generic ones; for example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;%.o: %.c&lt;br&gt;        $(CC) -c $(CFLAGS) $(CPPFLAGS) $&amp;lt; -o $@&lt;br&gt;&lt;br&gt;%.o : %.f&lt;br&gt;        $(COMPILE.F) $(OUTPUT_OPTION) $&amp;lt;&lt;br&gt;&lt;br&gt;lib/%.o: lib/%.c&lt;br&gt;        $(CC) -fPIC -c $(CFLAGS) $(CPPFLAGS) $&amp;lt; -o $@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Given these rules and asked to build &lt;samp&gt;bar.o&lt;/samp&gt; where both&lt;br&gt;&lt;samp&gt;bar.c&lt;/samp&gt; and &lt;samp&gt;bar.f&lt;/samp&gt; exist, &lt;code&gt;make&lt;/code&gt; will choose the first&lt;br&gt;rule and compile &lt;samp&gt;bar.c&lt;/samp&gt; into &lt;samp&gt;bar.o&lt;/samp&gt;.  In the same&lt;br&gt;situation where &lt;samp&gt;bar.c&lt;/samp&gt; does not exist, then &lt;code&gt;make&lt;/code&gt; will&lt;br&gt;choose the second rule and compile &lt;samp&gt;bar.f&lt;/samp&gt; into &lt;samp&gt;bar.o&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If &lt;code&gt;make&lt;/code&gt; is asked to build &lt;samp&gt;lib/bar.o&lt;/samp&gt; and both&lt;br&gt;&lt;samp&gt;lib/bar.c&lt;/samp&gt; and &lt;samp&gt;lib/bar.f&lt;/samp&gt; exist, then the third rule will&lt;br&gt;be chosen since the stem for this rule (‘&lt;samp&gt;bar&lt;/samp&gt;’) is shorter than&lt;br&gt;the stem for the first rule (‘&lt;samp&gt;lib/bar&lt;/samp&gt;’).  If &lt;samp&gt;lib/bar.c&lt;/samp&gt;&lt;br&gt;does not exist then the third rule is not eligible and the second rule&lt;br&gt;will be used, even though the stem is longer.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Match_002dAnything-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Canceling-Rules&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Canceling Rules&lt;/a&gt;, Previous: &lt;a href=&quot;#Pattern-Match&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Pattern Match&lt;/a&gt;, Up: &lt;a href=&quot;#Pattern-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Pattern Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Match_002dAnything-Pattern-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;10.5.5 Match-Anything Pattern Rules&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-match_002danything-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-terminal-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;When a pattern rule’s target is just ‘&lt;samp&gt;%&lt;/samp&gt;’, it matches any file name&lt;br&gt;whatever.  We call these rules &lt;em&gt;match-anything&lt;/em&gt; rules.  They are very&lt;br&gt;useful, but it can take a lot of time for &lt;code&gt;make&lt;/code&gt; to think about them,&lt;br&gt;because it must consider every such rule for each file name listed either&lt;br&gt;as a target or as a prerequisite.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Suppose the makefile mentions &lt;samp&gt;foo.c&lt;/samp&gt;.  For this target, &lt;code&gt;make&lt;/code&gt;&lt;br&gt;would have to consider making it by linking an object file &lt;samp&gt;foo.c.o&lt;/samp&gt;,&lt;br&gt;or by C compilation-and-linking in one step from &lt;samp&gt;foo.c.c&lt;/samp&gt;, or by&lt;br&gt;Pascal compilation-and-linking from &lt;samp&gt;foo.c.p&lt;/samp&gt;, and many other&lt;br&gt;possibilities.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;We know these possibilities are ridiculous since &lt;samp&gt;foo.c&lt;/samp&gt; is a C source&lt;br&gt;file, not an executable.  If &lt;code&gt;make&lt;/code&gt; did consider these possibilities,&lt;br&gt;it would ultimately reject them, because files such as &lt;samp&gt;foo.c.o&lt;/samp&gt; and&lt;br&gt;&lt;samp&gt;foo.c.p&lt;/samp&gt; would not exist.  But these possibilities are so&lt;br&gt;numerous that &lt;code&gt;make&lt;/code&gt; would run very slowly if it had to consider&lt;br&gt;them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To gain speed, we have put various constraints on the way &lt;code&gt;make&lt;/code&gt;&lt;br&gt;considers match-anything rules.  There are two different constraints that&lt;br&gt;can be applied, and each time you define a match-anything rule you must&lt;br&gt;choose one or the other for that rule.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;One choice is to mark the match-anything rule as &lt;em&gt;terminal&lt;/em&gt; by defining&lt;br&gt;it with a double colon.  When a rule is terminal, it does not apply unless&lt;br&gt;its prerequisites actually exist.  Prerequisites that could be made with&lt;br&gt;other implicit rules are not good enough.  In other words, no further&lt;br&gt;chaining is allowed beyond a terminal rule.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, the built-in implicit rules for extracting sources from RCS&lt;br&gt;and SCCS files are terminal; as a result, if the file &lt;samp&gt;foo.c,v&lt;/samp&gt; does&lt;br&gt;not exist, &lt;code&gt;make&lt;/code&gt; will not even consider trying to make it as an&lt;br&gt;intermediate file from &lt;samp&gt;foo.c,v.o&lt;/samp&gt; or from &lt;samp&gt;RCS/SCCS/s.foo.c,v&lt;/samp&gt;.&lt;br&gt;RCS and SCCS files are generally ultimate source files, which should not be&lt;br&gt;remade from any other files; therefore, &lt;code&gt;make&lt;/code&gt; can save time by not&lt;br&gt;looking for ways to remake them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you do not mark the match-anything rule as terminal, then it is&lt;br&gt;non-terminal.  A non-terminal match-anything rule cannot apply to a file name&lt;br&gt;that indicates a specific type of data.  A file name indicates a specific&lt;br&gt;type of data if some non-match-anything implicit rule target matches it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, the file name &lt;samp&gt;foo.c&lt;/samp&gt; matches the target for the pattern&lt;br&gt;rule ‘&lt;samp&gt;%.c : %.y&lt;/samp&gt;’ (the rule to run Yacc).  Regardless of whether this&lt;br&gt;rule is actually applicable (which happens only if there is a file&lt;br&gt;&lt;samp&gt;foo.y&lt;/samp&gt;), the fact that its target matches is enough to prevent&lt;br&gt;consideration of any non-terminal match-anything rules for the file&lt;br&gt;&lt;samp&gt;foo.c&lt;/samp&gt;.  Thus, &lt;code&gt;make&lt;/code&gt; will not even consider trying to make&lt;br&gt;&lt;samp&gt;foo.c&lt;/samp&gt; as an executable file from &lt;samp&gt;foo.c.o&lt;/samp&gt;, &lt;samp&gt;foo.c.c&lt;/samp&gt;,&lt;br&gt;&lt;samp&gt;foo.c.p&lt;/samp&gt;, etc.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The motivation for this constraint is that non-terminal match-anything&lt;br&gt;rules are used for making files containing specific types of data (such as&lt;br&gt;executable files) and a file name with a recognized suffix indicates some&lt;br&gt;other specific type of data (such as a C source file).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Special built-in dummy pattern rules are provided solely to recognize&lt;br&gt;certain file names so that non-terminal match-anything rules will not be&lt;br&gt;considered.  These dummy rules have no prerequisites and no recipes, and&lt;br&gt;they are ignored for all other purposes.  For example, the built-in&lt;br&gt;implicit rule&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;%.p :&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;exists to make sure that Pascal source files such as &lt;samp&gt;foo.p&lt;/samp&gt; match a&lt;br&gt;specific target pattern and thereby prevent time from being wasted looking&lt;br&gt;for &lt;samp&gt;foo.p.o&lt;/samp&gt; or &lt;samp&gt;foo.p.c&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Dummy pattern rules such as the one for ‘&lt;samp&gt;%.p&lt;/samp&gt;’ are made for every&lt;br&gt;suffix listed as valid for use in suffix rules (see &lt;a href=&quot;#Suffix-Rules&quot;&gt;Old-Fashioned Suffix Rules&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Canceling-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Match_002dAnything-Rules&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Match-Anything Rules&lt;/a&gt;, Up: &lt;a href=&quot;#Pattern-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Pattern Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Canceling-Implicit-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;10.5.6 Canceling Implicit Rules&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;You can override a built-in implicit rule (or one you have defined&lt;br&gt;yourself) by defining a new pattern rule with the same target and&lt;br&gt;prerequisites, but a different recipe.  When the new rule is defined, the&lt;br&gt;built-in one is replaced.  The new rule’s position in the sequence of&lt;br&gt;implicit rules is determined by where you write the new rule.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can cancel a built-in implicit rule by defining a pattern rule with the&lt;br&gt;same target and prerequisites, but no recipe.  For example, the following&lt;br&gt;would cancel the rule that runs the assembler:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;%.o : %.s&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Last-Resort&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Suffix-Rules&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Suffix Rules&lt;/a&gt;, Previous: &lt;a href=&quot;#Pattern-Rules&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Pattern Rules&lt;/a&gt;, Up: &lt;a href=&quot;#Implicit-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Implicit Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Defining-Last_002dResort-Default-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;10.6 Defining Last-Resort Default Rules&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-last_002dresort-default-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-default-rules_002c-last_002dresort&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;You can define a last-resort implicit rule by writing a terminal&lt;br&gt;match-anything pattern rule with no prerequisites (see &lt;a href=&quot;#Match_002dAnything-Rules&quot;&gt;Match-Anything Rules&lt;/a&gt;).  This is just like any other pattern rule; the only thing&lt;br&gt;special about it is that it will match any target.  So such a rule’s&lt;br&gt;recipe is used for all targets and prerequisites that have no recipe&lt;br&gt;of their own and for which no other implicit rule applies.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, when testing a makefile, you might not care if the source&lt;br&gt;files contain real data, only that they exist.  Then you might do this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;%::&lt;br&gt;        touch $@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;to cause all the source files needed (as prerequisites) to be created&lt;br&gt;automatically.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eDEFAULT-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;You can instead define a recipe to be used for targets for which there&lt;br&gt;are no rules at all, even ones which don’t specify recipes.  You do&lt;br&gt;this by writing a rule for the target &lt;code&gt;.DEFAULT&lt;/code&gt;.  Such a rule’s&lt;br&gt;recipe is used for all prerequisites which do not appear as targets in&lt;br&gt;any explicit rule, and for which no implicit rule applies.  Naturally,&lt;br&gt;there is no &lt;code&gt;.DEFAULT&lt;/code&gt; rule unless you write one.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you use &lt;code&gt;.DEFAULT&lt;/code&gt; with no recipe or prerequisites:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.DEFAULT:&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;the recipe previously stored for &lt;code&gt;.DEFAULT&lt;/code&gt; is cleared.  Then&lt;br&gt;&lt;code&gt;make&lt;/code&gt; acts as if you had never defined &lt;code&gt;.DEFAULT&lt;/code&gt; at all.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you do not want a target to get the recipe from a match-anything&lt;br&gt;pattern rule or &lt;code&gt;.DEFAULT&lt;/code&gt;, but you also do not want any recipe&lt;br&gt;to be run for the target, you can give it an empty recipe&lt;br&gt;(see &lt;a href=&quot;#Empty-Recipes&quot;&gt;Defining Empty Recipes&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can use a last-resort rule to override part of another makefile.&lt;br&gt;See &lt;a href=&quot;#Overriding-Makefiles&quot;&gt;Overriding Part of Another Makefile&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Suffix-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Implicit-Rule-Search&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Implicit Rule Search&lt;/a&gt;, Previous: &lt;a href=&quot;#Last-Resort&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Last Resort&lt;/a&gt;, Up: &lt;a href=&quot;#Implicit-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Implicit Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Old_002dFashioned-Suffix-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;10.7 Old-Fashioned Suffix Rules&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-old_002dfashioned-suffix-rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-suffix-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;Suffix rules&lt;/em&gt; are the old-fashioned way of defining implicit rules for&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.  Suffix rules are obsolete because pattern rules are more&lt;br&gt;general and clearer.  They are supported in GNU &lt;code&gt;make&lt;/code&gt; for&lt;br&gt;compatibility with old makefiles.  They come in two kinds:&lt;br&gt;&lt;em&gt;double-suffix&lt;/em&gt; and &lt;em&gt;single-suffix&lt;/em&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A double-suffix rule is defined by a pair of suffixes: the target suffix&lt;br&gt;and the source suffix.  It matches any file whose name ends with the&lt;br&gt;target suffix.  The corresponding implicit prerequisite is made by&lt;br&gt;replacing the target suffix with the source suffix in the file name.  A&lt;br&gt;two-suffix rule whose target and source suffixes are ‘&lt;samp&gt;.o&lt;/samp&gt;’ and&lt;br&gt;‘&lt;samp&gt;.c&lt;/samp&gt;’ is equivalent to the pattern rule ‘&lt;samp&gt;%.o : %.c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A single-suffix rule is defined by a single suffix, which is the source&lt;br&gt;suffix.  It matches any file name, and the corresponding implicit&lt;br&gt;prerequisite name is made by appending the source suffix.  A single-suffix&lt;br&gt;rule whose source suffix is ‘&lt;samp&gt;.c&lt;/samp&gt;’ is equivalent to the pattern rule&lt;br&gt;‘&lt;samp&gt;% : %.c&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Suffix rule definitions are recognized by comparing each rule’s target&lt;br&gt;against a defined list of known suffixes.  When &lt;code&gt;make&lt;/code&gt; sees a rule&lt;br&gt;whose target is a known suffix, this rule is considered a single-suffix&lt;br&gt;rule.  When &lt;code&gt;make&lt;/code&gt; sees a rule whose target is two known suffixes&lt;br&gt;concatenated, this rule is taken as a double-suffix rule.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, ‘&lt;samp&gt;.c&lt;/samp&gt;’ and ‘&lt;samp&gt;.o&lt;/samp&gt;’ are both on the default list of&lt;br&gt;known suffixes.  Therefore, if you define a rule whose target is&lt;br&gt;‘&lt;samp&gt;.c.o&lt;/samp&gt;’, &lt;code&gt;make&lt;/code&gt; takes it to be a double-suffix rule with source&lt;br&gt;suffix ‘&lt;samp&gt;.c&lt;/samp&gt;’ and target suffix ‘&lt;samp&gt;.o&lt;/samp&gt;’.  Here is the old-fashioned&lt;br&gt;way to define the rule for compiling a C source file:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.c.o:&lt;br&gt;        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&amp;lt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Suffix rules cannot have any prerequisites of their own.  If they have any,&lt;br&gt;they are treated as normal files with funny names, not as suffix rules.&lt;br&gt;Thus, the rule:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.c.o: foo.h&lt;br&gt;        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&amp;lt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;tells how to make the file &lt;samp&gt;.c.o&lt;/samp&gt; from the prerequisite file&lt;br&gt;&lt;samp&gt;foo.h&lt;/samp&gt;, and is not at all like the pattern rule:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;%.o: %.c foo.h&lt;br&gt;        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&amp;lt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;which tells how to make ‘&lt;samp&gt;.o&lt;/samp&gt;’ files from ‘&lt;samp&gt;.c&lt;/samp&gt;’ files, and makes all&lt;br&gt;‘&lt;samp&gt;.o&lt;/samp&gt;’ files using this pattern rule also depend on &lt;samp&gt;foo.h&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Suffix rules with no recipe are also meaningless.  They do not remove&lt;br&gt;previous rules as do pattern rules with no recipe (see &lt;a href=&quot;#Canceling-Rules&quot;&gt;Canceling Implicit Rules&lt;/a&gt;).  They simply enter the suffix or&lt;br&gt;pair of suffixes concatenated as a target in the data base.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eSUFFIXES-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The known suffixes are simply the names of the prerequisites of the special&lt;br&gt;target &lt;code&gt;.SUFFIXES&lt;/code&gt;.  You can add your own suffixes by writing a rule&lt;br&gt;for &lt;code&gt;.SUFFIXES&lt;/code&gt; that adds more prerequisites, as in:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.SUFFIXES: .hack .win&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;which adds ‘&lt;samp&gt;.hack&lt;/samp&gt;’ and ‘&lt;samp&gt;.win&lt;/samp&gt;’ to the end of the list of suffixes.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you wish to eliminate the default known suffixes instead of just adding&lt;br&gt;to them, write a rule for &lt;code&gt;.SUFFIXES&lt;/code&gt; with no prerequisites.  By&lt;br&gt;special dispensation, this eliminates all existing prerequisites of&lt;br&gt;&lt;code&gt;.SUFFIXES&lt;/code&gt;.  You can then write another rule to add the suffixes you&lt;br&gt;want.  For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.SUFFIXES:            # &lt;span class=&quot;roman&quot;&gt;Delete the default suffixes&lt;/span&gt;&lt;br&gt;.SUFFIXES: .c .o .h   # &lt;span class=&quot;roman&quot;&gt;Define our suffix list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The ‘&lt;samp&gt;-r&lt;/samp&gt;’ or ‘&lt;samp&gt;–no-builtin-rules&lt;/samp&gt;’ flag causes the default&lt;br&gt;list of suffixes to be empty.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-SUFFIXES&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The variable &lt;code&gt;SUFFIXES&lt;/code&gt; is defined to the default list of suffixes&lt;br&gt;before &lt;code&gt;make&lt;/code&gt; reads any makefiles.  You can change the list of suffixes&lt;br&gt;with a rule for the special target &lt;code&gt;.SUFFIXES&lt;/code&gt;, but that does not alter&lt;br&gt;this variable.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Implicit-Rule-Search&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Suffix-Rules&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Suffix Rules&lt;/a&gt;, Up: &lt;a href=&quot;#Implicit-Rules&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Implicit Rules&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Implicit-Rule-Search-Algorithm&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;10.8 Implicit Rule Search Algorithm&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-implicit-rule_002c-search-algorithm&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-search-algorithm_002c-implicit-rule&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is the procedure &lt;code&gt;make&lt;/code&gt; uses for searching for an implicit rule&lt;br&gt;for a target &lt;var&gt;t&lt;/var&gt;.  This procedure is followed for each double-colon&lt;br&gt;rule with no recipe, for each target of ordinary rules none of which have&lt;br&gt;a recipe, and for each prerequisite that is not the target of any rule.  It&lt;br&gt;is also followed recursively for prerequisites that come from implicit&lt;br&gt;rules, in the search for a chain of rules.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Suffix rules are not mentioned in this algorithm because suffix rules are&lt;br&gt;converted to equivalent pattern rules once the makefiles have been read in.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For an archive member target of the form&lt;br&gt;‘&lt;samp&gt;&lt;var&gt;archive&lt;/var&gt;(&lt;var&gt;member&lt;/var&gt;)&lt;/samp&gt;’, the following algorithm is run&lt;br&gt;twice, first using the entire target name &lt;var&gt;t&lt;/var&gt;, and second using&lt;br&gt;‘&lt;samp&gt;(&lt;var&gt;member&lt;/var&gt;)&lt;/samp&gt;’ as the target &lt;var&gt;t&lt;/var&gt; if the first run found no&lt;br&gt;rule.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ol&gt;&lt;br&gt;&lt;li&gt; Split &lt;var&gt;t&lt;/var&gt; into a directory part, called &lt;var&gt;d&lt;/var&gt;, and the rest,&lt;br&gt;called &lt;var&gt;n&lt;/var&gt;.  For example, if &lt;var&gt;t&lt;/var&gt; is ‘&lt;samp&gt;src/foo.o&lt;/samp&gt;’, then&lt;br&gt;&lt;var&gt;d&lt;/var&gt; is ‘&lt;samp&gt;src/&lt;/samp&gt;’ and &lt;var&gt;n&lt;/var&gt; is ‘&lt;samp&gt;foo.o&lt;/samp&gt;’.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Make a list of all the pattern rules one of whose targets matches&lt;br&gt;&lt;var&gt;t&lt;/var&gt; or &lt;var&gt;n&lt;/var&gt;.  If the target pattern contains a slash, it is&lt;br&gt;matched against &lt;var&gt;t&lt;/var&gt;; otherwise, against &lt;var&gt;n&lt;/var&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; If any rule in that list is &lt;em&gt;not&lt;/em&gt; a match-anything rule, then&lt;br&gt;remove all non-terminal match-anything rules from the list.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Remove from the list all rules with no recipe.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; For each pattern rule in the list:&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;br&gt;&lt;li&gt; Find the stem &lt;var&gt;s&lt;/var&gt;, which is the nonempty part of &lt;var&gt;t&lt;/var&gt; or &lt;var&gt;n&lt;/var&gt;&lt;br&gt;matched by the ‘&lt;samp&gt;%&lt;/samp&gt;’ in the target pattern.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Compute the prerequisite names by substituting &lt;var&gt;s&lt;/var&gt; for ‘&lt;samp&gt;%&lt;/samp&gt;’; if&lt;br&gt;the target pattern does not contain a slash, append &lt;var&gt;d&lt;/var&gt; to&lt;br&gt;the front of each prerequisite name.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Test whether all the prerequisites exist or ought to exist.  (If a&lt;br&gt;file name is mentioned in the makefile as a target or as an explicit&lt;br&gt;prerequisite, then we say it ought to exist.)&lt;br&gt;&lt;br&gt;&lt;p&gt;If all prerequisites exist or ought to exist, or there are no prerequisites,&lt;br&gt;then this rule applies.&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; If no pattern rule has been found so far, try harder.&lt;br&gt;For each pattern rule in the list:&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;br&gt;&lt;li&gt; If the rule is terminal, ignore it and go on to the next rule.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Compute the prerequisite names as before.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Test whether all the prerequisites exist or ought to exist.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; For each prerequisite that does not exist, follow this algorithm&lt;br&gt;recursively to see if the prerequisite can be made by an implicit&lt;br&gt;rule.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; If all prerequisites exist, ought to exist, or can be&lt;br&gt;made by implicit rules, then this rule applies.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; If no implicit rule applies, the rule for &lt;code&gt;.DEFAULT&lt;/code&gt;, if any,&lt;br&gt;applies.  In that case, give &lt;var&gt;t&lt;/var&gt; the same recipe that&lt;br&gt;&lt;code&gt;.DEFAULT&lt;/code&gt; has.  Otherwise, there is no recipe for &lt;var&gt;t&lt;/var&gt;.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Once a rule that applies has been found, for each target pattern of&lt;br&gt;the rule other than the one that matched &lt;var&gt;t&lt;/var&gt; or &lt;var&gt;n&lt;/var&gt;, the&lt;br&gt;‘&lt;samp&gt;%&lt;/samp&gt;’ in the pattern is replaced with &lt;var&gt;s&lt;/var&gt; and the resultant&lt;br&gt;file name is stored until the recipe to remake the target file &lt;var&gt;t&lt;/var&gt;&lt;br&gt;is executed.  After the recipe is executed, each of these stored file&lt;br&gt;names are entered into the data base and marked as having been updated&lt;br&gt;and having the same update status as the file &lt;var&gt;t&lt;/var&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When the recipe of a pattern rule is executed for &lt;var&gt;t&lt;/var&gt;, the&lt;br&gt;automatic variables are set corresponding to the target and&lt;br&gt;prerequisites.  See &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Archives&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Extending-make&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Extending make&lt;/a&gt;, Previous: &lt;a href=&quot;#Implicit-Rules&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Implicit Rules&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Using-make-to-Update-Archive-Files&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;11 Using &lt;code&gt;make&lt;/code&gt; to Update Archive Files&lt;/h2&gt;&lt;br&gt;&lt;a name=&quot;index-archive&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;Archive files&lt;/em&gt; are files containing named sub-files called&lt;br&gt;&lt;em&gt;members&lt;/em&gt;; they are maintained with the program &lt;code&gt;ar&lt;/code&gt; and their&lt;br&gt;main use is as subroutine libraries for linking.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Archive-Members&quot; accesskey=&quot;1&quot;&gt;Archive Members&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Archive members as targets.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Archive-Update&quot; accesskey=&quot;2&quot;&gt;Archive Update&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;The implicit rule for archive member targets.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Archive-Pitfalls&quot; accesskey=&quot;3&quot;&gt;Archive Pitfalls&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Dangers to watch out for when using archives.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Archive-Suffix-Rules&quot; accesskey=&quot;4&quot;&gt;Archive Suffix Rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;You can write a special kind of suffix rule&lt;br&gt;                                  for updating archives.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Archive-Members&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Archive-Update&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Archive Update&lt;/a&gt;, Previous: &lt;a href=&quot;#Archives&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Archives&lt;/a&gt;, Up: &lt;a href=&quot;#Archives&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Archives&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Archive-Members-as-Targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;11.1 Archive Members as Targets&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-archive-member-targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;An individual member of an archive file can be used as a target or&lt;br&gt;prerequisite in &lt;code&gt;make&lt;/code&gt;.  You specify the member named &lt;var&gt;member&lt;/var&gt; in&lt;br&gt;archive file &lt;var&gt;archive&lt;/var&gt; as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;&lt;var&gt;archive&lt;/var&gt;(&lt;var&gt;member&lt;/var&gt;)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This construct is available only in targets and prerequisites, not in&lt;br&gt;recipes!  Most programs that you might use in recipes do not support&lt;br&gt;this syntax and cannot act directly on archive members.  Only&lt;br&gt;&lt;code&gt;ar&lt;/code&gt; and other programs specifically designed to operate on&lt;br&gt;archives can do so.  Therefore, valid recipes to update an archive&lt;br&gt;member target probably must use &lt;code&gt;ar&lt;/code&gt;.  For example, this rule&lt;br&gt;says to create a member &lt;samp&gt;hack.o&lt;/samp&gt; in archive &lt;samp&gt;foolib&lt;/samp&gt; by&lt;br&gt;copying the file &lt;samp&gt;hack.o&lt;/samp&gt;:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foolib(hack.o) : hack.o&lt;br&gt;        ar cr foolib hack.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In fact, nearly all archive member targets are updated in just this way&lt;br&gt;and there is an implicit rule to do it for you.  &lt;strong&gt;Please note:&lt;/strong&gt; The&lt;br&gt;‘&lt;samp&gt;c&lt;/samp&gt;’ flag to &lt;code&gt;ar&lt;/code&gt; is required if the archive file does not&lt;br&gt;already exist.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To specify several members in the same archive, you can write all the&lt;br&gt;member names together between the parentheses.  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foolib(hack.o kludge.o)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;is equivalent to:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foolib(hack.o) foolib(kludge.o)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-wildcard_002c-in-archive-member&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;You can also use shell-style wildcards in an archive member reference.&lt;br&gt;See &lt;a href=&quot;#Wildcards&quot;&gt;Using Wildcard Characters in File Names&lt;/a&gt;.  For&lt;br&gt;example, ‘&lt;samp&gt;foolib(&lt;em&gt;.o)&lt;/em&gt;&lt;/samp&gt;’&lt;!-- /@w --&gt; expands to all existing members of the&lt;br&gt;&lt;samp&gt;foolib&lt;/samp&gt; archive whose names end in ‘&lt;samp&gt;.o&lt;/samp&gt;’; perhaps&lt;br&gt;‘&lt;samp&gt;foolib(hack.o)&lt;!-- /@w --&gt; foolib(kludge.o)&lt;!-- /@w --&gt;&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Archive-Update&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Archive-Pitfalls&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Archive Pitfalls&lt;/a&gt;, Previous: &lt;a href=&quot;#Archive-Members&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Archive Members&lt;/a&gt;, Up: &lt;a href=&quot;#Archives&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Archives&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Implicit-Rule-for-Archive-Member-Targets&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;11.2 Implicit Rule for Archive Member Targets&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Recall that a target that looks like &lt;samp&gt;&lt;var&gt;a&lt;/var&gt;(&lt;var&gt;m&lt;/var&gt;)&lt;/samp&gt; stands for the&lt;br&gt;member named &lt;var&gt;m&lt;/var&gt; in the archive file &lt;var&gt;a&lt;/var&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When &lt;code&gt;make&lt;/code&gt; looks for an implicit rule for such a target, as a special&lt;br&gt;feature it considers implicit rules that match &lt;samp&gt;(&lt;var&gt;m&lt;/var&gt;)&lt;/samp&gt;, as well as&lt;br&gt;those that match the actual target &lt;samp&gt;&lt;var&gt;a&lt;/var&gt;(&lt;var&gt;m&lt;/var&gt;)&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This causes one special rule whose target is &lt;samp&gt;(%)&lt;/samp&gt; to match.  This&lt;br&gt;rule updates the target &lt;samp&gt;&lt;var&gt;a&lt;/var&gt;(&lt;var&gt;m&lt;/var&gt;)&lt;/samp&gt; by copying the file &lt;var&gt;m&lt;/var&gt;&lt;br&gt;into the archive.  For example, it will update the archive member target&lt;br&gt;&lt;samp&gt;foo.a(bar.o)&lt;/samp&gt; by copying the &lt;em&gt;file&lt;/em&gt; &lt;samp&gt;bar.o&lt;/samp&gt; into the&lt;br&gt;archive &lt;samp&gt;foo.a&lt;/samp&gt; as a &lt;em&gt;member&lt;/em&gt; named &lt;samp&gt;bar.o&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When this rule is chained with others, the result is very powerful.&lt;br&gt;Thus, ‘&lt;samp&gt;make “foo.a(bar.o)”&lt;/samp&gt;’ (the quotes are needed to protect the&lt;br&gt;‘&lt;samp&gt;(&lt;/samp&gt;’ and ‘&lt;samp&gt;)&lt;/samp&gt;’ from being interpreted specially by the shell) in&lt;br&gt;the presence of a file &lt;samp&gt;bar.c&lt;/samp&gt; is enough to cause the following&lt;br&gt;recipe to be run, even without a makefile:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;cc -c bar.c -o bar.o&lt;br&gt;ar r foo.a bar.o&lt;br&gt;rm -f bar.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here &lt;code&gt;make&lt;/code&gt; has envisioned the file &lt;samp&gt;bar.o&lt;/samp&gt; as an intermediate&lt;br&gt;file.  See &lt;a href=&quot;#Chained-Rules&quot;&gt;Chains of Implicit Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Implicit rules such as this one are written using the automatic variable&lt;br&gt;‘&lt;samp&gt;$%&lt;/samp&gt;’.  See &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;An archive member name in an archive cannot contain a directory name, but&lt;br&gt;it may be useful in a makefile to pretend that it does.  If you write an&lt;br&gt;archive member target &lt;samp&gt;foo.a(dir/file.o)&lt;/samp&gt;, &lt;code&gt;make&lt;/code&gt; will perform&lt;br&gt;automatic updating with this recipe:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ar r foo.a dir/file.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;which has the effect of copying the file &lt;samp&gt;dir/file.o&lt;/samp&gt; into a member&lt;br&gt;named &lt;samp&gt;file.o&lt;/samp&gt;.  In connection with such usage, the automatic variables&lt;br&gt;&lt;code&gt;%D&lt;/code&gt; and &lt;code&gt;%F&lt;/code&gt; may be useful.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Archive-Symbols&quot; accesskey=&quot;1&quot;&gt;Archive Symbols&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How to update archive symbol directories.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Archive-Symbols&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Archive-Update&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Archive Update&lt;/a&gt;, Up: &lt;a href=&quot;#Archive-Update&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Archive Update&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Updating-Archive-Symbol-Directories&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;11.2.1 Updating Archive Symbol Directories&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-_005f_005f_002eSYMDEF&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-updating-archive-symbol-directories&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-archive-symbol-directory-updating&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-symbol-directories_002c-updating-archive&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-directories_002c-updating-archive-symbol&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;An archive file that is used as a library usually contains a special member&lt;br&gt;named &lt;samp&gt;&lt;strong&gt;.SYMDEF&lt;/strong&gt;&lt;/samp&gt; that contains a directory of the external symbol&lt;br&gt;names defined by all the other members.  After you update any other&lt;br&gt;members, you need to update &lt;samp&gt;.SYMDEF&lt;/samp&gt; so that it will summarize the&lt;br&gt;other members properly.  This is done by running the &lt;code&gt;ranlib&lt;/code&gt; program:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ranlib &lt;var&gt;archivefile&lt;/var&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Normally you would put this command in the rule for the archive file,&lt;br&gt;and make all the members of the archive file prerequisites of that rule.&lt;br&gt;For example,&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;libfoo.a: libfoo.a(x.o) libfoo.a(y.o) …&lt;br&gt;        ranlib libfoo.a&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The effect of this is to update archive members &lt;samp&gt;x.o&lt;/samp&gt;, &lt;samp&gt;y.o&lt;/samp&gt;,&lt;br&gt;etc., and then update the symbol directory member &lt;samp&gt;&lt;strong&gt;.SYMDEF&lt;/strong&gt;&lt;/samp&gt; by&lt;br&gt;running &lt;code&gt;ranlib&lt;/code&gt;.  The rules for updating the members are not shown&lt;br&gt;here; most likely you can omit them and use the implicit rule which copies&lt;br&gt;files into the archive, as described in the preceding section.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This is not necessary when using the GNU &lt;code&gt;ar&lt;/code&gt; program, which&lt;br&gt;updates the &lt;samp&gt;.SYMDEF&lt;/samp&gt; member automatically.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Archive-Pitfalls&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Archive-Suffix-Rules&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Archive Suffix Rules&lt;/a&gt;, Previous: &lt;a href=&quot;#Archive-Update&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Archive Update&lt;/a&gt;, Up: &lt;a href=&quot;#Archives&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Archives&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Dangers-When-Using-Archives&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;11.3 Dangers When Using Archives&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-archive_002c-and-parallel-execution&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-parallel-execution_002c-and-archive-update&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-archive_002c-and-_002dj&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002dj_002c-and-archive-update&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;It is important to be careful when using parallel execution (the&lt;br&gt;&lt;code&gt;-j&lt;/code&gt; switch; see &lt;a href=&quot;#Parallel&quot;&gt;Parallel Execution&lt;/a&gt;) and archives.&lt;br&gt;If multiple &lt;code&gt;ar&lt;/code&gt; commands run at the same time on the same archive&lt;br&gt;file, they will not know about each other and can corrupt the file.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Possibly a future version of &lt;code&gt;make&lt;/code&gt; will provide a mechanism to&lt;br&gt;circumvent this problem by serializing all recipes that operate on the&lt;br&gt;same archive file.  But for the time being, you must either write your&lt;br&gt;makefiles to avoid this problem in some other way, or not use &lt;code&gt;-j&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Archive-Suffix-Rules&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Archive-Pitfalls&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Archive Pitfalls&lt;/a&gt;, Up: &lt;a href=&quot;#Archives&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Archives&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Suffix-Rules-for-Archive-Files&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;11.4 Suffix Rules for Archive Files&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-suffix-rule_002c-for-archive&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-archive_002c-suffix-rule-for&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-library-archive_002c-suffix-rule-for&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-_002ea-_0028archives_0029&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;You can write a special kind of suffix rule for dealing with archive&lt;br&gt;files.  See &lt;a href=&quot;#Suffix-Rules&quot;&gt;Suffix Rules&lt;/a&gt;, for a full explanation of suffix rules.&lt;br&gt;Archive suffix rules are obsolete in GNU &lt;code&gt;make&lt;/code&gt;, because pattern&lt;br&gt;rules for archives are a more general mechanism (see &lt;a href=&quot;#Archive-Update&quot;&gt;Archive Update&lt;/a&gt;).  But they are retained for compatibility with other&lt;br&gt;&lt;code&gt;make&lt;/code&gt;s.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To write a suffix rule for archives, you simply write a suffix rule&lt;br&gt;using the target suffix ‘&lt;samp&gt;.a&lt;/samp&gt;’ (the usual suffix for archive files).&lt;br&gt;For example, here is the old-fashioned suffix rule to update a library&lt;br&gt;archive from C source files:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.c.a:&lt;br&gt;        $(CC) $(CFLAGS) $(CPPFLAGS) -c $&amp;lt; -o $.o&lt;br&gt;        $(AR) r $@ $&lt;em&gt;.o&lt;br&gt;        $(RM) $&lt;/em&gt;.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This works just as if you had written the pattern rule:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;(%.o): %.c&lt;br&gt;        $(CC) $(CFLAGS) $(CPPFLAGS) -c $&amp;lt; -o $&lt;em&gt;.o&lt;br&gt;        $(AR) r $@ $&lt;/em&gt;.o&lt;br&gt;        $(RM) $&lt;em&gt;.o&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In fact, this is just what &lt;code&gt;make&lt;/code&gt; does when it sees a suffix rule&lt;br&gt;with ‘&lt;samp&gt;.a&lt;/samp&gt;’ as the target suffix.  Any double-suffix rule&lt;br&gt;‘&lt;samp&gt;.&lt;var&gt;x&lt;/var&gt;.a&lt;/samp&gt;’&lt;!-- /@w --&gt; is converted to a pattern rule with the target&lt;br&gt;pattern ‘&lt;samp&gt;(%.o)&lt;/samp&gt;’ and a prerequisite pattern of ‘&lt;samp&gt;%.&lt;var&gt;x&lt;/var&gt;&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Since you might want to use ‘&lt;samp&gt;.a&lt;/samp&gt;’ as the suffix for some other kind&lt;br&gt;of file, &lt;code&gt;make&lt;/code&gt; also converts archive suffix rules to pattern rules&lt;br&gt;in the normal way (see &lt;a href=&quot;#Suffix-Rules&quot;&gt;Suffix Rules&lt;/a&gt;).  Thus a double-suffix rule&lt;br&gt;‘&lt;samp&gt;.&lt;var&gt;x&lt;/var&gt;.a&lt;/samp&gt;’&lt;!-- /@w --&gt; produces two pattern rules: ‘&lt;samp&gt;(%.o):&lt;!-- /@w --&gt;&lt;br&gt;%.&lt;var&gt;x&lt;/var&gt;&lt;!-- /@w --&gt;&lt;/samp&gt;’ and ‘&lt;samp&gt;%.a&lt;!-- /@w --&gt;: %.&lt;var&gt;x&lt;/var&gt;&lt;!-- /@w --&gt;&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Extending-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Integrating-make&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Integrating make&lt;/a&gt;, Previous: &lt;a href=&quot;#Archives&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Archives&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Extending-GNU-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;12 Extending GNU &lt;code&gt;make&lt;/code&gt;&lt;/h2&gt;&lt;br&gt;&lt;a name=&quot;index-make-extensions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;GNU &lt;code&gt;make&lt;/code&gt; provides many advanced capabilities, including many&lt;br&gt;useful functions.  However, it does not contain a complete programming&lt;br&gt;language and so it has limitations.  Sometimes these limitations can be&lt;br&gt;overcome through use of the &lt;code&gt;shell&lt;/code&gt; function to invoke a separate&lt;br&gt;program, although this can be inefficient.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In cases where the built-in capabilities of GNU &lt;code&gt;make&lt;/code&gt; are&lt;br&gt;insufficient to your requirements there are two options for extending&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.  On systems where it’s provided, you can utilize GNU&lt;br&gt;Guile as an embedded scripting language (see &lt;a href=&quot;#Guile-Integration&quot;&gt;GNU&lt;br&gt;Guile Integration&lt;/a&gt;).  On systems which support dynamically loadable&lt;br&gt;objects, you can write your own extension in any language (which can&lt;br&gt;be compiled into such an object) and load it to provide extended&lt;br&gt;capabilities (see &lt;a href=&quot;#load-Directive&quot;&gt;The &lt;code&gt;load&lt;/code&gt; Directive&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Guile-Integration&quot; accesskey=&quot;1&quot;&gt;Guile Integration&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using Guile as an embedded scripting language.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Loading-Objects&quot; accesskey=&quot;2&quot;&gt;Loading Objects&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Loading dynamic objects as extensions.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Guile-Integration&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Loading-Objects&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Loading Objects&lt;/a&gt;, Previous: &lt;a href=&quot;#Extending-make&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Extending make&lt;/a&gt;, Up: &lt;a href=&quot;#Extending-make&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Extending make&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;GNU-Guile-Integration&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;12.1 GNU Guile Integration&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-Guile-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-extensions_002c-Guile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;GNU &lt;code&gt;make&lt;/code&gt; may be built with support for GNU Guile as an embedded&lt;br&gt;extension language.  Guile implements the Scheme language.  A review&lt;br&gt;of GNU Guile and the Scheme language and its features is beyond the&lt;br&gt;scope of this manual: see the documentation for GNU Guile and Scheme.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can determine if &lt;code&gt;make&lt;/code&gt; contains support for Guile by&lt;br&gt;examining the &lt;code&gt;.FEATURES&lt;/code&gt; variable; it will contain the word&lt;br&gt;&lt;var&gt;guile&lt;/var&gt; if Guile support is available.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The Guile integration provides one new &lt;code&gt;make&lt;/code&gt; function: &lt;code&gt;guile&lt;/code&gt;.&lt;br&gt;The &lt;code&gt;guile&lt;/code&gt; function takes one argument which is first expanded&lt;br&gt;by &lt;code&gt;make&lt;/code&gt; in the normal fashion, then passed to the GNU Guile&lt;br&gt;evaluator.  The result of the evaluator is converted into a string and&lt;br&gt;used as the expansion of the &lt;code&gt;guile&lt;/code&gt; function in the makefile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In addition, GNU &lt;code&gt;make&lt;/code&gt; exposes Guile procedures for use in Guile&lt;br&gt;scripts.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Guile-Types&quot; accesskey=&quot;1&quot;&gt;Guile Types&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Converting Guile types to &lt;code&gt;make&lt;/code&gt; strings.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Guile-Interface&quot; accesskey=&quot;2&quot;&gt;Guile Interface&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Invoking &lt;code&gt;make&lt;/code&gt; functions from Guile.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Guile-Example&quot; accesskey=&quot;3&quot;&gt;Guile Example&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Example using Guile in &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Guile-Types&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Guile-Interface&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Guile Interface&lt;/a&gt;, Previous: &lt;a href=&quot;#Guile-Integration&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Guile Integration&lt;/a&gt;, Up: &lt;a href=&quot;#Guile-Integration&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Guile Integration&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Conversion-of-Guile-Types&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;12.1.1 Conversion of Guile Types&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-convert-guile-types&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-guile_002c-conversion-of-types&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-types_002c-conversion-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;There is only one “data type” in &lt;code&gt;make&lt;/code&gt;: a string.  GNU Guile,&lt;br&gt;on the other hand, provides a rich variety of different data types.&lt;br&gt;An important aspect of the interface between &lt;code&gt;make&lt;/code&gt; and GNU Guile&lt;br&gt;is the conversion of Guile data types into &lt;code&gt;make&lt;/code&gt; strings.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This conversion is relevant in two places: when a makefile invokes the&lt;br&gt;&lt;code&gt;guile&lt;/code&gt; function to evaluate a Guile expression, the result of&lt;br&gt;that evaluation must be converted into a make string so it can be&lt;br&gt;further evaluated by &lt;code&gt;make&lt;/code&gt;.  And secondly, when a Guile script&lt;br&gt;invokes one of the procedures exported by &lt;code&gt;make&lt;/code&gt; the argument&lt;br&gt;provided to the procedure must be converted into a string.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The conversion of Guile types into &lt;code&gt;make&lt;/code&gt; strings is as below:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;#f&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;False is converted into the empty string: in &lt;code&gt;make&lt;/code&gt; conditionals&lt;br&gt;the empty string is considered false.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;#t&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;True is converted to the string ‘&lt;samp&gt;#t&lt;/samp&gt;’: in &lt;code&gt;make&lt;/code&gt; conditionals&lt;br&gt;any non-empty string is considered true.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;symbol&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;number&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;A symbol or number is converted into the string representation of that&lt;br&gt;symbol or number.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;character&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;A printable character is converted to the same character.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;string&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;A string containing only printable characters is converted to the same&lt;br&gt;string.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;list&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;A list is converted recursively according to the above rules.  This&lt;br&gt;implies that any structured list will be flattened (that is, a result&lt;br&gt;of ‘&lt;samp&gt;‘(a b (c d) e)&lt;/samp&gt;’ will be converted to the &lt;code&gt;make&lt;/code&gt; string&lt;br&gt;‘&lt;samp&gt;a b c d e&lt;/samp&gt;’).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;other&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Any other Guile type results in an error.  In future versions of&lt;br&gt;&lt;code&gt;make&lt;/code&gt;, other Guile types may be converted.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The translation of ‘&lt;samp&gt;#f&lt;/samp&gt;’ (to the empty string) and ‘&lt;samp&gt;#t&lt;/samp&gt;’ (to&lt;br&gt;the non-empty string ‘&lt;samp&gt;#t&lt;/samp&gt;’) is designed to allow you to use Guile&lt;br&gt;boolean results directly as &lt;code&gt;make&lt;/code&gt; boolean conditions.  For&lt;br&gt;example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(if $(guile (access? “myfile” R_OK)),$(info myfile exists))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;As a consequence of these conversion rules you must consider the&lt;br&gt;result of your Guile script, as that result will be converted into a&lt;br&gt;string and parsed by &lt;code&gt;make&lt;/code&gt;.  If there is no natural result for&lt;br&gt;the script (that is, the script exists solely for its side-effects),&lt;br&gt;you should add ‘&lt;samp&gt;#f&lt;/samp&gt;’ as the final expression in order to avoid&lt;br&gt;syntax errors in your makefile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Guile-Interface&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Guile-Example&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Guile Example&lt;/a&gt;, Previous: &lt;a href=&quot;#Guile-Types&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Guile Types&lt;/a&gt;, Up: &lt;a href=&quot;#Guile-Integration&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Guile Integration&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Interfaces-from-Guile-to-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;12.1.2 Interfaces from Guile to &lt;code&gt;make&lt;/code&gt;&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-make-interface-to-guile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-make-procedures-in-guile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;In addition to the &lt;code&gt;guile&lt;/code&gt; function available in makefiles,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; exposes some procedures for use in your Guile scripts.  At&lt;br&gt;startup &lt;code&gt;make&lt;/code&gt; creates a new Guile module, &lt;code&gt;gnu make&lt;/code&gt;, and&lt;br&gt;exports these procedures as public interfaces from that module:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;gmk-expand&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-gmk_002dexpand&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;This procedure takes a single argument which is converted into a&lt;br&gt;string.  The string is expanded by &lt;code&gt;make&lt;/code&gt; using normal&lt;br&gt;&lt;code&gt;make&lt;/code&gt; expansion rules.  The result of the expansion is converted&lt;br&gt;into a Guile string and provided as the result of the procedure.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;gmk-eval&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-gmk_002deval&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;This procedure takes a single argument which is converted into a&lt;br&gt;string.  The string is evaluated by &lt;code&gt;make&lt;/code&gt; as if it were a&lt;br&gt;makefile.  This is the same capability available via the &lt;code&gt;eval&lt;/code&gt;&lt;br&gt;function (see &lt;a href=&quot;#Eval-Function&quot;&gt;Eval Function&lt;/a&gt;).  The result of the &lt;code&gt;gmk-eval&lt;/code&gt;&lt;br&gt;procedure is always the empty string.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Note that &lt;code&gt;gmk-eval&lt;/code&gt; is not quite the same as using&lt;br&gt;&lt;code&gt;gmk-expand&lt;/code&gt; with the &lt;code&gt;eval&lt;/code&gt; function: in the latter case&lt;br&gt;the evaluated string will be expanded &lt;em&gt;twice&lt;/em&gt;; first by&lt;br&gt;&lt;code&gt;gmk-expand&lt;/code&gt;, then again by the &lt;code&gt;eval&lt;/code&gt; function.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Guile-Example&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Guile-Interface&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Guile Interface&lt;/a&gt;, Up: &lt;a href=&quot;#Guile-Integration&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Guile Integration&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Example-Using-Guile-in-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;12.1.3 Example Using Guile in &lt;code&gt;make&lt;/code&gt;&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-Guile-example&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-example-using-Guile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is a very simple example using GNU Guile to manage writing to a&lt;br&gt;file.  These Guile procedures simply open a file, allow writing to the&lt;br&gt;file (one string per line), and close the file.  Note that because we&lt;br&gt;cannot store complex values such as Guile ports in &lt;code&gt;make&lt;/code&gt;&lt;br&gt;variables, we’ll keep the port as a global variable in the Guile&lt;br&gt;interpreter.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You can create Guile functions easily using &lt;code&gt;define&lt;/code&gt;/&lt;code&gt;endef&lt;/code&gt;&lt;br&gt;to create a Guile script, then use the &lt;code&gt;guile&lt;/code&gt; function to&lt;br&gt;internalize it:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;define GUILEIO&lt;br&gt;;; A simple Guile IO library for GNU make&lt;br&gt;&lt;br&gt;(define MKPORT #f)&lt;br&gt;&lt;br&gt;(define (mkopen name mode)&lt;br&gt;  (set! MKPORT (open-file name mode))&lt;br&gt;  #f)&lt;br&gt;&lt;br&gt;(define (mkwrite s)&lt;br&gt;  (display s MKPORT)&lt;br&gt;  (newline MKPORT)&lt;br&gt;  #f)&lt;br&gt;&lt;br&gt;(define (mkclose)&lt;br&gt;  (close-port MKPORT)&lt;br&gt;  #f)&lt;br&gt;&lt;br&gt;#f&lt;br&gt;endef&lt;br&gt;&lt;br&gt;# Internalize the Guile IO functions&lt;br&gt;$(guile $(GUILEIO))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you have a significant amount of Guile support code, you might&lt;br&gt;consider keeping it in a different file (e.g., &lt;samp&gt;guileio.scm&lt;/samp&gt;) and&lt;br&gt;then loading it in your makefile using the &lt;code&gt;guile&lt;/code&gt; function:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(guile (load “guileio.scm”))&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;An advantage to this method is that when editing &lt;samp&gt;guileio.scm&lt;/samp&gt;,&lt;br&gt;your editor will understand that this file contains Scheme syntax&lt;br&gt;rather than makefile syntax.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Now you can use these Guile functions to create files.  Suppose you&lt;br&gt;need to operate on a very large list, which cannot fit on the command&lt;br&gt;line, but the utility you’re using accepts the list as input as well:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;prog: $(PREREQS)&lt;br&gt;        @$(guile (mkopen “tmp.out” “w”)) \&lt;br&gt;         $(foreach X,$^,$(guile (mkwrite “$(X)”))) \&lt;br&gt;         $(guile (mkclose))&lt;br&gt;        $(LINK) &amp;lt; tmp.out&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A more comprehensive suite of file manipulation procedures is possible&lt;br&gt;of course.  You could, for example, maintain multiple output files at&lt;br&gt;the same time by choosing a symbol for each one and using it as the&lt;br&gt;key to a hash table, where the value is a port, then returning the&lt;br&gt;symbol to be stored in a &lt;code&gt;make&lt;/code&gt; variable.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Loading-Objects&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Guile-Integration&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Guile Integration&lt;/a&gt;, Up: &lt;a href=&quot;#Extending-make&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Extending make&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Loading-Dynamic-Objects&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;12.2 Loading Dynamic Objects&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-loaded-objects&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-objects_002c-loaded&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-extensions_002c-loading&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;table class=&quot;cartouche&quot; border=&quot;1&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;br&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; The &lt;code&gt;load&lt;/code&gt; directive and extension capability is considered a&lt;br&gt;“technology preview” in this release of GNU make.  We encourage you&lt;br&gt;to experiment with this feature and we appreciate any feedback on it.&lt;br&gt;However we cannot guarantee to maintain backward-compatibility in the&lt;br&gt;next release.  Consider using GNU Guile instead for extending GNU make&lt;br&gt;(see &lt;a href=&quot;#Guile-Function&quot;&gt;The &lt;code&gt;guile&lt;/code&gt; Function&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Many operating systems provide a facility for dynamically loading&lt;br&gt;compiled objects.  If your system provides this facility, GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt; can make use of it to load dynamic objects at runtime,&lt;br&gt;providing new capabilities which may then be invoked by your makefile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;load&lt;/code&gt; directive is used to load a dynamic object.  Once the&lt;br&gt;object is loaded, a “setup” function will be invoked to allow the&lt;br&gt;object to initialize itself and register new facilities with GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.  A dynamic object might include new &lt;code&gt;make&lt;/code&gt; functions,&lt;br&gt;for example, and the “setup” function would register them with GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt;’s function handling system.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#load-Directive&quot; accesskey=&quot;1&quot;&gt;load Directive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Loading dynamic objects as extensions.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Remaking-Loaded-Objects&quot; accesskey=&quot;2&quot;&gt;Remaking Loaded Objects&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;How loaded objects get remade.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Loaded-Object-API&quot; accesskey=&quot;3&quot;&gt;Loaded Object API&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Programmatic interface for loaded objects.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Loaded-Object-Example&quot; accesskey=&quot;4&quot;&gt;Loaded Object Example&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Example of a loaded object&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;load-Directive&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Remaking-Loaded-Objects&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Remaking Loaded Objects&lt;/a&gt;, Previous: &lt;a href=&quot;#Loading-Objects&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Loading Objects&lt;/a&gt;, Up: &lt;a href=&quot;#Loading-Objects&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Loading Objects&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;The-load-Directive&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;12.2.1 The &lt;code&gt;load&lt;/code&gt; Directive&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-load-directive&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-extensions_002c-load-directive&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Objects are loaded into GNU &lt;code&gt;make&lt;/code&gt; by placing the &lt;code&gt;load&lt;/code&gt;&lt;br&gt;directive into your makefile.  The syntax of the &lt;code&gt;load&lt;/code&gt; directive&lt;br&gt;is as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-load&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;load &lt;var&gt;object-file&lt;/var&gt; …&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;or:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;load &lt;var&gt;object-file&lt;/var&gt;(&lt;var&gt;symbol-name&lt;/var&gt;) …&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The file &lt;var&gt;object-file&lt;/var&gt; is dynamically loaded by GNU &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;If &lt;var&gt;object-file&lt;/var&gt; does not include a directory path then it is&lt;br&gt;first looked for in the current directory.  If it is not found there,&lt;br&gt;or a directory path is included, then system-specific paths will be&lt;br&gt;searched.  If the load fails for any reason, &lt;code&gt;make&lt;/code&gt; will print a&lt;br&gt;message and exit.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the load succeeds &lt;code&gt;make&lt;/code&gt; will invoke an initializing function.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If &lt;var&gt;symbol-name&lt;/var&gt; is provided, it will be used as the name of the&lt;br&gt;initializing function.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If no &lt;var&gt;symbol-name&lt;/var&gt; is provided, the initializing function name is&lt;br&gt;created by taking the base file name of &lt;var&gt;object-file&lt;/var&gt;, up to the&lt;br&gt;first character which is not a valid symbol name character&lt;br&gt;(alphanumerics and underscores are valid symbol name characters).  To&lt;br&gt;this prefix will be appended the suffix &lt;code&gt;_gmk_setup&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;More than one object file may be loaded with a single &lt;code&gt;load&lt;/code&gt;&lt;br&gt;directive, and both forms of &lt;code&gt;load&lt;/code&gt; arguments may be used in the&lt;br&gt;same directive.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The initializing function will be provided the file name and line&lt;br&gt;number of the invocation of the &lt;code&gt;load&lt;/code&gt; operation.  It should&lt;br&gt;return a value of type &lt;code&gt;int&lt;/code&gt;, which must be &lt;code&gt;0&lt;/code&gt; on failure&lt;br&gt;and non-&lt;code&gt;0&lt;/code&gt; on success.  If the return value is &lt;code&gt;-1&lt;/code&gt;, then&lt;br&gt;GNU make will &lt;em&gt;not&lt;/em&gt; attempt to rebuild the object file&lt;br&gt;(see &lt;a href=&quot;#Remaking-Loaded-Objects&quot;&gt;How Loaded Objects Are Remade&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;load ../mk_funcs.so&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will load the dynamic object &lt;samp&gt;../mk_funcs.so&lt;/samp&gt;.  After the object&lt;br&gt;is loaded, &lt;code&gt;make&lt;/code&gt; will invoke the function (assumed to be defined&lt;br&gt;by the shared object) &lt;code&gt;mk_funcs_gmk_setup&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;On the other hand:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;load ../mk_funcs.so(init_mk_func)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will load the dynamic object &lt;samp&gt;../mk_funcs.so&lt;/samp&gt;.  After the object&lt;br&gt;is loaded, &lt;code&gt;make&lt;/code&gt; will invoke the function &lt;code&gt;init_mk_func&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Regardless of how many times an object file appears in a &lt;code&gt;load&lt;/code&gt;&lt;br&gt;directive, it will only be loaded (and its setup function will only&lt;br&gt;be invoked) once.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002eLOADED&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;After an object has been successfully loaded, its file name is&lt;br&gt;appended to the &lt;code&gt;.LOADED&lt;/code&gt; variable.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-_002dload&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;If you would prefer that failure to load a dynamic object not be&lt;br&gt;reported as an error, you can use the &lt;code&gt;-load&lt;/code&gt; directive instead&lt;br&gt;of &lt;code&gt;load&lt;/code&gt;.  GNU &lt;code&gt;make&lt;/code&gt; will not fail and no message will be&lt;br&gt;generated if an object fails to load.  The failed object is not added&lt;br&gt;to the &lt;code&gt;.LOADED&lt;/code&gt; variable, which can then be consulted to&lt;br&gt;determine if the load was successful.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Remaking-Loaded-Objects&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Loaded-Object-API&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Loaded Object API&lt;/a&gt;, Previous: &lt;a href=&quot;#load-Directive&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;load Directive&lt;/a&gt;, Up: &lt;a href=&quot;#Loading-Objects&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Loading Objects&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;How-Loaded-Objects-Are-Remade&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;12.2.2 How Loaded Objects Are Remade&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-updating-loaded-objects&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-remaking-loaded-objects&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-loaded-objects_002c-remaking-of&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Loaded objects undergo the same re-make procedure as makefiles&lt;br&gt;(see &lt;a href=&quot;#Remaking-Makefiles&quot;&gt;How Makefiles Are Remade&lt;/a&gt;).  If any&lt;br&gt;loaded object is recreated, then &lt;code&gt;make&lt;/code&gt; will start from scratch&lt;br&gt;and re-read all the makefiles, and reload the object files again.  It&lt;br&gt;is not necessary for the loaded object to do anything special to&lt;br&gt;support this.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;It’s up to the makefile author to provide the rules needed for&lt;br&gt;rebuilding the loaded object.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Loaded-Object-API&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Loaded-Object-Example&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Loaded Object Example&lt;/a&gt;, Previous: &lt;a href=&quot;#Remaking-Loaded-Objects&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Remaking Loaded Objects&lt;/a&gt;, Up: &lt;a href=&quot;#Loading-Objects&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Loading Objects&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Loaded-Object-Interface&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;12.2.3 Loaded Object Interface&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-loaded-object-API&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-interface-for-loaded-objects&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;table class=&quot;cartouche&quot; border=&quot;1&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;br&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; For this feature to be useful your extensions will need to invoke&lt;br&gt;various functions internal to GNU &lt;code&gt;make&lt;/code&gt;.  The programming&lt;br&gt;interfaces provided in this release should not be considered stable:&lt;br&gt;functions may be added, removed, or change calling signatures or&lt;br&gt;implementations in future versions of GNU &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;To be useful, loaded objects must be able to interact with GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.  This interaction includes both interfaces the loaded&lt;br&gt;object provides to makefiles and also interfaces &lt;code&gt;make&lt;/code&gt; provides&lt;br&gt;to the loaded object to manipulate &lt;code&gt;make&lt;/code&gt;’s operation.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The interface between loaded objects and &lt;code&gt;make&lt;/code&gt; is defined by the&lt;br&gt;&lt;samp&gt;gnumake.h&lt;/samp&gt; C header file.  All loaded objects written in C&lt;br&gt;should include this header file.  Any loaded object not written in C&lt;br&gt;will need to implement the interface defined in this header file.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Typically, a loaded object will register one or more new GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt; functions using the &lt;code&gt;gmk_add_function&lt;/code&gt; routine from&lt;br&gt;within its setup function.  The implementations of these &lt;code&gt;make&lt;/code&gt;&lt;br&gt;functions may make use of the &lt;code&gt;gmk_expand&lt;/code&gt; and &lt;code&gt;gmk_eval&lt;/code&gt;&lt;br&gt;routines to perform their tasks, then optionally return a string as&lt;br&gt;the result of the function expansion.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;Loaded-Object-Licensing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsubheading&quot;&gt;Loaded Object Licensing&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-loaded-object-licensing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-plugin_005fis_005fGPL_005fcompatible&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Every dynamic extension should define the global symbol&lt;br&gt;&lt;code&gt;plugin_is_GPL_compatible&lt;/code&gt; to assert that it has been licensed&lt;br&gt;under a GPL-compatible license.  If this symbol does not exist,&lt;br&gt;&lt;code&gt;make&lt;/code&gt; emits a fatal error and exits when it tries to load your&lt;br&gt;extension.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The declared type of the symbol should be &lt;code&gt;int&lt;/code&gt;. It does not need&lt;br&gt;to be in any allocated section, though.  The code merely asserts that&lt;br&gt;the symbol exists in the global scope. Something like this is enough:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;int plugin_is_GPL_compatible;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;Data-Structures&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsubheading&quot;&gt;Data Structures&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;gmk_floc&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;This structure represents a filename/location pair.  It is provided&lt;br&gt;when defining items, so GNU &lt;code&gt;make&lt;/code&gt; can inform the user later&lt;br&gt;where the definition occurred if necessary.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;Registering-Functions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsubheading&quot;&gt;Registering Functions&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-gmk_005fadd_005ffunction&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;There is currently one way for makefiles to invoke operations provided&lt;br&gt;by the loaded object: through the &lt;code&gt;make&lt;/code&gt; function call&lt;br&gt;interface.  A loaded object can register one or more new functions&lt;br&gt;which may then be invoked from within the makefile in the same way as&lt;br&gt;any other function.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Use &lt;code&gt;gmk_add&lt;em&gt;function&lt;/em&gt;&lt;/code&gt; to create a new &lt;code&gt;make&lt;/code&gt; function.  Its&lt;br&gt;arguments are as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;name&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The function name.  This is what the makefile should use to invoke the&lt;br&gt;function.  The name must be between 1 and 255 characters long and it&lt;br&gt;may only contain alphanumeric, period (‘&lt;samp&gt;.&lt;/samp&gt;’), dash (‘&lt;samp&gt;-&lt;/samp&gt;’), and&lt;br&gt;underscore (‘&lt;samp&gt;&lt;/samp&gt;’) characters.  It may not begin with a period.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;func_ptr&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;A pointer to a function that &lt;code&gt;make&lt;/code&gt; will invoke when it expands&lt;br&gt;the function in a makefile.  This function must be defined by the&lt;br&gt;loaded object.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;min_args&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The minimum number of arguments the function will accept.  Must be&lt;br&gt;between 0 and 255.  GNU &lt;code&gt;make&lt;/code&gt; will check this and fail before&lt;br&gt;invoking &lt;code&gt;func_ptr&lt;/code&gt; if the function was invoked with too few&lt;br&gt;arguments.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;max_args&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The maximum number of arguments the function will accept.  Must be&lt;br&gt;between 0 and 255.  GNU &lt;code&gt;make&lt;/code&gt; will check this and fail before&lt;br&gt;invoking &lt;code&gt;func_ptr&lt;/code&gt; if the function was invoked with too few&lt;br&gt;arguments.  If the value is 0, then any number of arguments is&lt;br&gt;accepted.  If the value is greater than 0, then it must be greater&lt;br&gt;than or equal to &lt;code&gt;min_args&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Flags that specify how this function will operate; the desired flags&lt;br&gt;should be OR’d together.  If the &lt;code&gt;GMK_FUNC_NOEXPAND&lt;/code&gt; flag is&lt;br&gt;given then the function arguments will not be expanded before the&lt;br&gt;function is called; otherwise they will be expanded first.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;Registered-Function-Interface&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsubheading&quot;&gt;Registered Function Interface&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-gmk_005ffunc_005fptr&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;A function registered with &lt;code&gt;make&lt;/code&gt; must match the&lt;br&gt;&lt;code&gt;gmk_func_ptr&lt;/code&gt; type.  It will be invoked with three parameters:&lt;br&gt;&lt;code&gt;name&lt;/code&gt; (the name of the function), &lt;code&gt;argc&lt;/code&gt; (the number of&lt;br&gt;arguments to the function), and &lt;code&gt;argv&lt;/code&gt; (an array of pointers to&lt;br&gt;arguments to the function).  The last pointer (that is,&lt;br&gt;&lt;code&gt;argv[argc]&lt;/code&gt;) will be null (&lt;code&gt;0&lt;/code&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The return value of the function is the result of expanding the&lt;br&gt;function.  If the function expands to nothing the return value may be&lt;br&gt;null.  Otherwise, it must be a pointer to a string created with&lt;br&gt;&lt;code&gt;gmk_alloc&lt;/code&gt;.  Once the function returns, &lt;code&gt;make&lt;/code&gt; owns this&lt;br&gt;string and will free it when appropriate; it cannot be accessed by the&lt;br&gt;loaded object.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;GNU-make-Facilities&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsubheading&quot;&gt;GNU &lt;code&gt;make&lt;/code&gt; Facilities&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;There are some facilities exported by GNU &lt;code&gt;make&lt;/code&gt; for use by&lt;br&gt;loaded objects.  Typically these would be run from within the&lt;br&gt;setup function and/or the functions registered via&lt;br&gt;&lt;code&gt;gmk_add_function&lt;/code&gt;, to retrieve or modify the data &lt;code&gt;make&lt;/code&gt;&lt;br&gt;works with.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;gmk_expand&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-gmk_005fexpand&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;This function takes a string and expands it using &lt;code&gt;make&lt;/code&gt;&lt;br&gt;expansion rules.  The result of the expansion is returned in a&lt;br&gt;nil-terminated string buffer.  The caller is responsible for calling&lt;br&gt;&lt;code&gt;gmk_free&lt;/code&gt; with a pointer to the returned buffer when done.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;gmk_eval&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-gmk_005feval&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;This function takes a buffer and evaluates it as a segment of makefile&lt;br&gt;syntax.  This function can be used to define new variables, new rules,&lt;br&gt;etc.  It is equivalent to using the &lt;code&gt;eval&lt;/code&gt; &lt;code&gt;make&lt;/code&gt; function.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Note that there is a difference between &lt;code&gt;gmk_eval&lt;/code&gt; and calling&lt;br&gt;&lt;code&gt;gmk_expand&lt;/code&gt; with a string using the &lt;code&gt;eval&lt;/code&gt; function: in&lt;br&gt;the latter case the string will be expanded &lt;em&gt;twice&lt;/em&gt;; once by&lt;br&gt;&lt;code&gt;gmk_expand&lt;/code&gt; and then again by the &lt;code&gt;eval&lt;/code&gt; function.  Using&lt;br&gt;&lt;code&gt;gmk_eval&lt;/code&gt; the buffer is only expanded once, at most (as it’s&lt;br&gt;read by the &lt;code&gt;make&lt;/code&gt; parser).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;Memory-Management&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsubheading&quot;&gt;Memory Management&lt;/h4&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Some systems allow for different memory management schemes.  Thus you&lt;br&gt;should never pass memory that you’ve allocated directly to any&lt;br&gt;&lt;code&gt;make&lt;/code&gt; function, nor should you attempt to directly free any&lt;br&gt;memory returned to you by any &lt;code&gt;make&lt;/code&gt; function.  Instead, use the&lt;br&gt;&lt;code&gt;gmk_alloc&lt;/code&gt; and &lt;code&gt;gmk_free&lt;/code&gt; functions.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In particular, the string returned to &lt;code&gt;make&lt;/code&gt; by a function&lt;br&gt;registered using &lt;code&gt;gmk_add_function&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; be allocated&lt;br&gt;using &lt;code&gt;gmk_alloc&lt;/code&gt;, and the string returned from the &lt;code&gt;make&lt;/code&gt;&lt;br&gt;&lt;code&gt;gmk_expand&lt;/code&gt; function &lt;em&gt;must&lt;/em&gt; be freed (when no longer&lt;br&gt;needed) using &lt;code&gt;gmk_free&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;gmk_alloc&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-gmk_005falloc&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Return a pointer to a newly-allocated buffer.  This function will&lt;br&gt;always return a valid pointer; if not enough memory is available&lt;br&gt;&lt;code&gt;make&lt;/code&gt; will exit.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;gmk_free&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-gmk_005ffree&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Free a buffer returned to you by &lt;code&gt;make&lt;/code&gt;.  Once the&lt;br&gt;&lt;code&gt;gmk_free&lt;/code&gt; function returns the string will no longer be valid.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Loaded-Object-Example&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Loaded-Object-API&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Loaded Object API&lt;/a&gt;, Up: &lt;a href=&quot;#Loading-Objects&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Loading Objects&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Example-Loaded-Object&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;12.2.4 Example Loaded Object&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-loaded-object-example&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-example-of-loaded-objects&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Let’s suppose we wanted to write a new GNU &lt;code&gt;make&lt;/code&gt; function that&lt;br&gt;would create a temporary file and return its name.  We would like our&lt;br&gt;function to take a prefix as an argument.  First we can write the&lt;br&gt;function in a file &lt;samp&gt;mk_temp.c&lt;/samp&gt;:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;br&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;br&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br&gt;#include &amp;lt;string.h&amp;gt;&lt;br&gt;#include &amp;lt;unistd.h&amp;gt;&lt;br&gt;#include &amp;lt;errno.h&amp;gt;&lt;br&gt;&lt;br&gt;#include &amp;lt;gnumake.h&amp;gt;&lt;br&gt;&lt;br&gt;int plugin_is_GPL_compatible;&lt;br&gt;&lt;br&gt;char &lt;br&gt;gen_tmpfile(const char &lt;em&gt;nm, int argc, char **argv)&lt;br&gt;{&lt;br&gt;  int fd;&lt;br&gt;&lt;br&gt;  /&lt;/em&gt; Compute the size of the filename and allocate space for it.  &lt;em&gt;/&lt;br&gt;  int len = strlen (argv[0]) + 6 + 1;&lt;br&gt;  char &lt;/em&gt;buf = gmk_alloc (len);&lt;br&gt;&lt;br&gt;  strcpy (buf, argv[0]);&lt;br&gt;  strcat (buf, “XXXXXX”);&lt;br&gt;&lt;br&gt;  fd = mkstemp(buf);&lt;br&gt;  if (fd &amp;gt;= 0)&lt;br&gt;    {&lt;br&gt;      /&lt;em&gt; Don’t leak the file descriptor.  &lt;/em&gt;/&lt;br&gt;      close (fd);&lt;br&gt;      return buf;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;  /&lt;em&gt; Failure.  &lt;/em&gt;/&lt;br&gt;  fprintf (stderr, “mkstemp(%s) failed: %s\n”, buf, strerror (errno));&lt;br&gt;  gmk_free (buf);&lt;br&gt;  return NULL;&lt;br&gt;}&lt;br&gt;&lt;br&gt;int&lt;br&gt;mk_temp_gmk_setup ()&lt;br&gt;{&lt;br&gt;  /&lt;em&gt; Register the function with make name “mk-temp”.  &lt;/em&gt;/&lt;br&gt;  gmk_add_function (“mk-temp”, gen_tmpfile, 1, 1, 1);&lt;br&gt;  return 1;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Next, we will write a makefile that can build this shared object, load&lt;br&gt;it, and use it:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;all:&lt;br&gt;        @echo Temporary file: $(mk-temp tmpfile.)&lt;br&gt;&lt;br&gt;load mk_temp.so&lt;br&gt;&lt;br&gt;mk_temp.so: mk_temp.c&lt;br&gt;        $(CC) -shared -fPIC -o $&amp;nbsp;$&amp;lt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;On MS-Windows, due to peculiarities of how shared objects are&lt;br&gt;produced, the compiler needs to scan the &lt;em&gt;import library&lt;/em&gt; produced&lt;br&gt;when building &lt;code&gt;make&lt;/code&gt;, typically called&lt;br&gt;&lt;samp&gt;libgnumake-&lt;var&gt;version&lt;/var&gt;.dll.a&lt;/samp&gt;, where &lt;var&gt;version&lt;/var&gt; is the&lt;br&gt;version of the load object API.  So the recipe to produce a shared&lt;br&gt;object will look on Windows like this (assuming the API version is 1):&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;mk_temp.dll: mk_temp.c&lt;br&gt;        $(CC) -shared -o $&amp;nbsp;$&amp;lt; -lgnumake-1&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Now when you run &lt;code&gt;make&lt;/code&gt; you’ll see something like:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$ make&lt;br&gt;cc -shared -fPIC -o mk_temp.so mk_temp.c&lt;br&gt;Temporary filename: tmpfile.A7JEwd&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Integrating-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Features&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Features&lt;/a&gt;, Previous: &lt;a href=&quot;#Extending-make&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Extending make&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Integrating-GNU-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;13 Integrating GNU &lt;code&gt;make&lt;/code&gt;&lt;/h2&gt;&lt;br&gt;&lt;a name=&quot;index-make-integration&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;GNU &lt;code&gt;make&lt;/code&gt; is often one component in a larger system of tools,&lt;br&gt;including integrated development environments, compiler toolchains,&lt;br&gt;and others.  The role of &lt;code&gt;make&lt;/code&gt; is to start commands and&lt;br&gt;determine whether they succeeded or not: no special integration is&lt;br&gt;needed to accomplish that.  However, sometimes it is convenient to&lt;br&gt;bind &lt;code&gt;make&lt;/code&gt; more tightly with other parts of the system, both&lt;br&gt;higher-level (tools that invoke &lt;code&gt;make&lt;/code&gt;) and lower-level (tools&lt;br&gt;that &lt;code&gt;make&lt;/code&gt; invokes).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Job-Slots&quot; accesskey=&quot;1&quot;&gt;Job Slots&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Share job slots with GNU &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Terminal-Output&quot; accesskey=&quot;2&quot;&gt;Terminal Output&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Control output to terminals.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Job-Slots&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Terminal-Output&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Terminal Output&lt;/a&gt;, Previous: &lt;a href=&quot;#Integrating-make&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Integrating make&lt;/a&gt;, Up: &lt;a href=&quot;#Integrating-make&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Integrating make&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Sharing-Job-Slots-with-GNU-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;13.1 Sharing Job Slots with GNU &lt;code&gt;make&lt;/code&gt;&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-job-slots_002c-sharing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-tools_002c-sharing-job-slots&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;GNU &lt;code&gt;make&lt;/code&gt; has the ability to run multiple recipes in parallel&lt;br&gt;(see &lt;a href=&quot;#Parallel&quot;&gt;Parallel Execution&lt;/a&gt;) and to cap the total number of&lt;br&gt;parallel jobs even across recursive invocations of &lt;code&gt;make&lt;/code&gt;&lt;br&gt;(see &lt;a href=&quot;#Options_002fRecursion&quot;&gt;Communicating Options to a&lt;br&gt;Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;).  Tools that &lt;code&gt;make&lt;/code&gt; invokes which are also able&lt;br&gt;to run multiple operations in parallel, either using multiple threads&lt;br&gt;or multiple processes, can be enhanced to participate in GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt;’s job management facility to ensure that the total number&lt;br&gt;of active threads/processes running on the system does not exceed the&lt;br&gt;maximum number of slots provided to GNU &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-jobserver&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;GNU &lt;code&gt;make&lt;/code&gt; uses a method called the “jobserver” to control the&lt;br&gt;number of active jobs across recursive invocations.  The actual&lt;br&gt;implementation of the jobserver varies across different operating&lt;br&gt;systems, but some fundamental aspects are always true.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;First, only command lines that &lt;code&gt;make&lt;/code&gt; understands to be recursive&lt;br&gt;invocations of &lt;code&gt;make&lt;/code&gt; (see &lt;a href=&quot;#MAKE-Variable&quot;&gt;How the &lt;code&gt;MAKE&lt;/code&gt;&lt;br&gt;Variable Works&lt;/a&gt;) will have access to the jobserver.  When writing&lt;br&gt;makefiles you must be sure to mark the command as recursive (most&lt;br&gt;commonly by prefixing the command line with the &lt;code&gt;+&lt;/code&gt; indicator&lt;br&gt;(see &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Second, &lt;code&gt;make&lt;/code&gt; will provide information necessary for accessing&lt;br&gt;the jobserver through the environment to its children, in the&lt;br&gt;&lt;code&gt;MAKEFLAGS&lt;/code&gt; environment variable.  Tools which want to&lt;br&gt;participate in the jobserver protocol will need to parse this&lt;br&gt;environment variable, as described in subsequent sections.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Third, every command &lt;code&gt;make&lt;/code&gt; starts has one implicit job slot&lt;br&gt;reserved for it before it starts.  Any tool which wants to participate&lt;br&gt;in the jobserver protocol should assume it can always run one job&lt;br&gt;without having to contact the jobserver at all.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Finally, it’s critical that tools that participate in the jobserver&lt;br&gt;protocol return the exact number of slots they obtained from the&lt;br&gt;jobserver back to the jobserver before they exit, even under error&lt;br&gt;conditions.  Remember that the implicit job slot should &lt;strong&gt;not&lt;/strong&gt;&lt;br&gt;be returned to the jobserver!  Returning too few slots means that&lt;br&gt;those slots will be lost for the rest of the build process; returning&lt;br&gt;too many slots means that extra slots will be available.  The&lt;br&gt;top-level &lt;code&gt;make&lt;/code&gt; command will print an error message at the end&lt;br&gt;of the build if it detects an incorrect number of slots available in&lt;br&gt;the jobserver.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;As an example, suppose you are implementing a linker which provides&lt;br&gt;for multithreaded operation.  You would like to enhance the linker so&lt;br&gt;that if it is invoked by GNU &lt;code&gt;make&lt;/code&gt; it can participate in the&lt;br&gt;jobserver protocol to control how many threads are used during link.&lt;br&gt;First you will need to modify the linker to determine if the&lt;br&gt;&lt;code&gt;MAKEFLAGS&lt;/code&gt; environment variable is set.  Next you will need to&lt;br&gt;parse the value of that variable to determine if the jobserver is&lt;br&gt;available, and how to access it.  If it is available then you can&lt;br&gt;access it to obtain job slots controlling how much parallelism your&lt;br&gt;tool can use.  Once done your tool must return those job slots back to&lt;br&gt;the jobserver.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#POSIX-Jobserver&quot; accesskey=&quot;1&quot;&gt;POSIX Jobserver&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using the jobserver on POSIX systems.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Windows-Jobserver&quot; accesskey=&quot;2&quot;&gt;Windows Jobserver&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Using the jobserver on Windows systems.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;POSIX-Jobserver&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Windows-Jobserver&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Windows Jobserver&lt;/a&gt;, Previous: &lt;a href=&quot;#Job-Slots&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Job Slots&lt;/a&gt;, Up: &lt;a href=&quot;#Job-Slots&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Job Slots&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;POSIX-Jobserver-Interaction&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;13.1.1 POSIX Jobserver Interaction&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-jobserver-on-POSIX&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;On POSIX systems the jobserver is implemented as a simple UNIX pipe.&lt;br&gt;The pipe will be pre-loaded with one single-character token for each&lt;br&gt;available job.  To obtain an extra slot you must read a single&lt;br&gt;character from the jobserver pipe; to release a slot you must write a&lt;br&gt;single character back into the jobserver pipe.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To access the pipe you must parse the &lt;code&gt;MAKEFLAGS&lt;/code&gt; variable and&lt;br&gt;look for the argument string &lt;code&gt;–jobserver-auth=R,W&lt;/code&gt; where&lt;br&gt;‘&lt;samp&gt;R&lt;/samp&gt;’ and ‘&lt;samp&gt;W&lt;/samp&gt;’ are non-negative integers representing file&lt;br&gt;descriptors: ‘&lt;samp&gt;R&lt;/samp&gt;’ is the read file descriptor and ‘&lt;samp&gt;W&lt;/samp&gt;’ is the&lt;br&gt;write file descriptor.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;It’s important that when you release the job slot, you write back the&lt;br&gt;same character you read from the pipe for that slot.  Don’t assume&lt;br&gt;that all tokens are the same character; different characters may have&lt;br&gt;different meanings to GNU &lt;code&gt;make&lt;/code&gt;.  The order is not important,&lt;br&gt;since &lt;code&gt;make&lt;/code&gt; has no idea in what order jobs will complete anyway.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;There are various error conditions you must consider to ensure your&lt;br&gt;implementation is robust:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; Usually you will have a command-line argument controlling the parallel&lt;br&gt;operation of your tool.  Consider whether your tool should detect&lt;br&gt;situations where both the jobserver and the command-line argument are&lt;br&gt;specified, and how it should react.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; If your tool determines that the &lt;code&gt;–jobserver-auth&lt;/code&gt; option is&lt;br&gt;available in &lt;code&gt;MAKEFLAGS&lt;/code&gt; but that the file descriptors specified&lt;br&gt;are closed, this means that the calling &lt;code&gt;make&lt;/code&gt; process did not&lt;br&gt;think that your tool was a recursive &lt;code&gt;make&lt;/code&gt; invocation (e.g., the&lt;br&gt;command line was not prefixed with a &lt;code&gt;+&lt;/code&gt; character).  You should&lt;br&gt;notify your users of this situation.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Your tool should also examine the first word of the &lt;code&gt;MAKEFLAGS&lt;/code&gt;&lt;br&gt;variable and look for the character &lt;code&gt;n&lt;/code&gt;.  If this character is&lt;br&gt;present then &lt;code&gt;make&lt;/code&gt; was invoked with the ‘&lt;samp&gt;-n&lt;/samp&gt;’ option and&lt;br&gt;your tool should stop without performing any operations.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Your tool should be sure to write back the tokens it read, even under&lt;br&gt;error conditions.  This includes not only errors in your tool but also&lt;br&gt;outside influences such as interrupts (&lt;code&gt;SIGINT&lt;/code&gt;), etc.  You may&lt;br&gt;want to install signal handlers to manage this write-back.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Windows-Jobserver&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#POSIX-Jobserver&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;POSIX Jobserver&lt;/a&gt;, Up: &lt;a href=&quot;#Job-Slots&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Job Slots&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Windows-Jobserver-Interaction&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h4 class=&quot;subsection&quot;&gt;13.1.2 Windows Jobserver Interaction&lt;/h4&gt;&lt;br&gt;&lt;a name=&quot;index-jobserver-on-Windows&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;On Windows systems the jobserver is implemented as a named semaphore.&lt;br&gt;The semaphore will be set with an initial count equal to the number of&lt;br&gt;available slots; to obtain a slot you must wait on the semaphore (with&lt;br&gt;or without a timeout).  To release a slot, release the semaphore.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To access the semaphore you must parse the &lt;code&gt;MAKEFLAGS&lt;/code&gt; variable and&lt;br&gt;look for the argument string &lt;code&gt;–jobserver-auth=NAME&lt;/code&gt; where&lt;br&gt;‘&lt;samp&gt;NAME&lt;/samp&gt;’ is the name of the named semaphore.  Use this name with&lt;br&gt;&lt;code&gt;OpenSemaphore&lt;/code&gt; to create a handle to the semaphore.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;There are various error conditions you must consider to ensure your&lt;br&gt;implementation is robust:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; Usually you will have a command-line argument controlling the parallel&lt;br&gt;operation of your tool.  Consider whether your tool should detect&lt;br&gt;situations where both the jobserver and the command-line argument are&lt;br&gt;specified, and how it should react.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Your tool should be sure to release the semaphore for the tokens it&lt;br&gt;read, even under error conditions.  This includes not only errors in&lt;br&gt;your tool but also outside influences such as interrupts&lt;br&gt;(&lt;code&gt;SIGINT&lt;/code&gt;), etc.  You may want to install signal handlers to&lt;br&gt;manage this write-back.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Terminal-Output&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Job-Slots&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Job Slots&lt;/a&gt;, Up: &lt;a href=&quot;#Integrating-make&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Integrating make&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Synchronized-Terminal-Output&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;13.2 Synchronized Terminal Output&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-parallel-output-to-terminal&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-terminal_002c-output-to&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Normally GNU &lt;code&gt;make&lt;/code&gt; will invoke all commands with access to the&lt;br&gt;same standard and error outputs that &lt;code&gt;make&lt;/code&gt; itself was started&lt;br&gt;with.  A number of tools will detect whether the output is a terminal&lt;br&gt;or not-a-terminal, and use this information to change the output&lt;br&gt;style.  For example if the output goes to a terminal the tool may add&lt;br&gt;control characters that set color, or even change the location of the&lt;br&gt;cursor.  If the output is not going to a terminal then these special&lt;br&gt;control characters are not emitted so that they don’t corrupt log&lt;br&gt;files, etc.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;–output-sync&lt;/code&gt; (see &lt;a href=&quot;#Parallel-Output&quot;&gt;Output During&lt;br&gt;Parallel Output&lt;/a&gt;) option will defeat the terminal detection.  When&lt;br&gt;output synchronization is enabled GNU &lt;code&gt;make&lt;/code&gt; arranges for all&lt;br&gt;command output to be written to a file, so that its output can be&lt;br&gt;written as a block without interference from other commands.  This&lt;br&gt;means that all tools invoked by &lt;code&gt;make&lt;/code&gt; will believe that their&lt;br&gt;output is not going to be displayed on a terminal, even when it will&lt;br&gt;be (because &lt;code&gt;make&lt;/code&gt; will display it there after the command is&lt;br&gt;completed).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In order to facilitate tools which would like to determine whether or&lt;br&gt;not their output will be displayed on a terminal, GNU &lt;code&gt;make&lt;/code&gt; will&lt;br&gt;set the &lt;code&gt;MAKE_TERMOUT&lt;/code&gt; and &lt;code&gt;MAKE_TERMERR&lt;/code&gt; environment&lt;br&gt;variables before invoking any commands.  Tools which would like to&lt;br&gt;determine whether standard or error output (respectively) will be&lt;br&gt;displayed on a terminal can check these environment variables to&lt;br&gt;determine if they exist and contain a non-empty value.  If so the tool&lt;br&gt;can assume that the output will (eventually) be displayed on a&lt;br&gt;terminal.  If the variables are not set or have an empty value, then&lt;br&gt;the tool should fall back to its normal methods of detecting whether&lt;br&gt;output is going to a terminal or not.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The content of the variables can be parsed to determine the type of&lt;br&gt;terminal which will be used to display the output.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Similarly, environments which invoke &lt;code&gt;make&lt;/code&gt; and would like to&lt;br&gt;capture the output and eventually display it on a terminal (or some&lt;br&gt;display which can interpret terminal control characters) can set these&lt;br&gt;variables before invoking &lt;code&gt;make&lt;/code&gt;.  GNU &lt;code&gt;make&lt;/code&gt; will not&lt;br&gt;modify these environment variables if they already exist when it&lt;br&gt;starts.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Features&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Missing&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Missing&lt;/a&gt;, Previous: &lt;a href=&quot;#Integrating-make&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Integrating make&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Features-of-GNU-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;14 Features of GNU &lt;code&gt;make&lt;/code&gt;&lt;/h2&gt;&lt;br&gt;&lt;a name=&quot;index-features-of-GNU-make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-portability&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-compatibility&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is a summary of the features of GNU &lt;code&gt;make&lt;/code&gt;, for comparison&lt;br&gt;with and credit to other versions of &lt;code&gt;make&lt;/code&gt;.  We consider the&lt;br&gt;features of &lt;code&gt;make&lt;/code&gt; in 4.2 BSD systems as a baseline.  If you are&lt;br&gt;concerned with writing portable makefiles, you should not use the&lt;br&gt;features of &lt;code&gt;make&lt;/code&gt; listed here, nor the ones in &lt;a href=&quot;#Missing&quot;&gt;Missing&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Many features come from the version of &lt;code&gt;make&lt;/code&gt; in System V.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; The &lt;code&gt;VPATH&lt;/code&gt; variable and its special meaning.&lt;br&gt;See &lt;a href=&quot;#Directory-Search&quot;&gt;Searching Directories for Prerequisites&lt;/a&gt;.&lt;br&gt;This feature exists in System V &lt;code&gt;make&lt;/code&gt;, but is undocumented.&lt;br&gt;It is documented in 4.3 BSD &lt;code&gt;make&lt;/code&gt; (which says it mimics System V’s&lt;br&gt;&lt;code&gt;VPATH&lt;/code&gt; feature).&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Included makefiles.  See &lt;a href=&quot;#Include&quot;&gt;Including Other Makefiles&lt;/a&gt;.&lt;br&gt;Allowing multiple files to be included with a single directive is a GNU&lt;br&gt;extension.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Variables are read from and communicated via the environment.&lt;br&gt;See &lt;a href=&quot;#Environment&quot;&gt;Variables from the Environment&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Options passed through the variable &lt;code&gt;MAKEFLAGS&lt;/code&gt; to recursive&lt;br&gt;invocations of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;See &lt;a href=&quot;#Options_002fRecursion&quot;&gt;Communicating Options to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The automatic variable &lt;code&gt;$%&lt;/code&gt; is set to the member name&lt;br&gt;in an archive reference.  See &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The automatic variables &lt;code&gt;$@&lt;/code&gt;, &lt;code&gt;$&lt;em&gt;&lt;/em&gt;&lt;/code&gt;, &lt;code&gt;$&amp;lt;&lt;/code&gt;, &lt;code&gt;$%&lt;/code&gt;,&lt;br&gt;and &lt;code&gt;$?&lt;/code&gt; have corresponding forms like &lt;code&gt;$(@F)&lt;/code&gt; and&lt;br&gt;&lt;code&gt;$(@D)&lt;/code&gt;.  We have generalized this to &lt;code&gt;$^&lt;/code&gt; as an obvious&lt;br&gt;extension.  See &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Substitution variable references.&lt;br&gt;See &lt;a href=&quot;#Reference&quot;&gt;Basics of Variable References&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The command line options ‘&lt;samp&gt;-b&lt;/samp&gt;’ and ‘&lt;samp&gt;-m&lt;/samp&gt;’, accepted and&lt;br&gt;ignored.  In System V &lt;code&gt;make&lt;/code&gt;, these options actually do something.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Execution of recursive commands to run &lt;code&gt;make&lt;/code&gt; via the variable&lt;br&gt;&lt;code&gt;MAKE&lt;/code&gt; even if ‘&lt;samp&gt;-n&lt;/samp&gt;’, ‘&lt;samp&gt;-q&lt;/samp&gt;’ or ‘&lt;samp&gt;-t&lt;/samp&gt;’ is specified.&lt;br&gt;See &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Support for suffix ‘&lt;samp&gt;.a&lt;/samp&gt;’ in suffix rules.  See &lt;a href=&quot;#Archive-Suffix-Rules&quot;&gt;Archive Suffix Rules&lt;/a&gt;.  This feature is obsolete in GNU &lt;code&gt;make&lt;/code&gt;, because the&lt;br&gt;general feature of rule chaining (see &lt;a href=&quot;#Chained-Rules&quot;&gt;Chains of&lt;br&gt;Implicit Rules&lt;/a&gt;) allows one pattern rule for installing members in an&lt;br&gt;archive (see &lt;a href=&quot;#Archive-Update&quot;&gt;Archive Update&lt;/a&gt;) to be sufficient.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The arrangement of lines and backslash/newline combinations in&lt;br&gt;recipes is retained when the recipes are printed, so they appear as&lt;br&gt;they do in the makefile, except for the stripping of initial&lt;br&gt;whitespace.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The following features were inspired by various other versions of&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.  In some cases it is unclear exactly which versions inspired&lt;br&gt;which others.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; Pattern rules using ‘&lt;samp&gt;%&lt;/samp&gt;’.&lt;br&gt;This has been implemented in several versions of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;We’re not sure who invented it first, but it’s been spread around a bit.&lt;br&gt;See &lt;a href=&quot;#Pattern-Rules&quot;&gt;Defining and Redefining Pattern Rules&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Rule chaining and implicit intermediate files.&lt;br&gt;This was implemented by Stu Feldman in his version of &lt;code&gt;make&lt;/code&gt;&lt;br&gt;for AT&amp;amp;T Eighth Edition Research Unix, and later by Andrew Hume of&lt;br&gt;AT&amp;amp;T Bell Labs in his &lt;code&gt;mk&lt;/code&gt; program (where he terms it&lt;br&gt;“transitive closure”).  We do not really know if&lt;br&gt;we got this from either of them or thought it up ourselves at the&lt;br&gt;same time.  See &lt;a href=&quot;#Chained-Rules&quot;&gt;Chains of Implicit Rules&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The automatic variable &lt;code&gt;$^&lt;/code&gt; containing a list of all prerequisites&lt;br&gt;of the current target.  We did not invent this, but we have no idea who&lt;br&gt;did.  See &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;.  The automatic variable&lt;br&gt;&lt;code&gt;$+&lt;/code&gt; is a simple extension of &lt;code&gt;$^&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The “what if” flag (‘&lt;samp&gt;-W&lt;/samp&gt;’ in GNU &lt;code&gt;make&lt;/code&gt;) was (as far as we know)&lt;br&gt;invented by Andrew Hume in &lt;code&gt;mk&lt;/code&gt;.&lt;br&gt;See &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Executing Recipes&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The concept of doing several things at once (parallelism) exists in&lt;br&gt;many incarnations of &lt;code&gt;make&lt;/code&gt; and similar programs, though not in the&lt;br&gt;System V or BSD implementations.  See &lt;a href=&quot;#Execution&quot;&gt;Recipe Execution&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; A number of different build tools that support parallelism also&lt;br&gt;support collecting output and displaying as a single block.&lt;br&gt;See &lt;a href=&quot;#Parallel-Output&quot;&gt;Output During Parallel Execution&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Modified variable references using pattern substitution come from&lt;br&gt;SunOS 4.  See &lt;a href=&quot;#Reference&quot;&gt;Basics of Variable References&lt;/a&gt;.&lt;br&gt;This functionality was provided in GNU &lt;code&gt;make&lt;/code&gt; by the&lt;br&gt;&lt;code&gt;patsubst&lt;/code&gt; function before the alternate syntax was implemented&lt;br&gt;for compatibility with SunOS 4.  It is not altogether clear who&lt;br&gt;inspired whom, since GNU &lt;code&gt;make&lt;/code&gt; had &lt;code&gt;patsubst&lt;/code&gt; before SunOS&lt;br&gt;4 was released.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The special significance of ‘&lt;samp&gt;+&lt;/samp&gt;’ characters preceding recipe lines&lt;br&gt;(see &lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Executing Recipes&lt;/a&gt;) is&lt;br&gt;mandated by &lt;cite&gt;IEEE Standard 1003.2-1992&lt;/cite&gt; (POSIX.2).&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The ‘&lt;samp&gt;+=&lt;/samp&gt;’ syntax to append to the value of a variable comes from SunOS&lt;br&gt;4 &lt;code&gt;make&lt;/code&gt;.  See &lt;a href=&quot;#Appending&quot;&gt;Appending More Text to Variables&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The syntax ‘&lt;samp&gt;&lt;var&gt;archive&lt;/var&gt;(&lt;var&gt;mem1&lt;/var&gt;&amp;nbsp;&lt;var&gt;mem2&lt;/var&gt;…)&lt;/samp&gt;’&lt;!-- /@w --&gt; to list&lt;br&gt;multiple members in a single archive file comes from SunOS 4 &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;See &lt;a href=&quot;#Archive-Members&quot;&gt;Archive Members&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The &lt;code&gt;-include&lt;/code&gt; directive to include makefiles with no error for a&lt;br&gt;nonexistent file comes from SunOS 4 &lt;code&gt;make&lt;/code&gt;.  (But note that SunOS 4&lt;br&gt;&lt;code&gt;make&lt;/code&gt; does not allow multiple makefiles to be specified in one&lt;br&gt;&lt;code&gt;-include&lt;/code&gt; directive.)  The same feature appears with the name&lt;br&gt;&lt;code&gt;sinclude&lt;/code&gt; in SGI &lt;code&gt;make&lt;/code&gt; and perhaps others.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; The &lt;code&gt;!=&lt;/code&gt; shell assignment operator exists in many BSD of&lt;br&gt;&lt;code&gt;make&lt;/code&gt; and is purposefully implemented here to behave identically&lt;br&gt;to those implementations.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Various build management tools are implemented using scripting&lt;br&gt;languages such as Perl or Python and thus provide a natural embedded&lt;br&gt;scripting language, similar to GNU &lt;code&gt;make&lt;/code&gt;’s integration of GNU&lt;br&gt;Guile.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The remaining features are inventions new in GNU &lt;code&gt;make&lt;/code&gt;:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; Use the ‘&lt;samp&gt;-v&lt;/samp&gt;’ or ‘&lt;samp&gt;–version&lt;/samp&gt;’ option to print version and&lt;br&gt;copyright information.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Use the ‘&lt;samp&gt;-h&lt;/samp&gt;’ or ‘&lt;samp&gt;–help&lt;/samp&gt;’ option to summarize the options to&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Simply-expanded variables.  See &lt;a href=&quot;#Flavors&quot;&gt;The Two Flavors of Variables&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Pass command line variable assignments automatically through the&lt;br&gt;variable &lt;code&gt;MAKE&lt;/code&gt; to recursive &lt;code&gt;make&lt;/code&gt; invocations.&lt;br&gt;See &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Use the ‘&lt;samp&gt;-C&lt;/samp&gt;’ or ‘&lt;samp&gt;–directory&lt;/samp&gt;’ command option to change&lt;br&gt;directory.  See &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Make verbatim variable definitions with &lt;code&gt;define&lt;/code&gt;.&lt;br&gt;See &lt;a href=&quot;#Multi_002dLine&quot;&gt;Defining Multi-Line Variables&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Declare phony targets with the special target &lt;code&gt;.PHONY&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;p&gt;Andrew Hume of AT&amp;amp;T Bell Labs implemented a similar feature with a&lt;br&gt;different syntax in his &lt;code&gt;mk&lt;/code&gt; program.  This seems to be a case of&lt;br&gt;parallel discovery.  See &lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Manipulate text by calling functions.&lt;br&gt;See &lt;a href=&quot;#Functions&quot;&gt;Functions for Transforming Text&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Use the ‘&lt;samp&gt;-o&lt;/samp&gt;’ or ‘&lt;samp&gt;–old-file&lt;/samp&gt;’&lt;br&gt;option to pretend a file’s modification-time is old.&lt;br&gt;See &lt;a href=&quot;#Avoiding-Compilation&quot;&gt;Avoiding Recompilation of Some Files&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Conditional execution.&lt;br&gt;&lt;br&gt;&lt;p&gt;This feature has been implemented numerous times in various versions&lt;br&gt;of &lt;code&gt;make&lt;/code&gt;; it seems a natural extension derived from the features&lt;br&gt;of the C preprocessor and similar macro languages and is not a&lt;br&gt;revolutionary concept.  See &lt;a href=&quot;#Conditionals&quot;&gt;Conditional Parts of Makefiles&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Specify a search path for included makefiles.&lt;br&gt;See &lt;a href=&quot;#Include&quot;&gt;Including Other Makefiles&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Specify extra makefiles to read with an environment variable.&lt;br&gt;See &lt;a href=&quot;#MAKEFILES-Variable&quot;&gt;The Variable &lt;code&gt;MAKEFILES&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Strip leading sequences of ‘&lt;samp&gt;./&lt;/samp&gt;’ from file names, so that&lt;br&gt;&lt;samp&gt;./&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt; and &lt;samp&gt;&lt;var&gt;file&lt;/var&gt;&lt;/samp&gt; are considered to be the&lt;br&gt;same file.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Use a special search method for library prerequisites written in the&lt;br&gt;form ‘&lt;samp&gt;-l&lt;var&gt;name&lt;/var&gt;&lt;/samp&gt;’.&lt;br&gt;See &lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Directory Search for Link Libraries&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Allow suffixes for suffix rules&lt;br&gt;(see &lt;a href=&quot;#Suffix-Rules&quot;&gt;Old-Fashioned Suffix Rules&lt;/a&gt;) to contain any&lt;br&gt;characters.  In other versions of &lt;code&gt;make&lt;/code&gt;, they must begin with&lt;br&gt;‘&lt;samp&gt;.&lt;/samp&gt;’ and not contain any ‘&lt;samp&gt;/&lt;/samp&gt;’ characters.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Keep track of the current level of &lt;code&gt;make&lt;/code&gt; recursion using the&lt;br&gt;variable &lt;code&gt;MAKELEVEL&lt;/code&gt;.  See &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Provide any goals given on the command line in the variable&lt;br&gt;&lt;code&gt;MAKECMDGOALS&lt;/code&gt;.  See &lt;a href=&quot;#Goals&quot;&gt;Arguments to Specify the Goals&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Specify static pattern rules.  See &lt;a href=&quot;#Static-Pattern&quot;&gt;Static Pattern Rules&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Provide selective &lt;code&gt;vpath&lt;/code&gt; search.&lt;br&gt;See &lt;a href=&quot;#Directory-Search&quot;&gt;Searching Directories for Prerequisites&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Provide computed variable references.&lt;br&gt;See &lt;a href=&quot;#Reference&quot;&gt;Basics of Variable References&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Update makefiles.  See &lt;a href=&quot;#Remaking-Makefiles&quot;&gt;How Makefiles Are Remade&lt;/a&gt;.&lt;br&gt;System V &lt;code&gt;make&lt;/code&gt; has a very, very limited form of this&lt;br&gt;functionality in that it will check out SCCS files for makefiles.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Various new built-in implicit rules.&lt;br&gt;See &lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Built-In Rules&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Load dynamic objects which can modify the behavior of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;See &lt;a href=&quot;#Loading-Objects&quot;&gt;Loading Dynamic Objects&lt;/a&gt;.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Missing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Makefile-Conventions&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Makefile Conventions&lt;/a&gt;, Previous: &lt;a href=&quot;#Features&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Features&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Incompatibilities-and-Missing-Features&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;15 Incompatibilities and Missing Features&lt;/h2&gt;&lt;br&gt;&lt;a name=&quot;index-incompatibilities&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-missing-features&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-features_002c-missing&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;make&lt;/code&gt; programs in various other systems support a few features&lt;br&gt;that are not implemented in GNU &lt;code&gt;make&lt;/code&gt;.  The POSIX.2 standard&lt;br&gt;(&lt;cite&gt;IEEE Standard 1003.2-1992&lt;/cite&gt;) which specifies &lt;code&gt;make&lt;/code&gt; does not&lt;br&gt;require any of these features.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; A target of the form ‘&lt;samp&gt;&lt;var&gt;file&lt;/var&gt;((&lt;var&gt;entry&lt;/var&gt;))&lt;/samp&gt;’ stands for a member&lt;br&gt;of archive file &lt;var&gt;file&lt;/var&gt;.  The member is chosen, not by name, but by&lt;br&gt;being an object file which defines the linker symbol &lt;var&gt;entry&lt;/var&gt;.&lt;br&gt;&lt;br&gt;&lt;p&gt;This feature was not put into GNU &lt;code&gt;make&lt;/code&gt; because of the&lt;br&gt;non-modularity of putting knowledge into &lt;code&gt;make&lt;/code&gt; of the internal&lt;br&gt;format of archive file symbol tables.&lt;br&gt;See &lt;a href=&quot;#Archive-Symbols&quot;&gt;Updating Archive Symbol Directories&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Suffixes (used in suffix rules) that end with the character ‘&lt;samp&gt;~&lt;/samp&gt;’&lt;br&gt;have a special meaning to System V &lt;code&gt;make&lt;/code&gt;;&lt;br&gt;they refer to the SCCS file that corresponds&lt;br&gt;to the file one would get without the ‘&lt;samp&gt;~&lt;/samp&gt;’.  For example, the&lt;br&gt;suffix rule ‘&lt;samp&gt;.c~.o&lt;/samp&gt;’ would make the file &lt;samp&gt;&lt;var&gt;n&lt;/var&gt;.o&lt;/samp&gt; from&lt;br&gt;the SCCS file &lt;samp&gt;s.&lt;var&gt;n&lt;/var&gt;.c&lt;/samp&gt;.  For complete coverage, a whole&lt;br&gt;series of such suffix rules is required.&lt;br&gt;See &lt;a href=&quot;#Suffix-Rules&quot;&gt;Old-Fashioned Suffix Rules&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;p&gt;In GNU &lt;code&gt;make&lt;/code&gt;, this entire series of cases is handled by two&lt;br&gt;pattern rules for extraction from SCCS, in combination with the&lt;br&gt;general feature of rule chaining.&lt;br&gt;See &lt;a href=&quot;#Chained-Rules&quot;&gt;Chains of Implicit Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; In System V and 4.3 BSD &lt;code&gt;make&lt;/code&gt;, files found by &lt;code&gt;VPATH&lt;/code&gt;&lt;br&gt;search (see &lt;a href=&quot;#Directory-Search&quot;&gt;Searching Directories for&lt;br&gt;Prerequisites&lt;/a&gt;) have their names changed inside recipes.  We feel it&lt;br&gt;is much cleaner to always use automatic variables and thus make this&lt;br&gt;feature obsolete.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; In some Unix &lt;code&gt;make&lt;/code&gt;s, the automatic variable &lt;code&gt;$&lt;/code&gt; appearing in&lt;br&gt;the prerequisites of a rule has the amazingly strange “feature” of&lt;br&gt;expanding to the full name of the &lt;em&gt;target of that rule&lt;/em&gt;.  We cannot&lt;br&gt;imagine what went on in the minds of Unix &lt;code&gt;make&lt;/code&gt; developers to do&lt;br&gt;this; it is utterly inconsistent with the normal definition of &lt;code&gt;$*&lt;/code&gt;.&lt;br&gt;&lt;a name=&quot;index-_002a-_0028automatic-variable_0029_002c-unsupported-bizarre-usage&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; In some Unix &lt;code&gt;make&lt;/code&gt;s, implicit rule search (see &lt;a href=&quot;#Implicit-Rules&quot;&gt;Using Implicit Rules&lt;/a&gt;) is apparently done for &lt;em&gt;all&lt;/em&gt;&lt;br&gt;targets, not just those without recipes.  This means you can&lt;br&gt;do:&lt;br&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;foo.o:&lt;br&gt;        cc -c foo.c&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;and Unix &lt;code&gt;make&lt;/code&gt; will intuit that &lt;samp&gt;foo.o&lt;/samp&gt; depends on&lt;br&gt;&lt;samp&gt;foo.c&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;We feel that such usage is broken.  The prerequisite properties of&lt;br&gt;&lt;code&gt;make&lt;/code&gt; are well-defined (for GNU &lt;code&gt;make&lt;/code&gt;, at least),&lt;br&gt;and doing such a thing simply does not fit the model.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; GNU &lt;code&gt;make&lt;/code&gt; does not include any built-in implicit rules for&lt;br&gt;compiling or preprocessing EFL programs.  If we hear of anyone who is&lt;br&gt;using EFL, we will gladly add them.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; It appears that in SVR4 &lt;code&gt;make&lt;/code&gt;, a suffix rule can be specified&lt;br&gt;with no recipe, and it is treated as if it had an empty recipe&lt;br&gt;(see &lt;a href=&quot;#Empty-Recipes&quot;&gt;Empty Recipes&lt;/a&gt;).  For example:&lt;br&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.c.a:&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will override the built-in &lt;samp&gt;.c.a&lt;/samp&gt; suffix rule.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;We feel that it is cleaner for a rule without a recipe to always simply&lt;br&gt;add to the prerequisite list for the target.  The above example can be&lt;br&gt;easily rewritten to get the desired behavior in GNU &lt;code&gt;make&lt;/code&gt;:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.c.a: ;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Some versions of &lt;code&gt;make&lt;/code&gt; invoke the shell with the ‘&lt;samp&gt;-e&lt;/samp&gt;’ flag,&lt;br&gt;except under ‘&lt;samp&gt;-k&lt;/samp&gt;’ (see &lt;a href=&quot;#Testing&quot;&gt;Testing the Compilation of a&lt;br&gt;Program&lt;/a&gt;).  The ‘&lt;samp&gt;-e&lt;/samp&gt;’ flag tells the shell to exit as soon as any&lt;br&gt;program it runs returns a nonzero status.  We feel it is cleaner to&lt;br&gt;write each line of the recipe to stand on its own and not require this&lt;br&gt;special treatment.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Makefile-Conventions&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Quick-Reference&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Quick Reference&lt;/a&gt;, Previous: &lt;a href=&quot;#Missing&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Missing&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Makefile-Conventions-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;chapter&quot;&gt;16 Makefile Conventions&lt;/h2&gt;&lt;br&gt;&lt;a name=&quot;index-makefile_002c-conventions-for&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-conventions-for-makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-standards-for-makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This&lt;br&gt;describes conventions for writing the Makefiles for GNU programs.&lt;br&gt;Using Automake will help you write a Makefile that follows these&lt;br&gt;conventions.  For more information on portable Makefiles, see&lt;br&gt;&lt;small&gt;POSIX&lt;/small&gt; and &lt;a href=&quot;http://www.gnu.org/software/autoconf/manual/autoconf.html#Portable-Make&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Portable Make Programming&lt;/a&gt; in &lt;cite&gt;Autoconf&lt;/cite&gt;.&lt;br&gt;&lt;/p&gt;

&lt;table class=&quot;menu&quot; border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Makefile-Basics&quot; accesskey=&quot;1&quot;&gt;Makefile Basics&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;General conventions for Makefiles.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Utilities-in-Makefiles&quot; accesskey=&quot;2&quot;&gt;Utilities in Makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Utilities to be used in Makefiles.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Command-Variables&quot; accesskey=&quot;3&quot;&gt;Command Variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variables for specifying commands.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#DESTDIR&quot; accesskey=&quot;4&quot;&gt;DESTDIR&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Supporting staged installs.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Directory-Variables&quot; accesskey=&quot;5&quot;&gt;Directory Variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Variables for installation directories.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Standard-Targets&quot; accesskey=&quot;6&quot;&gt;Standard Targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Standard targets for users.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;• &lt;a href=&quot;#Install-Command-Categories&quot; accesskey=&quot;7&quot;&gt;Install Command Categories&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;Three categories of commands in the ‘&lt;samp&gt;install&lt;/samp&gt;’&lt;br&gt;                                  rule: normal, pre-install and post-install.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Makefile-Basics&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Utilities-in-Makefiles&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Utilities in Makefiles&lt;/a&gt;, Up: &lt;a href=&quot;#Makefile-Conventions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefile Conventions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;General-Conventions-for-Makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;16.1 General Conventions for Makefiles&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Every Makefile should contain this line:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;SHELL = /bin/sh&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to avoid trouble on systems where the &lt;code&gt;SHELL&lt;/code&gt; variable might be&lt;br&gt;inherited from the environment.  (This is never a problem with GNU&lt;br&gt;&lt;code&gt;make&lt;/code&gt;.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Different &lt;code&gt;make&lt;/code&gt; programs have incompatible suffix lists and&lt;br&gt;implicit rules, and this sometimes creates confusion or misbehavior.  So&lt;br&gt;it is a good idea to set the suffix list explicitly using only the&lt;br&gt;suffixes you need in the particular Makefile, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;.SUFFIXES:&lt;br&gt;.SUFFIXES: .c .o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The first line clears out the suffix list, the second introduces all&lt;br&gt;suffixes which may be subject to implicit rules in this Makefile.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Don’t assume that &lt;samp&gt;.&lt;/samp&gt; is in the path for command execution.  When&lt;br&gt;you need to run programs that are a part of your package during the&lt;br&gt;make, please make sure that it uses &lt;samp&gt;./&lt;/samp&gt; if the program is built as&lt;br&gt;part of the make or &lt;samp&gt;$(srcdir)/&lt;/samp&gt; if the file is an unchanging part&lt;br&gt;of the source code.  Without one of these prefixes, the current search&lt;br&gt;path is used.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The distinction between &lt;samp&gt;./&lt;/samp&gt; (the &lt;em&gt;build directory&lt;/em&gt;) and&lt;br&gt;&lt;samp&gt;$(srcdir)/&lt;/samp&gt; (the &lt;em&gt;source directory&lt;/em&gt;) is important because&lt;br&gt;users can build in a separate directory using the ‘&lt;samp&gt;–srcdir&lt;/samp&gt;’ option&lt;br&gt;to &lt;samp&gt;configure&lt;/samp&gt;.  A rule of the form:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;foo.1 : foo.man sedscript&lt;br&gt;        sed -f sedscript foo.man &amp;gt; foo.1&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;will fail when the build directory is not the source directory, because&lt;br&gt;&lt;samp&gt;foo.man&lt;/samp&gt; and &lt;samp&gt;sedscript&lt;/samp&gt; are in the source directory.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When using GNU &lt;code&gt;make&lt;/code&gt;, relying on ‘&lt;samp&gt;VPATH&lt;/samp&gt;’ to find the source&lt;br&gt;file will work in the case where there is a single dependency file,&lt;br&gt;since the &lt;code&gt;make&lt;/code&gt; automatic variable ‘&lt;samp&gt;$&amp;lt;&lt;/samp&gt;’ will represent the&lt;br&gt;source file wherever it is.  (Many versions of &lt;code&gt;make&lt;/code&gt; set ‘&lt;samp&gt;$&amp;lt;&lt;/samp&gt;’&lt;br&gt;only in implicit rules.)  A Makefile target like&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;foo.o : bar.c&lt;br&gt;        $(CC) -I. -I$(srcdir) $(CFLAGS) -c bar.c -o foo.o&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;should instead be written as&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;foo.o : bar.c&lt;br&gt;        $(CC) -I. -I$(srcdir) $(CFLAGS) -c $&amp;lt; -o $@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;in order to allow ‘&lt;samp&gt;VPATH&lt;/samp&gt;’ to work correctly.  When the target has&lt;br&gt;multiple dependencies, using an explicit ‘&lt;samp&gt;$(srcdir)&lt;/samp&gt;’ is the easiest&lt;br&gt;way to make the rule work well.  For example, the target above for&lt;br&gt;&lt;samp&gt;foo.1&lt;/samp&gt; is best written as:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;foo.1 : foo.man sedscript&lt;br&gt;        sed -f $(srcdir)/sedscript $(srcdir)/foo.man &amp;gt; $@&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;GNU distributions usually contain some files which are not source&lt;br&gt;files—for example, Info files, and the output from Autoconf, Automake,&lt;br&gt;Bison or Flex.  Since these files normally appear in the source&lt;br&gt;directory, they should always appear in the source directory, not in the&lt;br&gt;build directory.  So Makefile rules to update them should put the&lt;br&gt;updated files in the source directory.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;However, if a file does not appear in the distribution, then the&lt;br&gt;Makefile should not put it in the source directory, because building a&lt;br&gt;program in ordinary circumstances should not modify the source directory&lt;br&gt;in any way.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Try to make the build and installation targets, at least (and all their&lt;br&gt;subtargets) work correctly with a parallel &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Utilities-in-Makefiles&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Command-Variables&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Command Variables&lt;/a&gt;, Previous: &lt;a href=&quot;#Makefile-Basics&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Makefile Basics&lt;/a&gt;, Up: &lt;a href=&quot;#Makefile-Conventions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefile Conventions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Utilities-in-Makefiles-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;16.2 Utilities in Makefiles&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Write the Makefile commands (and any shell scripts, such as&lt;br&gt;&lt;code&gt;configure&lt;/code&gt;) to run under &lt;code&gt;sh&lt;/code&gt; (both the traditional Bourne&lt;br&gt;shell and the &lt;small&gt;POSIX&lt;/small&gt; shell), not &lt;code&gt;csh&lt;/code&gt;.  Don’t use any&lt;br&gt;special features of &lt;code&gt;ksh&lt;/code&gt; or &lt;code&gt;bash&lt;/code&gt;, or &lt;small&gt;POSIX&lt;/small&gt; features&lt;br&gt;not widely supported in traditional Bourne &lt;code&gt;sh&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;configure&lt;/code&gt; script and the Makefile rules for building and&lt;br&gt;installation should not use any utilities directly except these:&lt;br&gt;&lt;/p&gt;

&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;awk cat cmp cp diff echo egrep expr false grep install-info ln ls&lt;br&gt;mkdir mv printf pwd rm rmdir sed sleep sort tar test touch tr true&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Compression programs such as &lt;code&gt;gzip&lt;/code&gt; can be used in the&lt;br&gt;&lt;code&gt;dist&lt;/code&gt; rule.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Generally, stick to the widely-supported (usually&lt;br&gt;&lt;small&gt;POSIX&lt;/small&gt;-specified) options and features of these programs.  For&lt;br&gt;example, don’t use ‘&lt;samp&gt;mkdir -p&lt;/samp&gt;’, convenient as it may be, because a&lt;br&gt;few systems don’t support it at all and with others, it is not safe&lt;br&gt;for parallel execution.  For a list of known incompatibilities, see&lt;br&gt;&lt;a href=&quot;http://www.gnu.org/software/autoconf/manual/autoconf.html#Portable-Shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Portable Shell Programming&lt;/a&gt; in &lt;cite&gt;Autoconf&lt;/cite&gt;.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;It is a good idea to avoid creating symbolic links in makefiles, since a&lt;br&gt;few file systems don’t support them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The Makefile rules for building and installation can also use compilers&lt;br&gt;and related programs, but should do so via &lt;code&gt;make&lt;/code&gt; variables so that the&lt;br&gt;user can substitute alternatives.  Here are some of the programs we&lt;br&gt;mean:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;ar bison cc flex install ld ldconfig lex&lt;br&gt;make makeinfo ranlib texi2dvi yacc&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Use the following &lt;code&gt;make&lt;/code&gt; variables to run those programs:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(AR) $(BISON) $(CC) $(FLEX) $(INSTALL) $(LD) $(LDCONFIG) $(LEX)&lt;br&gt;$(MAKE) $(MAKEINFO) $(RANLIB) $(TEXI2DVI) $(YACC)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;When you use &lt;code&gt;ranlib&lt;/code&gt; or &lt;code&gt;ldconfig&lt;/code&gt;, you should make sure&lt;br&gt;nothing bad happens if the system does not have the program in question.&lt;br&gt;Arrange to ignore an error from that command, and print a message before&lt;br&gt;the command to tell the user that failure of this command does not mean&lt;br&gt;a problem.  (The Autoconf ‘&lt;samp&gt;AC_PROG_RANLIB&lt;/samp&gt;’ macro can help with&lt;br&gt;this.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you use symbolic links, you should implement a fallback for systems&lt;br&gt;that don’t have symbolic links.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Additional utilities that can be used via Make variables are:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;chgrp chmod chown mknod&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;It is ok to use other utilities in Makefile portions (or scripts)&lt;br&gt;intended only for particular systems where you know those utilities&lt;br&gt;exist.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Command-Variables&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#DESTDIR&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;DESTDIR&lt;/a&gt;, Previous: &lt;a href=&quot;#Utilities-in-Makefiles&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Utilities in Makefiles&lt;/a&gt;, Up: &lt;a href=&quot;#Makefile-Conventions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefile Conventions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Variables-for-Specifying-Commands&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;16.3 Variables for Specifying Commands&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Makefiles should provide variables for overriding certain commands, options,&lt;br&gt;and so on.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In particular, you should run most utility programs via variables.&lt;br&gt;Thus, if you use Bison, have a variable named &lt;code&gt;BISON&lt;/code&gt; whose default&lt;br&gt;value is set with ‘&lt;samp&gt;BISON = bison&lt;/samp&gt;’, and refer to it with&lt;br&gt;&lt;code&gt;$(BISON)&lt;/code&gt; whenever you need to use Bison.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;File management utilities such as &lt;code&gt;ln&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, &lt;code&gt;mv&lt;/code&gt;, and&lt;br&gt;so on, need not be referred to through variables in this way, since users&lt;br&gt;don’t need to replace them with other programs.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Each program-name variable should come with an options variable that is&lt;br&gt;used to supply options to the program.  Append ‘&lt;samp&gt;FLAGS&lt;/samp&gt;’ to the&lt;br&gt;program-name variable name to get the options variable name—for&lt;br&gt;example, &lt;code&gt;BISONFLAGS&lt;/code&gt;.  (The names &lt;code&gt;CFLAGS&lt;/code&gt; for the C&lt;br&gt;compiler, &lt;code&gt;YFLAGS&lt;/code&gt; for yacc, and &lt;code&gt;LFLAGS&lt;/code&gt; for lex, are&lt;br&gt;exceptions to this rule, but we keep them because they are standard.)&lt;br&gt;Use &lt;code&gt;CPPFLAGS&lt;/code&gt; in any compilation command that runs the&lt;br&gt;preprocessor, and use &lt;code&gt;LDFLAGS&lt;/code&gt; in any compilation command that&lt;br&gt;does linking as well as in any direct use of &lt;code&gt;ld&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If there are C compiler options that &lt;em&gt;must&lt;/em&gt; be used for proper&lt;br&gt;compilation of certain files, do not include them in &lt;code&gt;CFLAGS&lt;/code&gt;.&lt;br&gt;Users expect to be able to specify &lt;code&gt;CFLAGS&lt;/code&gt; freely themselves.&lt;br&gt;Instead, arrange to pass the necessary options to the C compiler&lt;br&gt;independently of &lt;code&gt;CFLAGS&lt;/code&gt;, by writing them explicitly in the&lt;br&gt;compilation commands or by defining an implicit rule, like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;CFLAGS = -g&lt;br&gt;ALL_CFLAGS = -I. $(CFLAGS)&lt;br&gt;.c.o:&lt;br&gt;        $(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $&amp;lt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Do include the ‘&lt;samp&gt;-g&lt;/samp&gt;’ option in &lt;code&gt;CFLAGS&lt;/code&gt;, because that is not&lt;br&gt;&lt;em&gt;required&lt;/em&gt; for proper compilation.  You can consider it a default&lt;br&gt;that is only recommended.  If the package is set up so that it is&lt;br&gt;compiled with GCC by default, then you might as well include ‘&lt;samp&gt;-O&lt;/samp&gt;’&lt;br&gt;in the default value of &lt;code&gt;CFLAGS&lt;/code&gt; as well.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Put &lt;code&gt;CFLAGS&lt;/code&gt; last in the compilation command, after other variables&lt;br&gt;containing compiler options, so the user can use &lt;code&gt;CFLAGS&lt;/code&gt; to&lt;br&gt;override the others.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;CFLAGS&lt;/code&gt; should be used in every invocation of the C compiler,&lt;br&gt;both those which do compilation and those which do linking.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Every Makefile should define the variable &lt;code&gt;INSTALL&lt;/code&gt;, which is the&lt;br&gt;basic command for installing a file into the system.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Every Makefile should also define the variables &lt;code&gt;INSTALL_PROGRAM&lt;/code&gt;&lt;br&gt;and &lt;code&gt;INSTALL_DATA&lt;/code&gt;.  (The default for &lt;code&gt;INSTALL_PROGRAM&lt;/code&gt; should&lt;br&gt;be &lt;code&gt;$(INSTALL)&lt;/code&gt;; the default for &lt;code&gt;INSTALL_DATA&lt;/code&gt; should be&lt;br&gt;&lt;code&gt;${INSTALL} -m 644&lt;/code&gt;.)  Then it should use those variables as the&lt;br&gt;commands for actual installation, for executables and non-executables&lt;br&gt;respectively.  Minimal use of these variables is as follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(INSTALL_PROGRAM) foo $(bindir)/foo&lt;br&gt;$(INSTALL_DATA) libfoo.a $(libdir)/libfoo.a&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;However, it is preferable to support a &lt;code&gt;DESTDIR&lt;/code&gt; prefix on the&lt;br&gt;target files, as explained in the next section.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;It is acceptable, but not required, to install multiple files in one&lt;br&gt;command, with the final argument being a directory, as in:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(INSTALL_PROGRAM) foo bar baz $(bindir)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;DESTDIR&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Directory-Variables&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Directory Variables&lt;/a&gt;, Previous: &lt;a href=&quot;#Command-Variables&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Command Variables&lt;/a&gt;, Up: &lt;a href=&quot;#Makefile-Conventions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefile Conventions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;DESTDIR_003a-Support-for-Staged-Installs&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;16.4 &lt;code&gt;DESTDIR&lt;/code&gt;: Support for Staged Installs&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-DESTDIR&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-staged-installs&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-installations_002c-staged&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;DESTDIR&lt;/code&gt; is a variable prepended to each installed target file,&lt;br&gt;like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;$(INSTALL_PROGRAM) foo $(DESTDIR)$(bindir)/foo&lt;br&gt;$(INSTALL_DATA) libfoo.a $(DESTDIR)$(libdir)/libfoo.a&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;DESTDIR&lt;/code&gt; variable is specified by the user on the &lt;code&gt;make&lt;/code&gt;&lt;br&gt;command line as an absolute file name.  For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;make DESTDIR=/tmp/stage install&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;DESTDIR&lt;/code&gt; should be supported only in the &lt;code&gt;install&lt;em&gt;&lt;/em&gt;&lt;/code&gt; and&lt;br&gt;&lt;code&gt;uninstall&lt;/code&gt; targets, as those are the only targets where it is&lt;br&gt;useful.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If your installation step would normally install&lt;br&gt;&lt;samp&gt;/usr/local/bin/foo&lt;/samp&gt; and &lt;samp&gt;/usr/local/lib/libfoo.a&lt;/samp&gt;, then an&lt;br&gt;installation invoked as in the example above would install&lt;br&gt;&lt;samp&gt;/tmp/stage/usr/local/bin/foo&lt;/samp&gt; and&lt;br&gt;&lt;samp&gt;/tmp/stage/usr/local/lib/libfoo.a&lt;/samp&gt; instead.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Prepending the variable &lt;code&gt;DESTDIR&lt;/code&gt; to each target in this way&lt;br&gt;provides for &lt;em&gt;staged installs&lt;/em&gt;, where the installed files are not&lt;br&gt;placed directly into their expected location but are instead copied&lt;br&gt;into a temporary location (&lt;code&gt;DESTDIR&lt;/code&gt;).  However, installed files&lt;br&gt;maintain their relative directory structure and any embedded file names&lt;br&gt;will not be modified.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You should not set the value of &lt;code&gt;DESTDIR&lt;/code&gt; in your &lt;samp&gt;Makefile&lt;/samp&gt;&lt;br&gt;at all; then the files are installed into their expected locations by&lt;br&gt;default.  Also, specifying &lt;code&gt;DESTDIR&lt;/code&gt; should not change the&lt;br&gt;operation of the software in any way, so its value should not be&lt;br&gt;included in any file contents.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;DESTDIR&lt;/code&gt; support is commonly used in package creation.  It is&lt;br&gt;also helpful to users who want to understand what a given package will&lt;br&gt;install where, and to allow users who don’t normally have permissions&lt;br&gt;to install into protected areas to build and install before gaining&lt;br&gt;those permissions.  Finally, it can be useful with tools such as&lt;br&gt;&lt;code&gt;stow&lt;/code&gt;, where code is installed in one place but made to appear&lt;br&gt;to be installed somewhere else using symbolic links or special mount&lt;br&gt;operations.  So, we strongly recommend GNU packages support&lt;br&gt;&lt;code&gt;DESTDIR&lt;/code&gt;, though it is not an absolute requirement.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Directory-Variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Standard-Targets&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Standard Targets&lt;/a&gt;, Previous: &lt;a href=&quot;#DESTDIR&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;DESTDIR&lt;/a&gt;, Up: &lt;a href=&quot;#Makefile-Conventions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefile Conventions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Variables-for-Installation-Directories&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;16.5 Variables for Installation Directories&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Installation directories should always be named by variables, so it is&lt;br&gt;easy to install in a nonstandard place.  The standard names for these&lt;br&gt;variables and the values they should have in GNU packages are&lt;br&gt;described below.  They are based on a standard file system layout;&lt;br&gt;variants of it are used in GNU/Linux and other modern operating&lt;br&gt;systems.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Installers are expected to override these values when calling&lt;br&gt;&lt;code&gt;make&lt;/code&gt; (e.g., &lt;kbd&gt;make prefix=/usr install&lt;/kbd&gt;) or&lt;br&gt;&lt;code&gt;configure&lt;/code&gt; (e.g., &lt;kbd&gt;configure –prefix=/usr&lt;/kbd&gt;).  GNU&lt;br&gt;packages should not try to guess which value should be appropriate for&lt;br&gt;these variables on the system they are being installed onto: use the&lt;br&gt;default settings specified here so that all GNU packages behave&lt;br&gt;identically, allowing the installer to achieve any desired layout.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;a name=&quot;index-directories_002c-creating-installation&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-installation-directories_002c-creating&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;All installation directories, and their parent directories, should be&lt;br&gt;created (if necessary) before they are installed into.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;These first two variables set the root for the installation.  All the&lt;br&gt;other installation directories should be subdirectories of one of&lt;br&gt;these two, and nothing should be directly installed into these two&lt;br&gt;directories.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-prefix&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;A prefix used in constructing the default values of the variables listed&lt;br&gt;below.  The default value of &lt;code&gt;prefix&lt;/code&gt; should be &lt;samp&gt;/usr/local&lt;/samp&gt;.&lt;br&gt;When building the complete GNU system, the prefix will be empty and&lt;br&gt;&lt;samp&gt;/usr&lt;/samp&gt; will be a symbolic link to &lt;samp&gt;/&lt;/samp&gt;.&lt;br&gt;(If you are using Autoconf, write it as ‘&lt;samp&gt;@prefix@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Running ‘&lt;samp&gt;make install&lt;/samp&gt;’ with a different value of &lt;code&gt;prefix&lt;/code&gt; from&lt;br&gt;the one used to build the program should &lt;em&gt;not&lt;/em&gt; recompile the&lt;br&gt;program.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;exec_prefix&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-exec_005fprefix&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;A prefix used in constructing the default values of some of the&lt;br&gt;variables listed below.  The default value of &lt;code&gt;exec_prefix&lt;/code&gt; should&lt;br&gt;be &lt;code&gt;$(prefix)&lt;/code&gt;.&lt;br&gt;(If you are using Autoconf, write it as ‘&lt;samp&gt;@exec_prefix@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Generally, &lt;code&gt;$(exec_prefix)&lt;/code&gt; is used for directories that contain&lt;br&gt;machine-specific files (such as executables and subroutine libraries),&lt;br&gt;while &lt;code&gt;$(prefix)&lt;/code&gt; is used directly for other directories.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Running ‘&lt;samp&gt;make install&lt;/samp&gt;’ with a different value of &lt;code&gt;exec_prefix&lt;/code&gt;&lt;br&gt;from the one used to build the program should &lt;em&gt;not&lt;/em&gt; recompile the&lt;br&gt;program.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Executable programs are installed in one of the following directories.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;bindir&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-bindir&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The directory for installing executable programs that users can run.&lt;br&gt;This should normally be &lt;samp&gt;/usr/local/bin&lt;/samp&gt;, but write it as&lt;br&gt;&lt;samp&gt;$(exec_prefix)/bin&lt;/samp&gt;.&lt;br&gt;(If you are using Autoconf, write it as ‘&lt;samp&gt;@bindir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;sbindir&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-sbindir&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The directory for installing executable programs that can be run from&lt;br&gt;the shell, but are only generally useful to system administrators.  This&lt;br&gt;should normally be &lt;samp&gt;/usr/local/sbin&lt;/samp&gt;, but write it as&lt;br&gt;&lt;samp&gt;$(exec_prefix)/sbin&lt;/samp&gt;.&lt;br&gt;(If you are using Autoconf, write it as ‘&lt;samp&gt;@sbindir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;libexecdir&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;a name=&quot;index-libexecdir&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The directory for installing executable programs to be run by other&lt;br&gt;programs rather than by users.  This directory should normally be&lt;br&gt;&lt;samp&gt;/usr/local/libexec&lt;/samp&gt;, but write it as &lt;samp&gt;$(exec_prefix)/libexec&lt;/samp&gt;.&lt;br&gt;(If you are using Autoconf, write it as ‘&lt;samp&gt;@libexecdir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The definition of ‘&lt;samp&gt;libexecdir&lt;/samp&gt;’ is the same for all packages, so&lt;br&gt;you should install your data in a subdirectory thereof.  Most packages&lt;br&gt;install their data under &lt;samp&gt;$(libexecdir)/&lt;var&gt;package-name&lt;/var&gt;/&lt;/samp&gt;,&lt;br&gt;possibly within additional subdirectories thereof, such as&lt;br&gt;&lt;samp&gt;$(libexecdir)/&lt;var&gt;package-name&lt;/var&gt;/&lt;var&gt;machine&lt;/var&gt;/&lt;var&gt;version&lt;/var&gt;&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Data files used by the program during its execution are divided into&lt;br&gt;categories in two ways.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt; Some files are normally modified by programs; others are never normally&lt;br&gt;modified (though users may edit some of these).&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Some files are architecture-independent and can be shared by all&lt;br&gt;machines at a site; some are architecture-dependent and can be shared&lt;br&gt;only by machines of the same kind and operating system; others may never&lt;br&gt;be shared between two machines.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This makes for six different possibilities.  However, we want to&lt;br&gt;discourage the use of architecture-dependent files, aside from object&lt;br&gt;files and libraries.  It is much cleaner to make other data files&lt;br&gt;architecture-independent, and it is generally not hard.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here are the variables Makefiles should use to specify directories&lt;br&gt;to put these various kinds of files in:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;datarootdir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The root of the directory tree for read-only architecture-independent&lt;br&gt;data files.  This should normally be &lt;samp&gt;/usr/local/share&lt;/samp&gt;, but&lt;br&gt;write it as &lt;samp&gt;$(prefix)/share&lt;/samp&gt;.  (If you are using Autoconf, write&lt;br&gt;it as ‘&lt;samp&gt;@datarootdir@&lt;/samp&gt;’.)  ‘&lt;samp&gt;datadir&lt;/samp&gt;’’s default value is&lt;br&gt;based on this variable; so are ‘&lt;samp&gt;infodir&lt;/samp&gt;’, ‘&lt;samp&gt;mandir&lt;/samp&gt;’, and&lt;br&gt;others.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;datadir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing idiosyncratic read-only&lt;br&gt;architecture-independent data files for this program.  This is usually&lt;br&gt;the same place as ‘&lt;samp&gt;datarootdir&lt;/samp&gt;’, but we use the two separate&lt;br&gt;variables so that you can move these program-specific files without&lt;br&gt;altering the location for Info files, man pages, etc.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This should normally be &lt;samp&gt;/usr/local/share&lt;/samp&gt;, but write it as&lt;br&gt;&lt;samp&gt;$(datarootdir)&lt;/samp&gt;.  (If you are using Autoconf, write it as&lt;br&gt;‘&lt;samp&gt;@datadir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The definition of ‘&lt;samp&gt;datadir&lt;/samp&gt;’ is the same for all packages, so you&lt;br&gt;should install your data in a subdirectory thereof.  Most packages&lt;br&gt;install their data under &lt;samp&gt;$(datadir)/&lt;var&gt;package-name&lt;/var&gt;/&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;sysconfdir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing read-only data files that pertain to a&lt;br&gt;single machine–that is to say, files for configuring a host.  Mailer&lt;br&gt;and network configuration files, &lt;samp&gt;/etc/passwd&lt;/samp&gt;, and so forth belong&lt;br&gt;here.  All the files in this directory should be ordinary ASCII text&lt;br&gt;files.  This directory should normally be &lt;samp&gt;/usr/local/etc&lt;/samp&gt;, but&lt;br&gt;write it as &lt;samp&gt;$(prefix)/etc&lt;/samp&gt;.&lt;br&gt;(If you are using Autoconf, write it as ‘&lt;samp&gt;@sysconfdir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Do not install executables here in this directory (they probably belong&lt;br&gt;in &lt;samp&gt;$(libexecdir)&lt;/samp&gt; or &lt;samp&gt;$(sbindir)&lt;/samp&gt;).  Also do not install&lt;br&gt;files that are modified in the normal course of their use (programs&lt;br&gt;whose purpose is to change the configuration of the system excluded).&lt;br&gt;Those probably belong in &lt;samp&gt;$(localstatedir)&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;sharedstatedir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing architecture-independent data files which&lt;br&gt;the programs modify while they run.  This should normally be&lt;br&gt;&lt;samp&gt;/usr/local/com&lt;/samp&gt;, but write it as &lt;samp&gt;$(prefix)/com&lt;/samp&gt;.&lt;br&gt;(If you are using Autoconf, write it as ‘&lt;samp&gt;@sharedstatedir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;localstatedir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing data files which the programs modify while&lt;br&gt;they run, and that pertain to one specific machine.  Users should never&lt;br&gt;need to modify files in this directory to configure the package’s&lt;br&gt;operation; put such configuration information in separate files that go&lt;br&gt;in &lt;samp&gt;$(datadir)&lt;/samp&gt; or &lt;samp&gt;$(sysconfdir)&lt;/samp&gt;.  &lt;samp&gt;$(localstatedir)&lt;/samp&gt;&lt;br&gt;should normally be &lt;samp&gt;/usr/local/var&lt;/samp&gt;, but write it as&lt;br&gt;&lt;samp&gt;$(prefix)/var&lt;/samp&gt;.&lt;br&gt;(If you are using Autoconf, write it as ‘&lt;samp&gt;@localstatedir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;runstatedir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing data files which the programs modify&lt;br&gt;while they run, that pertain to one specific machine, and which need&lt;br&gt;not persist longer than the execution of the program—which is&lt;br&gt;generally long-lived, for example, until the next reboot.  PID files&lt;br&gt;for system daemons are a typical use.  In addition, this directory&lt;br&gt;should not be cleaned except perhaps at reboot, while the general&lt;br&gt;&lt;samp&gt;/tmp&lt;/samp&gt; (&lt;code&gt;TMPDIR&lt;/code&gt;) may be cleaned arbitrarily.  This should&lt;br&gt;normally be &lt;samp&gt;/var/run&lt;/samp&gt;, but write it as&lt;br&gt;&lt;samp&gt;$(localstatedir)/run&lt;/samp&gt;.  Having it as a separate variable allows&lt;br&gt;the use of &lt;samp&gt;/run&lt;/samp&gt; if desired, for example.  (If you are using&lt;br&gt;Autoconf 2.70 or later, write it as ‘&lt;samp&gt;@runstatedir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;These variables specify the directory for installing certain specific&lt;br&gt;types of files, if your program has them.  Every GNU package should&lt;br&gt;have Info files, so every program needs ‘&lt;samp&gt;infodir&lt;/samp&gt;’, but not all&lt;br&gt;need ‘&lt;samp&gt;libdir&lt;/samp&gt;’ or ‘&lt;samp&gt;lispdir&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;includedir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing header files to be included by user&lt;br&gt;programs with the C ‘&lt;samp&gt;#include&lt;/samp&gt;’ preprocessor directive.  This&lt;br&gt;should normally be &lt;samp&gt;/usr/local/include&lt;/samp&gt;, but write it as&lt;br&gt;&lt;samp&gt;$(prefix)/include&lt;/samp&gt;.&lt;br&gt;(If you are using Autoconf, write it as ‘&lt;samp&gt;@includedir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Most compilers other than GCC do not look for header files in directory&lt;br&gt;&lt;samp&gt;/usr/local/include&lt;/samp&gt;.  So installing the header files this way is&lt;br&gt;only useful with GCC.  Sometimes this is not a problem because some&lt;br&gt;libraries are only really intended to work with GCC.  But some libraries&lt;br&gt;are intended to work with other compilers.  They should install their&lt;br&gt;header files in two places, one specified by &lt;code&gt;includedir&lt;/code&gt; and one&lt;br&gt;specified by &lt;code&gt;oldincludedir&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;oldincludedir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing ‘&lt;samp&gt;#include&lt;/samp&gt;’ header files for use with&lt;br&gt;compilers other than GCC.  This should normally be &lt;samp&gt;/usr/include&lt;/samp&gt;.&lt;br&gt;(If you are using Autoconf, you can write it as ‘&lt;samp&gt;@oldincludedir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The Makefile commands should check whether the value of&lt;br&gt;&lt;code&gt;oldincludedir&lt;/code&gt; is empty.  If it is, they should not try to use&lt;br&gt;it; they should cancel the second installation of the header files.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A package should not replace an existing header in this directory unless&lt;br&gt;the header came from the same package.  Thus, if your Foo package&lt;br&gt;provides a header file &lt;samp&gt;foo.h&lt;/samp&gt;, then it should install the header&lt;br&gt;file in the &lt;code&gt;oldincludedir&lt;/code&gt; directory if either (1) there is no&lt;br&gt;&lt;samp&gt;foo.h&lt;/samp&gt; there or (2) the &lt;samp&gt;foo.h&lt;/samp&gt; that exists came from the Foo&lt;br&gt;package.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To tell whether &lt;samp&gt;foo.h&lt;/samp&gt; came from the Foo package, put a magic&lt;br&gt;string in the file—part of a comment—and &lt;code&gt;grep&lt;/code&gt; for that string.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;docdir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing documentation files (other than Info) for&lt;br&gt;this package.  By default, it should be&lt;br&gt;&lt;samp&gt;/usr/local/share/doc/&lt;var&gt;yourpkg&lt;/var&gt;&lt;/samp&gt;, but it should be written as&lt;br&gt;&lt;samp&gt;$(datarootdir)/doc/&lt;var&gt;yourpkg&lt;/var&gt;&lt;/samp&gt;.  (If you are using Autoconf,&lt;br&gt;write it as ‘&lt;samp&gt;@docdir@&lt;/samp&gt;’.)  The &lt;var&gt;yourpkg&lt;/var&gt; subdirectory, which&lt;br&gt;may include a version number, prevents collisions among files with&lt;br&gt;common names, such as &lt;samp&gt;README&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;infodir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing the Info files for this package.  By&lt;br&gt;default, it should be &lt;samp&gt;/usr/local/share/info&lt;/samp&gt;, but it should be&lt;br&gt;written as &lt;samp&gt;$(datarootdir)/info&lt;/samp&gt;.  (If you are using Autoconf,&lt;br&gt;write it as ‘&lt;samp&gt;@infodir@&lt;/samp&gt;’.)  &lt;code&gt;infodir&lt;/code&gt; is separate from&lt;br&gt;&lt;code&gt;docdir&lt;/code&gt; for compatibility with existing practice.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;htmldir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;dvidir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;pdfdir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;psdir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Directories for installing documentation files in the particular&lt;br&gt;format.  They should all be set to &lt;code&gt;$(docdir)&lt;/code&gt; by default.  (If&lt;br&gt;you are using Autoconf, write them as ‘&lt;samp&gt;@htmldir@&lt;/samp&gt;’,&lt;br&gt;‘&lt;samp&gt;@dvidir@&lt;/samp&gt;’, etc.)  Packages which supply several translations&lt;br&gt;of their documentation should install them in&lt;br&gt;‘&lt;samp&gt;$(htmldir)/&lt;/samp&gt;’&lt;var&gt;ll&lt;/var&gt;, ‘&lt;samp&gt;$(pdfdir)/&lt;/samp&gt;’&lt;var&gt;ll&lt;/var&gt;, etc. where&lt;br&gt;&lt;var&gt;ll&lt;/var&gt; is a locale abbreviation such as ‘&lt;samp&gt;en&lt;/samp&gt;’ or ‘&lt;samp&gt;pt_BR&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;libdir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for object files and libraries of object code.  Do not&lt;br&gt;install executables here, they probably ought to go in &lt;samp&gt;$(libexecdir)&lt;/samp&gt;&lt;br&gt;instead.  The value of &lt;code&gt;libdir&lt;/code&gt; should normally be&lt;br&gt;&lt;samp&gt;/usr/local/lib&lt;/samp&gt;, but write it as &lt;samp&gt;$(exec_prefix)/lib&lt;/samp&gt;.&lt;br&gt;(If you are using Autoconf, write it as ‘&lt;samp&gt;@libdir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;lispdir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing any Emacs Lisp files in this package.  By&lt;br&gt;default, it should be &lt;samp&gt;/usr/local/share/emacs/site-lisp&lt;/samp&gt;, but it&lt;br&gt;should be written as &lt;samp&gt;$(datarootdir)/emacs/site-lisp&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you are using Autoconf, write the default as ‘&lt;samp&gt;@lispdir@&lt;/samp&gt;’.&lt;br&gt;In order to make ‘&lt;samp&gt;@lispdir@&lt;/samp&gt;’ work, you need the following lines&lt;br&gt;in your &lt;samp&gt;configure.ac&lt;/samp&gt; file:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;lispdir=’${datarootdir}/emacs/site-lisp’&lt;br&gt;AC_SUBST(lispdir)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/dd&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;dt&gt;‘&lt;samp&gt;localedir&lt;/samp&gt;’&lt;/dt&gt;&lt;/p&gt;
&lt;p&gt;&lt;dd&gt;&lt;p&gt;The directory for installing locale-specific message catalogs for this&lt;br&gt;package.  By default, it should be &lt;samp&gt;/usr/local/share/locale&lt;/samp&gt;, but&lt;br&gt;it should be written as &lt;samp&gt;$(datarootdir)/locale&lt;/samp&gt;.  (If you are&lt;br&gt;using Autoconf, write it as ‘&lt;samp&gt;@localedir@&lt;/samp&gt;’.)  This directory&lt;br&gt;usually has a subdirectory per locale.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/p&gt;&lt;/dl&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Unix-style man pages are installed in one of the following:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;mandir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The top-level directory for installing the man pages (if any) for this&lt;br&gt;package.  It will normally be &lt;samp&gt;/usr/local/share/man&lt;/samp&gt;, but you&lt;br&gt;should write it as &lt;samp&gt;$(datarootdir)/man&lt;/samp&gt;.  (If you are using&lt;br&gt;Autoconf, write it as ‘&lt;samp&gt;@mandir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;man1dir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing section 1 man pages.  Write it as&lt;br&gt;&lt;samp&gt;$(mandir)/man1&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;man2dir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for installing section 2 man pages.  Write it as&lt;br&gt;&lt;samp&gt;$(mandir)/man2&lt;/samp&gt;&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;…&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;Don’t make the primary documentation for any GNU software be a&lt;br&gt;man page.  Write a manual in Texinfo instead.  Man pages are just for&lt;br&gt;the sake of people running GNU software on Unix, which is a secondary&lt;br&gt;application only.&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;manext&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The file name extension for the installed man page.  This should contain&lt;br&gt;a period followed by the appropriate digit; it should normally be ‘&lt;samp&gt;.1&lt;/samp&gt;’.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;man1ext&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The file name extension for installed section 1 man pages.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;man2ext&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The file name extension for installed section 2 man pages.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;…&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Use these names instead of ‘&lt;samp&gt;manext&lt;/samp&gt;’ if the package needs to install man&lt;br&gt;pages in more than one section of the manual.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;And finally, you should set the following variable:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;srcdir&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory for the sources being compiled.  The value of this&lt;br&gt;variable is normally inserted by the &lt;code&gt;configure&lt;/code&gt; shell script.&lt;br&gt;(If you are using Autoconf, use ‘&lt;samp&gt;srcdir = @srcdir@&lt;/samp&gt;’.)&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;For example:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;# Common prefix for installation directories.&lt;br&gt;# NOTE: This directory must exist when you start the install.&lt;br&gt;prefix = /usr/local&lt;br&gt;datarootdir = $(prefix)/share&lt;br&gt;datadir = $(datarootdir)&lt;br&gt;exec_prefix = $(prefix)&lt;br&gt;# Where to put the executable for the command ‘gcc’.&lt;br&gt;bindir = $(exec_prefix)/bin&lt;br&gt;# Where to put the directories used by the compiler.&lt;br&gt;libexecdir = $(exec_prefix)/libexec&lt;br&gt;# Where to put the Info files.&lt;br&gt;infodir = $(datarootdir)/info&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If your program installs a large number of files into one of the&lt;br&gt;standard user-specified directories, it might be useful to group them&lt;br&gt;into a subdirectory particular to that program.  If you do this, you&lt;br&gt;should write the &lt;code&gt;install&lt;/code&gt; rule to create these subdirectories.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Do not expect the user to include the subdirectory name in the value of&lt;br&gt;any of the variables listed above.  The idea of having a uniform set of&lt;br&gt;variable names for installation directories is to enable the user to&lt;br&gt;specify the exact same values for several different GNU packages.  In&lt;br&gt;order for this to be useful, all the packages must be designed so that&lt;br&gt;they will work sensibly when the user does so.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;At times, not all of these variables may be implemented in the current&lt;br&gt;release of Autoconf and/or Automake; but as of Autoconf&amp;nbsp;2.60, we&lt;br&gt;believe all of them are.  When any are missing, the descriptions here&lt;br&gt;serve as specifications for what Autoconf will implement.  As a&lt;br&gt;programmer, you can either use a development version of Autoconf or&lt;br&gt;avoid using these variables until a stable release is made which&lt;br&gt;supports them.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Standard-Targets&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Install-Command-Categories&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Install Command Categories&lt;/a&gt;, Previous: &lt;a href=&quot;#Directory-Variables&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Directory Variables&lt;/a&gt;, Up: &lt;a href=&quot;#Makefile-Conventions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefile Conventions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Standard-Targets-for-Users&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;16.6 Standard Targets for Users&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;All GNU programs should have the following targets in their Makefiles:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;all&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Compile the entire program.  This should be the default target.  This&lt;br&gt;target need not rebuild any documentation files; Info files should&lt;br&gt;normally be included in the distribution, and DVI (and other&lt;br&gt;documentation format) files should be made only when explicitly asked&lt;br&gt;for.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;By default, the Make rules should compile and link with ‘&lt;samp&gt;-g&lt;/samp&gt;’, so&lt;br&gt;that executable programs have debugging symbols.  Otherwise, you are&lt;br&gt;essentially helpless in the face of a crash, and it is often far from&lt;br&gt;easy to reproduce with a fresh build.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;install&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Compile the program and copy the executables, libraries, and so on to&lt;br&gt;the file names where they should reside for actual use.  If there is a&lt;br&gt;simple test to verify that a program is properly installed, this target&lt;br&gt;should run that test.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Do not strip executables when installing them.  This helps eventual&lt;br&gt;debugging that may be needed later, and nowadays disk space is cheap&lt;br&gt;and dynamic loaders typically ensure debug sections are not loaded during&lt;br&gt;normal execution.  Users that need stripped binaries may invoke the&lt;br&gt;&lt;code&gt;install-strip&lt;/code&gt; target to do that.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If possible, write the &lt;code&gt;install&lt;/code&gt; target rule so that it does not&lt;br&gt;modify anything in the directory where the program was built, provided&lt;br&gt;‘&lt;samp&gt;make all&lt;/samp&gt;’ has just been done.  This is convenient for building the&lt;br&gt;program under one user name and installing it under another.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The commands should create all the directories in which files are to be&lt;br&gt;installed, if they don’t already exist.  This includes the directories&lt;br&gt;specified as the values of the variables &lt;code&gt;prefix&lt;/code&gt; and&lt;br&gt;&lt;code&gt;exec_prefix&lt;/code&gt;, as well as all subdirectories that are needed.&lt;br&gt;One way to do this is by means of an &lt;code&gt;installdirs&lt;/code&gt; target&lt;br&gt;as described below.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Use ‘&lt;samp&gt;-&lt;/samp&gt;’ before any command for installing a man page, so that&lt;br&gt;&lt;code&gt;make&lt;/code&gt; will ignore any errors.  This is in case there are systems&lt;br&gt;that don’t have the Unix man page documentation system installed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The way to install Info files is to copy them into &lt;samp&gt;$(infodir)&lt;/samp&gt;&lt;br&gt;with &lt;code&gt;$(INSTALL_DATA)&lt;/code&gt; (see &lt;a href=&quot;#Command-Variables&quot;&gt;Command Variables&lt;/a&gt;), and then run&lt;br&gt;the &lt;code&gt;install-info&lt;/code&gt; program if it is present.  &lt;code&gt;install-info&lt;/code&gt;&lt;br&gt;is a program that edits the Info &lt;samp&gt;dir&lt;/samp&gt; file to add or update the&lt;br&gt;menu entry for the given Info file; it is part of the Texinfo package.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is a sample rule to install an Info file that also tries to&lt;br&gt;handle some additional situations, such as &lt;code&gt;install-info&lt;/code&gt; not&lt;br&gt;being present.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;do-install-info: foo.info installdirs&lt;br&gt;        $(NORMAL_INSTALL)&lt;br&gt;# Prefer an info file in . to one in srcdir.&lt;br&gt;        if test -f foo.info; then d=.; \&lt;br&gt;         else d=”$(srcdir)”; fi; \&lt;br&gt;        $(INSTALL_DATA) $$d/foo.info \&lt;br&gt;          “$(DESTDIR)$(infodir)/foo.info”&lt;br&gt;# Run install-info only if it exists.&lt;br&gt;# Use ‘if’ instead of just prepending ‘-‘ to the&lt;br&gt;# line so we notice real errors from install-info.&lt;br&gt;# Use ‘$(SHELL) -c’ because some shells do not&lt;br&gt;# fail gracefully when there is an unknown command.&lt;br&gt;        $(POST_INSTALL)&lt;br&gt;        if $(SHELL) -c ‘install-info –version’ \&lt;br&gt;           &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then \&lt;br&gt;          install-info –dir-file=”$(DESTDIR)$(infodir)/dir” \&lt;br&gt;                       “$(DESTDIR)$(infodir)/foo.info”; \&lt;br&gt;        else true; fi&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When writing the &lt;code&gt;install&lt;/code&gt; target, you must classify all the&lt;br&gt;commands into three categories: normal ones, &lt;em&gt;pre-installation&lt;/em&gt;&lt;br&gt;commands and &lt;em&gt;post-installation&lt;/em&gt; commands.  See &lt;a href=&quot;#Install-Command-Categories&quot;&gt;Install Command Categories&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;install-html&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;install-dvi&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;install-pdf&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;install-ps&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;These targets install documentation in formats other than Info;&lt;br&gt;they’re intended to be called explicitly by the person installing the&lt;br&gt;package, if that format is desired.  GNU prefers Info files, so these&lt;br&gt;must be installed by the &lt;code&gt;install&lt;/code&gt; target.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;When you have many documentation files to install, we recommend that&lt;br&gt;you avoid collisions and clutter by arranging for these targets to&lt;br&gt;install in subdirectories of the appropriate installation directory,&lt;br&gt;such as &lt;code&gt;htmldir&lt;/code&gt;.  As one example, if your package has multiple&lt;br&gt;manuals, and you wish to install HTML documentation with many files&lt;br&gt;(such as the “split” mode output by &lt;code&gt;makeinfo –html&lt;/code&gt;), you’ll&lt;br&gt;certainly want to use subdirectories, or two nodes with the same name&lt;br&gt;in different manuals will overwrite each other.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Please make these &lt;code&gt;install-&lt;var&gt;format&lt;/var&gt;&lt;/code&gt; targets invoke the&lt;br&gt;commands for the &lt;var&gt;format&lt;/var&gt; target, for example, by making&lt;br&gt;&lt;var&gt;format&lt;/var&gt; a dependency.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;uninstall&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Delete all the installed files—the copies that the ‘&lt;samp&gt;install&lt;/samp&gt;’&lt;br&gt;and ‘&lt;samp&gt;install-&lt;em&gt;&lt;/em&gt;&lt;/samp&gt;’ targets create.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This rule should not modify the directories where compilation is done,&lt;br&gt;only the directories where files are installed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The uninstallation commands are divided into three categories, just like&lt;br&gt;the installation commands.  See &lt;a href=&quot;#Install-Command-Categories&quot;&gt;Install Command Categories&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;install-strip&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Like &lt;code&gt;install&lt;/code&gt;, but strip the executable files while installing&lt;br&gt;them.  In simple cases, this target can use the &lt;code&gt;install&lt;/code&gt; target in&lt;br&gt;a simple way:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;install-strip:&lt;br&gt;        $(MAKE) INSTALL_PROGRAM=’$(INSTALL_PROGRAM) -s’ \&lt;br&gt;                install&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;But if the package installs scripts as well as real executables, the&lt;br&gt;&lt;code&gt;install-strip&lt;/code&gt; target can’t just refer to the &lt;code&gt;install&lt;/code&gt;&lt;br&gt;target; it has to strip the executables but not the scripts.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;code&gt;install-strip&lt;/code&gt; should not strip the executables in the build&lt;br&gt;directory which are being copied for installation.  It should only strip&lt;br&gt;the copies that are installed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Normally we do not recommend stripping an executable unless you are sure&lt;br&gt;the program has no bugs.  However, it can be reasonable to install a&lt;br&gt;stripped executable for actual execution while saving the unstripped&lt;br&gt;executable elsewhere in case there is a bug.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;clean&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Delete all files in the current directory that are normally created by&lt;br&gt;building the program.  Also delete files in other directories if they&lt;br&gt;are created by this makefile.  However, don’t delete the files that&lt;br&gt;record the configuration.  Also preserve files that could be made by&lt;br&gt;building, but normally aren’t because the distribution comes with&lt;br&gt;them.  There is no need to delete parent directories that were created&lt;br&gt;with ‘&lt;samp&gt;mkdir -p&lt;/samp&gt;’, since they could have existed anyway.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Delete &lt;samp&gt;.dvi&lt;/samp&gt; files here if they are not part of the distribution.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;distclean&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Delete all files in the current directory (or created by this&lt;br&gt;makefile) that are created by configuring or building the program.  If&lt;br&gt;you have unpacked the source and built the program without creating&lt;br&gt;any other files, ‘&lt;samp&gt;make distclean&lt;/samp&gt;’ should leave only the files&lt;br&gt;that were in the distribution.  However, there is no need to delete&lt;br&gt;parent directories that were created with ‘&lt;samp&gt;mkdir -p&lt;/samp&gt;’, since they&lt;br&gt;could have existed anyway.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;mostlyclean&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Like ‘&lt;samp&gt;clean&lt;/samp&gt;’, but may refrain from deleting a few files that people&lt;br&gt;normally don’t want to recompile.  For example, the ‘&lt;samp&gt;mostlyclean&lt;/samp&gt;’&lt;br&gt;target for GCC does not delete &lt;samp&gt;libgcc.a&lt;/samp&gt;, because recompiling it&lt;br&gt;is rarely necessary and takes a lot of time.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;maintainer-clean&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Delete almost everything that can be reconstructed with this Makefile.&lt;br&gt;This typically includes everything deleted by &lt;code&gt;distclean&lt;/code&gt;, plus&lt;br&gt;more: C source files produced by Bison, tags tables, Info files, and&lt;br&gt;so on.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The reason we say “almost everything” is that running the command&lt;br&gt;‘&lt;samp&gt;make maintainer-clean&lt;/samp&gt;’ should not delete &lt;samp&gt;configure&lt;/samp&gt; even&lt;br&gt;if &lt;samp&gt;configure&lt;/samp&gt; can be remade using a rule in the Makefile.  More&lt;br&gt;generally, ‘&lt;samp&gt;make maintainer-clean&lt;/samp&gt;’ should not delete anything&lt;br&gt;that needs to exist in order to run &lt;samp&gt;configure&lt;/samp&gt; and then begin to&lt;br&gt;build the program.  Also, there is no need to delete parent&lt;br&gt;directories that were created with ‘&lt;samp&gt;mkdir -p&lt;/samp&gt;’, since they could&lt;br&gt;have existed anyway.  These are the only exceptions;&lt;br&gt;&lt;code&gt;maintainer-clean&lt;/code&gt; should delete everything else that can be&lt;br&gt;rebuilt.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The ‘&lt;samp&gt;maintainer-clean&lt;/samp&gt;’ target is intended to be used by a maintainer of&lt;br&gt;the package, not by ordinary users.  You may need special tools to&lt;br&gt;reconstruct some of the files that ‘&lt;samp&gt;make maintainer-clean&lt;/samp&gt;’ deletes.&lt;br&gt;Since these files are normally included in the distribution, we don’t&lt;br&gt;take care to make them easy to reconstruct.  If you find you need to&lt;br&gt;unpack the full distribution again, don’t blame us.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To help make users aware of this, the commands for the special&lt;br&gt;&lt;code&gt;maintainer-clean&lt;/code&gt; target should start with these two:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;@echo ‘This command is intended for maintainers to use; it’&lt;br&gt;@echo ‘deletes files that may need special tools to rebuild.’&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;TAGS&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Update a tags table for this program.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;info&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Generate any Info files needed.  The best way to write the rules is as&lt;br&gt;follows:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;info: foo.info&lt;br&gt;&lt;br&gt;foo.info: foo.texi chap1.texi chap2.texi&lt;br&gt;        $(MAKEINFO) $(srcdir)/foo.texi&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;You must define the variable &lt;code&gt;MAKEINFO&lt;/code&gt; in the Makefile.  It should&lt;br&gt;run the &lt;code&gt;makeinfo&lt;/code&gt; program, which is part of the Texinfo&lt;br&gt;distribution.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Normally a GNU distribution comes with Info files, and that means the&lt;br&gt;Info files are present in the source directory.  Therefore, the Make&lt;br&gt;rule for an info file should update it in the source directory.  When&lt;br&gt;users build the package, ordinarily Make will not update the Info files&lt;br&gt;because they will already be up to date.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;dvi&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;html&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;pdf&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;ps&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Generate documentation files in the given format.  These targets&lt;br&gt;should always exist, but any or all can be a no-op if the given output&lt;br&gt;format cannot be generated.  These targets should not be dependencies&lt;br&gt;of the &lt;code&gt;all&lt;/code&gt; target; the user must manually invoke them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here’s an example rule for generating DVI files from Texinfo:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;dvi: foo.dvi&lt;br&gt;&lt;br&gt;foo.dvi: foo.texi chap1.texi chap2.texi&lt;br&gt;        $(TEXI2DVI) $(srcdir)/foo.texi&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;You must define the variable &lt;code&gt;TEXI2DVI&lt;/code&gt; in the Makefile.  It&lt;br&gt;should run the program &lt;code&gt;texi2dvi&lt;/code&gt;, which is part of the Texinfo&lt;br&gt;distribution.  (&lt;code&gt;texi2dvi&lt;/code&gt; uses TeX to do the real work of&lt;br&gt;formatting. TeX is not distributed with Texinfo.)  Alternatively,&lt;br&gt;write only the dependencies, and allow GNU &lt;code&gt;make&lt;/code&gt; to provide the&lt;br&gt;command.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here’s another example, this one for generating HTML from Texinfo:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;html: foo.html&lt;br&gt;&lt;br&gt;foo.html: foo.texi chap1.texi chap2.texi&lt;br&gt;        $(TEXI2HTML) $(srcdir)/foo.texi&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Again, you would define the variable &lt;code&gt;TEXI2HTML&lt;/code&gt; in the Makefile;&lt;br&gt;for example, it might run &lt;code&gt;makeinfo –no-split –html&lt;/code&gt;&lt;br&gt;(&lt;code&gt;makeinfo&lt;/code&gt; is part of the Texinfo distribution).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;dist&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Create a distribution tar file for this program.  The tar file should be&lt;br&gt;set up so that the file names in the tar file start with a subdirectory&lt;br&gt;name which is the name of the package it is a distribution for.  This&lt;br&gt;name can include the version number.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;For example, the distribution tar file of GCC version 1.40 unpacks into&lt;br&gt;a subdirectory named &lt;samp&gt;gcc-1.40&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The easiest way to do this is to create a subdirectory appropriately&lt;br&gt;named, use &lt;code&gt;ln&lt;/code&gt; or &lt;code&gt;cp&lt;/code&gt; to install the proper files in it, and&lt;br&gt;then &lt;code&gt;tar&lt;/code&gt; that subdirectory.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Compress the tar file with &lt;code&gt;gzip&lt;/code&gt;.  For example, the actual&lt;br&gt;distribution file for GCC version 1.40 is called &lt;samp&gt;gcc-1.40.tar.gz&lt;/samp&gt;.&lt;br&gt;It is ok to support other free compression formats as well.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The &lt;code&gt;dist&lt;/code&gt; target should explicitly depend on all non-source files&lt;br&gt;that are in the distribution, to make sure they are up to date in the&lt;br&gt;distribution.&lt;br&gt;See &lt;a href=&quot;http://www.gnu.org/prep/standards/standards.html#Releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making Releases&lt;/a&gt; in &lt;cite&gt;GNU Coding Standards&lt;/cite&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;check&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Perform self-tests (if any).  The user must build the program before&lt;br&gt;running the tests, but need not install the program; you should write&lt;br&gt;the self-tests so that they work when the program is built but not&lt;br&gt;installed.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;The following targets are suggested as conventional names, for programs&lt;br&gt;in which they are useful.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;installcheck&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Perform installation tests (if any).  The user must build and install&lt;br&gt;the program before running the tests.  You should not assume that&lt;br&gt;&lt;samp&gt;$(bindir)&lt;/samp&gt; is in the search path.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;installdirs&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;It’s useful to add a target named ‘&lt;samp&gt;installdirs&lt;/samp&gt;’ to create the&lt;br&gt;directories where files are installed, and their parent directories.&lt;br&gt;There is a script called &lt;samp&gt;mkinstalldirs&lt;/samp&gt; which is convenient for&lt;br&gt;this; you can find it in the Gnulib package.&lt;br&gt;You can use a rule like this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;# Make sure all installation directories (e.g. $(bindir))&lt;br&gt;# actually exist by making them if necessary.&lt;br&gt;installdirs: mkinstalldirs&lt;br&gt;        $(srcdir)/mkinstalldirs $(bindir) $(datadir) \&lt;br&gt;                                $(libdir) $(infodir) \&lt;br&gt;                                $(mandir)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;or, if you wish to support &lt;code&gt;DESTDIR&lt;/code&gt; (strongly encouraged),&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;# Make sure all installation directories (e.g. $(bindir))&lt;br&gt;# actually exist by making them if necessary.&lt;br&gt;installdirs: mkinstalldirs&lt;br&gt;        $(srcdir)/mkinstalldirs \&lt;br&gt;            $(DESTDIR)$(bindir) $(DESTDIR)$(datadir) \&lt;br&gt;            $(DESTDIR)$(libdir) $(DESTDIR)$(infodir) \&lt;br&gt;            $(DESTDIR)$(mandir)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This rule should not modify the directories where compilation is done.&lt;br&gt;It should do nothing but create installation directories.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Install-Command-Categories&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Standard-Targets&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Standard Targets&lt;/a&gt;, Up: &lt;a href=&quot;#Makefile-Conventions&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Makefile Conventions&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Install-Command-Categories-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;section&quot;&gt;16.7 Install Command Categories&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-pre_002dinstallation-commands&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a name=&quot;index-post_002dinstallation-commands&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;When writing the &lt;code&gt;install&lt;/code&gt; target, you must classify all the&lt;br&gt;commands into three categories: normal ones, &lt;em&gt;pre-installation&lt;/em&gt;&lt;br&gt;commands and &lt;em&gt;post-installation&lt;/em&gt; commands.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Normal commands move files into their proper places, and set their&lt;br&gt;modes.  They may not alter any files except the ones that come entirely&lt;br&gt;from the package they belong to.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Pre-installation and post-installation commands may alter other files;&lt;br&gt;in particular, they can edit global configuration files or data bases.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Pre-installation commands are typically executed before the normal&lt;br&gt;commands, and post-installation commands are typically run after the&lt;br&gt;normal commands.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The most common use for a post-installation command is to run&lt;br&gt;&lt;code&gt;install-info&lt;/code&gt;.  This cannot be done with a normal command, since&lt;br&gt;it alters a file (the Info directory) which does not come entirely and&lt;br&gt;solely from the package being installed.  It is a post-installation&lt;br&gt;command because it needs to be done after the normal command which&lt;br&gt;installs the package’s Info files.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Most programs don’t need any pre-installation commands, but we have the&lt;br&gt;feature just in case it is needed.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To classify the commands in the &lt;code&gt;install&lt;/code&gt; rule into these three&lt;br&gt;categories, insert &lt;em&gt;category lines&lt;/em&gt; among them.  A category line&lt;br&gt;specifies the category for the commands that follow.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A category line consists of a tab and a reference to a special Make&lt;br&gt;variable, plus an optional comment at the end.  There are three&lt;br&gt;variables you can use, one for each category; the variable name&lt;br&gt;specifies the category.  Category lines are no-ops in ordinary execution&lt;br&gt;because these three Make variables are normally undefined (and you&lt;br&gt;&lt;em&gt;should not&lt;/em&gt; define them in the makefile).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here are the three possible category lines, each with a comment that&lt;br&gt;explains what it means:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;        $(PRE_INSTALL)     # &lt;span class=&quot;roman&quot;&gt;Pre-install commands follow.&lt;/span&gt;&lt;br&gt;        $(POST_INSTALL)    # &lt;span class=&quot;roman&quot;&gt;Post-install commands follow.&lt;/span&gt;&lt;br&gt;        $(NORMAL_INSTALL)  # &lt;span class=&quot;roman&quot;&gt;Normal commands follow.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you don’t use a category line at the beginning of the &lt;code&gt;install&lt;/code&gt;&lt;br&gt;rule, all the commands are classified as normal until the first category&lt;br&gt;line.  If you don’t use any category lines, all the commands are&lt;br&gt;classified as normal.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;These are the category lines for &lt;code&gt;uninstall&lt;/code&gt;:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;        $(PRE_UNINSTALL)     # &lt;span class=&quot;roman&quot;&gt;Pre-uninstall commands follow.&lt;/span&gt;&lt;br&gt;        $(POST_UNINSTALL)    # &lt;span class=&quot;roman&quot;&gt;Post-uninstall commands follow.&lt;/span&gt;&lt;br&gt;        $(NORMAL_UNINSTALL)  # &lt;span class=&quot;roman&quot;&gt;Normal commands follow.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Typically, a pre-uninstall command would be used for deleting entries&lt;br&gt;from the Info directory.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;uninstall&lt;/code&gt; target has any dependencies&lt;br&gt;which act as subroutines of installation, then you should start&lt;br&gt;&lt;em&gt;each&lt;/em&gt; dependency’s commands with a category line, and start the&lt;br&gt;main target’s commands with a category line also.  This way, you can&lt;br&gt;ensure that each command is placed in the right category regardless of&lt;br&gt;which of the dependencies actually run.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Pre-installation and post-installation commands should not run any&lt;br&gt;programs except for these:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;[ basename bash cat chgrp chmod chown cmp cp dd diff echo&lt;br&gt;egrep expand expr false fgrep find getopt grep gunzip gzip&lt;br&gt;hostname install install-info kill ldconfig ln ls md5sum&lt;br&gt;mkdir mkfifo mknod mv printenv pwd rm rmdir sed sort tee&lt;br&gt;test touch true uname xargs yes&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;index-binary-packages&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;The reason for distinguishing the commands in this way is for the sake&lt;br&gt;of making binary packages.  Typically a binary package contains all the&lt;br&gt;executables and other files that need to be installed, and has its own&lt;br&gt;method of installing them—so it does not need to run the normal&lt;br&gt;installation commands.  But installing the binary package does need to&lt;br&gt;execute the pre-installation and post-installation commands.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Programs to build binary packages work by extracting the&lt;br&gt;pre-installation and post-installation commands.  Here is one way of&lt;br&gt;extracting the pre-installation commands (the &lt;samp&gt;-s&lt;/samp&gt; option to&lt;br&gt;&lt;code&gt;make&lt;/code&gt; is needed to silence messages about entering&lt;br&gt;subdirectories):&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;make -s -n install -o all \&lt;br&gt;      PRE_INSTALL=pre-install \&lt;br&gt;      POST_INSTALL=post-install \&lt;br&gt;      NORMAL_INSTALL=normal-install \&lt;br&gt;  | gawk -f pre-install.awk&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;where the file &lt;samp&gt;pre-install.awk&lt;/samp&gt; could contain this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;$0 ~ /^(normal-install|post-install)[ \t]$/ {on = 0}&lt;br&gt;on {print $0}&lt;br&gt;$0 ~ /^pre-install[ \t]&lt;em&gt;$/ {on = 1}&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Quick-Reference&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Error-Messages&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Error Messages&lt;/a&gt;, Previous: &lt;a href=&quot;#Makefile-Conventions&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Makefile Conventions&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Quick-Reference-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;appendix&quot;&gt;Appendix A Quick Reference&lt;/h2&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;This appendix summarizes the directives, text manipulation functions,&lt;br&gt;and special variables which GNU &lt;code&gt;make&lt;/code&gt; understands.&lt;br&gt;See &lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;, &lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Built-In Rules&lt;/a&gt;,&lt;br&gt;and &lt;a href=&quot;#Options-Summary&quot;&gt;Summary of Options&lt;/a&gt;,&lt;br&gt;for other summaries.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Here is a summary of the directives GNU &lt;code&gt;make&lt;/code&gt; recognizes:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;define &lt;var&gt;variable&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;define &lt;var&gt;variable&lt;/var&gt; =&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;define &lt;var&gt;variable&lt;/var&gt; :=&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;define &lt;var&gt;variable&lt;/var&gt; ::=&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;define &lt;var&gt;variable&lt;/var&gt; +=&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;define &lt;var&gt;variable&lt;/var&gt; ?=&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;endef&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Define multi-line variables.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Multi_002dLine&quot;&gt;Multi-Line&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;undefine &lt;var&gt;variable&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Undefining variables.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Undefine-Directive&quot;&gt;Undefine Directive&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifdef &lt;var&gt;variable&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifndef &lt;var&gt;variable&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifeq (&lt;var&gt;a&lt;/var&gt;,&lt;var&gt;b&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifeq “&lt;var&gt;a&lt;/var&gt;“ “&lt;var&gt;b&lt;/var&gt;“&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifeq ‘&lt;var&gt;a&lt;/var&gt;‘ ‘&lt;var&gt;b&lt;/var&gt;‘&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifneq (&lt;var&gt;a&lt;/var&gt;,&lt;var&gt;b&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifneq “&lt;var&gt;a&lt;/var&gt;“ “&lt;var&gt;b&lt;/var&gt;“&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;ifneq ‘&lt;var&gt;a&lt;/var&gt;‘ ‘&lt;var&gt;b&lt;/var&gt;‘&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;else&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;endif&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Conditionally evaluate part of the makefile.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Conditionals&quot;&gt;Conditionals&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;include &lt;var&gt;file&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;-include &lt;var&gt;file&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;sinclude &lt;var&gt;file&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Include another makefile.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Include&quot;&gt;Including Other Makefiles&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;override &lt;var&gt;variable-assignment&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Define a variable, overriding any previous definition, even one from&lt;br&gt;the command line.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Override-Directive&quot;&gt;The &lt;code&gt;override&lt;/code&gt; Directive&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;export&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Tell &lt;code&gt;make&lt;/code&gt; to export all variables to child processes by default.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Communicating Variables to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;export &lt;var&gt;variable&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;export &lt;var&gt;variable-assignment&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;unexport &lt;var&gt;variable&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Tell &lt;code&gt;make&lt;/code&gt; whether or not to export a particular variable to child&lt;br&gt;processes.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Communicating Variables to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;private &lt;var&gt;variable-assignment&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Do not allow this variable assignment to be inherited by prerequisites.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Suppressing-Inheritance&quot;&gt;Suppressing Inheritance&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;vpath &lt;var&gt;pattern&lt;/var&gt; &lt;var&gt;path&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Specify a search path for files matching a ‘&lt;samp&gt;%&lt;/samp&gt;’ pattern.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Selective-Search&quot;&gt;The &lt;code&gt;vpath&lt;/code&gt; Directive&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;vpath &lt;var&gt;pattern&lt;/var&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Remove all search paths previously specified for &lt;var&gt;pattern&lt;/var&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;vpath&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Remove all search paths previously specified in any &lt;code&gt;vpath&lt;/code&gt;&lt;br&gt;directive.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is a summary of the built-in functions (see &lt;a href=&quot;#Functions&quot;&gt;Functions&lt;/a&gt;):&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(subst &lt;var&gt;from&lt;/var&gt;,&lt;var&gt;to&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Replace &lt;var&gt;from&lt;/var&gt; with &lt;var&gt;to&lt;/var&gt; in &lt;var&gt;text&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(patsubst &lt;var&gt;pattern&lt;/var&gt;,&lt;var&gt;replacement&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Replace words matching &lt;var&gt;pattern&lt;/var&gt; with &lt;var&gt;replacement&lt;/var&gt; in &lt;var&gt;text&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(strip &lt;var&gt;string&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Remove excess whitespace characters from &lt;var&gt;string&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(findstring &lt;var&gt;find&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Locate &lt;var&gt;find&lt;/var&gt; in &lt;var&gt;text&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(filter &lt;var&gt;pattern&lt;/var&gt;…,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Select words in &lt;var&gt;text&lt;/var&gt; that match one of the &lt;var&gt;pattern&lt;/var&gt; words.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(filter-out &lt;var&gt;pattern&lt;/var&gt;…,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Select words in &lt;var&gt;text&lt;/var&gt; that &lt;em&gt;do not&lt;/em&gt; match any of the &lt;var&gt;pattern&lt;/var&gt; words.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(sort &lt;var&gt;list&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Sort the words in &lt;var&gt;list&lt;/var&gt; lexicographically, removing duplicates.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(word &lt;var&gt;n&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Extract the &lt;var&gt;n&lt;/var&gt;th word (one-origin) of &lt;var&gt;text&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(words &lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Count the number of words in &lt;var&gt;text&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(wordlist &lt;var&gt;s&lt;/var&gt;,&lt;var&gt;e&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Returns the list of words in &lt;var&gt;text&lt;/var&gt; from &lt;var&gt;s&lt;/var&gt; to &lt;var&gt;e&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(firstword &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Extract the first word of &lt;var&gt;names&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(lastword &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Extract the last word of &lt;var&gt;names&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Text-Functions&quot;&gt;Functions for String Substitution and Analysis&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(dir &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Extract the directory part of each file name.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#File-Name-Functions&quot;&gt;Functions for File Names&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(notdir &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Extract the non-directory part of each file name.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#File-Name-Functions&quot;&gt;Functions for File Names&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(suffix &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Extract the suffix (the last ‘&lt;samp&gt;.&lt;/samp&gt;’ and following characters) of each file name.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#File-Name-Functions&quot;&gt;Functions for File Names&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(basename &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Extract the base name (name without suffix) of each file name.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#File-Name-Functions&quot;&gt;Functions for File Names&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(addsuffix &lt;var&gt;suffix&lt;/var&gt;,&lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Append &lt;var&gt;suffix&lt;/var&gt; to each word in &lt;var&gt;names&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#File-Name-Functions&quot;&gt;Functions for File Names&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(addprefix &lt;var&gt;prefix&lt;/var&gt;,&lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Prepend &lt;var&gt;prefix&lt;/var&gt; to each word in &lt;var&gt;names&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#File-Name-Functions&quot;&gt;Functions for File Names&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(join &lt;var&gt;list1&lt;/var&gt;,&lt;var&gt;list2&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Join two parallel lists of words.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#File-Name-Functions&quot;&gt;Functions for File Names&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(wildcard &lt;var&gt;pattern&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Find file names matching a shell file name pattern (&lt;em&gt;not&lt;/em&gt; a&lt;br&gt;‘&lt;samp&gt;%&lt;/samp&gt;’ pattern).&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Wildcard-Function&quot;&gt;The Function &lt;code&gt;wildcard&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(realpath &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;For each file name in &lt;var&gt;names&lt;/var&gt;, expand to an absolute name that&lt;br&gt;does not contain any &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt;, nor symlinks.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#File-Name-Functions&quot;&gt;Functions for File Names&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(abspath &lt;var&gt;names&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;For each file name in &lt;var&gt;names&lt;/var&gt;, expand to an absolute name that&lt;br&gt;does not contain any &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;..&lt;/code&gt; components, but preserves&lt;br&gt;symlinks.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#File-Name-Functions&quot;&gt;Functions for File Names&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(error &lt;var&gt;text&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;When this function is evaluated, &lt;code&gt;make&lt;/code&gt; generates a fatal error&lt;br&gt;with the message &lt;var&gt;text&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Make-Control-Functions&quot;&gt;Functions That Control Make&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(warning &lt;var&gt;text&lt;/var&gt;…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;When this function is evaluated, &lt;code&gt;make&lt;/code&gt; generates a warning with&lt;br&gt;the message &lt;var&gt;text&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Make-Control-Functions&quot;&gt;Functions That Control Make&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(shell &lt;var&gt;command&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Execute a shell command and return its output.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Shell-Function&quot;&gt;The &lt;code&gt;shell&lt;/code&gt; Function&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(origin &lt;var&gt;variable&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Return a string describing how the &lt;code&gt;make&lt;/code&gt; variable &lt;var&gt;variable&lt;/var&gt; was&lt;br&gt;defined.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Origin-Function&quot;&gt;The &lt;code&gt;origin&lt;/code&gt; Function&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(flavor &lt;var&gt;variable&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Return a string describing the flavor of the &lt;code&gt;make&lt;/code&gt; variable&lt;br&gt;&lt;var&gt;variable&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Flavor-Function&quot;&gt;The &lt;code&gt;flavor&lt;/code&gt; Function&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(foreach &lt;var&gt;var&lt;/var&gt;,&lt;var&gt;words&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Evaluate &lt;var&gt;text&lt;/var&gt; with &lt;var&gt;var&lt;/var&gt; bound to each word in &lt;var&gt;words&lt;/var&gt;,&lt;br&gt;and concatenate the results.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Foreach-Function&quot;&gt;The &lt;code&gt;foreach&lt;/code&gt; Function&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(if &lt;var&gt;condition&lt;/var&gt;,&lt;var&gt;then-part&lt;/var&gt;[,&lt;var&gt;else-part&lt;/var&gt;])&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Evaluate the condition &lt;var&gt;condition&lt;/var&gt;; if it’s non-empty substitute&lt;br&gt;the expansion of the &lt;var&gt;then-part&lt;/var&gt; otherwise substitute the&lt;br&gt;expansion of the &lt;var&gt;else-part&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Conditional-Functions&quot;&gt;Functions for Conditionals&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(or &lt;var&gt;condition1&lt;/var&gt;[,&lt;var&gt;condition2&lt;/var&gt;[,&lt;var&gt;condition3&lt;/var&gt;…]])&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Evaluate each condition &lt;var&gt;conditionN&lt;/var&gt; one at a time; substitute the&lt;br&gt;first non-empty expansion.  If all expansions are empty, substitute&lt;br&gt;the empty string.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Conditional-Functions&quot;&gt;Functions for Conditionals&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(and &lt;var&gt;condition1&lt;/var&gt;[,&lt;var&gt;condition2&lt;/var&gt;[,&lt;var&gt;condition3&lt;/var&gt;…]])&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Evaluate each condition &lt;var&gt;conditionN&lt;/var&gt; one at a time; if any&lt;br&gt;expansion results in the empty string substitute the empty string.  If&lt;br&gt;all expansions result in a non-empty string, substitute the expansion&lt;br&gt;of the last &lt;var&gt;condition&lt;/var&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Conditional-Functions&quot;&gt;Functions for Conditionals&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(call &lt;var&gt;var&lt;/var&gt;,&lt;var&gt;param&lt;/var&gt;,…)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Evaluate the variable &lt;var&gt;var&lt;/var&gt; replacing any references to &lt;code&gt;$(1)&lt;/code&gt;,&lt;br&gt;&lt;code&gt;$(2)&lt;/code&gt; with the first, second, etc. &lt;var&gt;param&lt;/var&gt; values.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Call-Function&quot;&gt;The &lt;code&gt;call&lt;/code&gt; Function&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(eval &lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Evaluate &lt;var&gt;text&lt;/var&gt; then read the results as makefile commands.&lt;br&gt;Expands to the empty string.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Eval-Function&quot;&gt;The &lt;code&gt;eval&lt;/code&gt; Function&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(file &lt;var&gt;op&lt;/var&gt; &lt;var&gt;filename&lt;/var&gt;,&lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Expand the arguments, then open the file &lt;var&gt;filename&lt;/var&gt; using mode&lt;br&gt;&lt;var&gt;op&lt;/var&gt; and write &lt;var&gt;text&lt;/var&gt; to that file.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#File-Function&quot;&gt;The &lt;code&gt;file&lt;/code&gt; Function&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(value &lt;var&gt;var&lt;/var&gt;)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Evaluates to the contents of the variable &lt;var&gt;var&lt;/var&gt;, with no expansion&lt;br&gt;performed on it.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Value-Function&quot;&gt;The &lt;code&gt;value&lt;/code&gt; Function&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is a summary of the automatic variables.&lt;br&gt;See &lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;,&lt;br&gt;for full information.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$@&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The file name of the target.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$%&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The target member name, when the target is an archive member.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$&amp;lt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The name of the first prerequisite.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$?&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The names of all the prerequisites that are&lt;br&gt;newer than the target, with spaces between them.&lt;br&gt;For prerequisites which are archive members, only&lt;br&gt;the named member is used (see &lt;a href=&quot;#Archives&quot;&gt;Archives&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$^&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$+&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The names of all the prerequisites, with spaces between them.  For&lt;br&gt;prerequisites which are archive members, only the named member is used&lt;br&gt;(see &lt;a href=&quot;#Archives&quot;&gt;Archives&lt;/a&gt;).  The value of &lt;code&gt;$^&lt;/code&gt; omits duplicate&lt;br&gt;prerequisites, while &lt;code&gt;$+&lt;/code&gt; retains them and preserves their order.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The stem with which an implicit rule matches&lt;br&gt;(see &lt;a href=&quot;#Pattern-Match&quot;&gt;How Patterns Match&lt;/a&gt;).&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(@D)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(@F)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory part and the file-within-directory part of &lt;code&gt;$@&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(&lt;em&gt;D)&lt;/em&gt;&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(F)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory part and the file-within-directory part of &lt;code&gt;$&lt;em&gt;&lt;/em&gt;&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(%D)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(%F)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory part and the file-within-directory part of &lt;code&gt;$%&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(&amp;lt;D)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(&amp;lt;F)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory part and the file-within-directory part of &lt;code&gt;$&amp;lt;&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(^D)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(^F)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory part and the file-within-directory part of &lt;code&gt;$^&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(+D)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(+F)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory part and the file-within-directory part of &lt;code&gt;$+&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(?D)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;$(?F)&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;The directory part and the file-within-directory part of &lt;code&gt;$?&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;These variables are used specially by GNU &lt;code&gt;make&lt;/code&gt;:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKEFILES&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;Makefiles to be read on every invocation of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#MAKEFILES-Variable&quot;&gt;The Variable &lt;code&gt;MAKEFILES&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;VPATH&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;Directory search path for files not found in the current directory.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#General-Search&quot;&gt;&lt;code&gt;VPATH&lt;/code&gt; Search Path for All Prerequisites&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;SHELL&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;The name of the system default command interpreter, usually &lt;samp&gt;/bin/sh&lt;/samp&gt;.&lt;br&gt;You can set &lt;code&gt;SHELL&lt;/code&gt; in the makefile to change the shell used to run&lt;br&gt;recipes.  See &lt;a href=&quot;#Execution&quot;&gt;Recipe Execution&lt;/a&gt;.  The &lt;code&gt;SHELL&lt;/code&gt;&lt;br&gt;variable is handled specially when importing from and exporting to the&lt;br&gt;environment.  See &lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKESHELL&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;On MS-DOS only, the name of the command interpreter that is to be used&lt;br&gt;by &lt;code&gt;make&lt;/code&gt;.  This value takes precedence over the value of&lt;br&gt;&lt;code&gt;SHELL&lt;/code&gt;.  See &lt;a href=&quot;#Execution&quot;&gt;MAKESHELL variable&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKE&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;The name with which &lt;code&gt;make&lt;/code&gt; was invoked.  Using this variable in&lt;br&gt;recipes has special meaning.  See &lt;a href=&quot;#MAKE-Variable&quot;&gt;How the&lt;br&gt;&lt;code&gt;MAKE&lt;/code&gt; Variable Works&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKE_VERSION&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;The built-in variable ‘&lt;samp&gt;MAKE_VERSION&lt;/samp&gt;’ expands to the version&lt;br&gt;number of the GNU &lt;code&gt;make&lt;/code&gt; program.&lt;br&gt;&lt;a name=&quot;index-MAKE_005fVERSION&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKE_HOST&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;The built-in variable ‘&lt;samp&gt;MAKE_HOST&lt;/samp&gt;’ expands to a string&lt;br&gt;representing the host that GNU &lt;code&gt;make&lt;/code&gt; was built to run on.&lt;br&gt;&lt;a name=&quot;index-MAKE_005fHOST&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKELEVEL&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;The number of levels of recursion (sub-&lt;code&gt;make&lt;/code&gt;s).&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKEFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;The flags given to &lt;code&gt;make&lt;/code&gt;.  You can set this in the environment or&lt;br&gt;a makefile to set flags.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Options_002fRecursion&quot;&gt;Communicating Options to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;It is &lt;em&gt;never&lt;/em&gt; appropriate to use &lt;code&gt;MAKEFLAGS&lt;/code&gt; directly in a&lt;br&gt;recipe line: its contents may not be quoted correctly for use in the&lt;br&gt;shell.  Always allow recursive &lt;code&gt;make&lt;/code&gt;’s to obtain these values&lt;br&gt;through the environment from its parent.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;GNUMAKEFLAGS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;Other flags parsed by &lt;code&gt;make&lt;/code&gt;.  You can set this in the environment or&lt;br&gt;a makefile to set &lt;code&gt;make&lt;/code&gt; command-line flags.  GNU &lt;code&gt;make&lt;/code&gt;&lt;br&gt;never sets this variable itself.  This variable is only needed if&lt;br&gt;you’d like to set GNU &lt;code&gt;make&lt;/code&gt;-specific flags in a POSIX-compliant&lt;br&gt;makefile.  This variable will be seen by GNU &lt;code&gt;make&lt;/code&gt; and ignored&lt;br&gt;by other &lt;code&gt;make&lt;/code&gt; implementations.  It’s not needed if you only use&lt;br&gt;GNU &lt;code&gt;make&lt;/code&gt;; just use &lt;code&gt;MAKEFLAGS&lt;/code&gt; directly.&lt;br&gt;See &lt;a href=&quot;#Options_002fRecursion&quot;&gt;Communicating Options to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;MAKECMDGOALS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;The targets given to &lt;code&gt;make&lt;/code&gt; on the command line.  Setting this&lt;br&gt;variable has no effect on the operation of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Goals&quot;&gt;Arguments to Specify the Goals&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;CURDIR&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;Set to the absolute pathname of the current working directory (after&lt;br&gt;all &lt;code&gt;-C&lt;/code&gt; options are processed, if any).  Setting this variable&lt;br&gt;has no effect on the operation of &lt;code&gt;make&lt;/code&gt;.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Recursion&quot;&gt;Recursive Use of &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;SUFFIXES&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;br&gt;&lt;p&gt;The default list of suffixes before &lt;code&gt;make&lt;/code&gt; reads any makefiles.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;code&gt;.LIBPATTERNS&lt;/code&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;Defines the naming of the libraries &lt;code&gt;make&lt;/code&gt; searches for, and their&lt;br&gt;order.&lt;br&gt;&lt;br&gt;See &lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Directory Search for Link Libraries&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Error-Messages&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Complex-Makefile&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Complex Makefile&lt;/a&gt;, Previous: &lt;a href=&quot;#Quick-Reference&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Quick Reference&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Errors-Generated-by-Make&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;appendix&quot;&gt;Appendix B Errors Generated by Make&lt;/h2&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is a list of the more common errors you might see generated by&lt;br&gt;&lt;code&gt;make&lt;/code&gt;, and some information about what they mean and how to fix&lt;br&gt;them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Sometimes &lt;code&gt;make&lt;/code&gt; errors are not fatal, especially in the presence&lt;br&gt;of a &lt;code&gt;-&lt;/code&gt; prefix on a recipe line, or the &lt;code&gt;-k&lt;/code&gt; command line&lt;br&gt;option.  Errors that are fatal are prefixed with the string&lt;br&gt;&lt;code&gt;**&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Error messages are all either prefixed with the name of the program&lt;br&gt;(usually ‘&lt;samp&gt;make&lt;/samp&gt;’), or, if the error is found in a makefile, the name&lt;br&gt;of the file and line number containing the problem.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In the table below, these common prefixes are left off.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;dl compact=&quot;compact&quot;&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;[&lt;var&gt;foo&lt;/var&gt;] Error &lt;var&gt;NN&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;[&lt;var&gt;foo&lt;/var&gt;] &lt;var&gt;signal description&lt;/var&gt;&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;These errors are not really &lt;code&gt;make&lt;/code&gt; errors at all.  They mean that a&lt;br&gt;program that &lt;code&gt;make&lt;/code&gt; invoked as part of a recipe returned a&lt;br&gt;non-0 error code (‘&lt;samp&gt;Error &lt;var&gt;NN&lt;/var&gt;&lt;/samp&gt;’), which &lt;code&gt;make&lt;/code&gt; interprets&lt;br&gt;as failure, or it exited in some other abnormal fashion (with a&lt;br&gt;signal of some type).  See &lt;a href=&quot;#Errors&quot;&gt;Errors in Recipes&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If no &lt;code&gt;&lt;em&gt;**&lt;/em&gt;&lt;/code&gt; is attached to the message, then the sub-process failed&lt;br&gt;but the rule in the makefile was prefixed with the &lt;code&gt;-&lt;/code&gt; special&lt;br&gt;character, so &lt;code&gt;make&lt;/code&gt; ignored the error.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;missing separator.  Stop.&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;missing separator (did you mean TAB instead of 8 spaces?).  Stop.&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;This means that &lt;code&gt;make&lt;/code&gt; could not understand much of anything&lt;br&gt;about the makefile line it just read.  GNU &lt;code&gt;make&lt;/code&gt; looks for&lt;br&gt;various separators (&lt;code&gt;:&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, recipe prefix characters,&lt;br&gt;etc.) to indicate what kind of line it’s parsing.  This message means&lt;br&gt;it couldn’t find a valid one.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;One of the most common reasons for this message is that you (or&lt;br&gt;perhaps your oh-so-helpful editor, as is the case with many MS-Windows&lt;br&gt;editors) have attempted to indent your recipe lines with spaces&lt;br&gt;instead of a tab character.  In this case, &lt;code&gt;make&lt;/code&gt; will use the&lt;br&gt;second form of the error above.  Remember that every line in the&lt;br&gt;recipe must begin with a tab character (unless you set&lt;br&gt;&lt;code&gt;.RECIPEPREFIX&lt;/code&gt;; see &lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;).  Eight spaces do not&lt;br&gt;count.  See &lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;recipe commences before first target.  Stop.&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;missing rule before recipe.  Stop.&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;This means the first thing in the makefile seems to be part of a&lt;br&gt;recipe: it begins with a recipe prefix character and doesn’t appear to&lt;br&gt;be a legal &lt;code&gt;make&lt;/code&gt; directive (such as a variable assignment).&lt;br&gt;Recipes must always be associated with a target.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The second form is generated if the line has a semicolon as the first&lt;br&gt;non-whitespace character; &lt;code&gt;make&lt;/code&gt; interprets this to mean you left&lt;br&gt;out the “target: prerequisite” section of a rule.  See &lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;No rule to make target &lt;code&gt;&amp;lt;var&amp;gt;xxx&amp;lt;/var&amp;gt;&amp;#39;.&amp;lt;/samp&amp;gt;’&amp;lt;/dt&amp;gt;
&amp;lt;dt&amp;gt;‘&amp;lt;samp&amp;gt;No rule to make target&lt;/code&gt;&lt;var&gt;xxx&lt;/var&gt;‘, needed by &lt;code&gt;&amp;lt;var&amp;gt;yyy&amp;lt;/var&amp;gt;&amp;#39;.&amp;lt;/samp&amp;gt;’&amp;lt;/dt&amp;gt;
&amp;lt;dd&amp;gt;&amp;lt;p&amp;gt;This means that &amp;lt;code&amp;gt;make&amp;lt;/code&amp;gt; decided it needed to build a target, but
then couldn’t find any instructions in the makefile on how to do that,
either explicit or implicit (including in the default rules database).
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;If you want that file to be built, you will need to add a rule to your
makefile describing how that target can be built.  Other possible
sources of this problem are typos in the makefile (if that file name is
wrong) or a corrupted source tree (if that file is not supposed to be
built, but rather only a prerequisite).
&amp;lt;/p&amp;gt;
&amp;lt;/dd&amp;gt;
&amp;lt;dt&amp;gt;‘&amp;lt;samp&amp;gt;No targets specified and no makefile found.  Stop.&amp;lt;/samp&amp;gt;’&amp;lt;/dt&amp;gt;
&amp;lt;dt&amp;gt;‘&amp;lt;samp&amp;gt;No targets.  Stop.&amp;lt;/samp&amp;gt;’&amp;lt;/dt&amp;gt;
&amp;lt;dd&amp;gt;&amp;lt;p&amp;gt;The former means that you didn’t provide any targets to be built on the
command line, and &amp;lt;code&amp;gt;make&amp;lt;/code&amp;gt; couldn’t find any makefiles to read in.
The latter means that some makefile was found, but it didn’t contain any
default goal and none was given on the command line.  GNU &amp;lt;code&amp;gt;make&amp;lt;/code&amp;gt;
has nothing to do in these situations.
See &amp;lt;a href=&amp;quot;#Makefile-Arguments&amp;quot;&amp;gt;Arguments to Specify the Makefile&amp;lt;/a&amp;gt;.
&amp;lt;/p&amp;gt;
&amp;lt;/dd&amp;gt;
&amp;lt;dt&amp;gt;‘&amp;lt;samp&amp;gt;Makefile&lt;/code&gt;&lt;var&gt;xxx&lt;/var&gt;‘ was not found.&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;Included makefile &lt;code&gt;&amp;lt;var&amp;gt;xxx&amp;lt;/var&amp;gt;&amp;#39; was not found.&amp;lt;/samp&amp;gt;’&amp;lt;/dt&amp;gt;
&amp;lt;dd&amp;gt;&amp;lt;p&amp;gt;A makefile specified on the command line (first form) or included
(second form) was not found.
&amp;lt;/p&amp;gt;
&amp;lt;/dd&amp;gt;
&amp;lt;dt&amp;gt;‘&amp;lt;samp&amp;gt;warning: overriding recipe for target&lt;/code&gt;&lt;var&gt;xxx&lt;/var&gt;‘&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;warning: ignoring old recipe for target &lt;code&gt;&amp;lt;var&amp;gt;xxx&amp;lt;/var&amp;gt;&amp;#39;&amp;lt;/samp&amp;gt;’&amp;lt;/dt&amp;gt;
&amp;lt;dd&amp;gt;&amp;lt;p&amp;gt;GNU &amp;lt;code&amp;gt;make&amp;lt;/code&amp;gt; allows only one recipe to be specified per target
(except for double-colon rules).  If you give a recipe for a target
which already has been defined to have one, this warning is issued and
the second recipe will overwrite the first.  See &amp;lt;a href=&amp;quot;#Multiple-Rules&amp;quot;&amp;gt;Multiple Rules for One Target&amp;lt;/a&amp;gt;.
&amp;lt;/p&amp;gt;
&amp;lt;/dd&amp;gt;
&amp;lt;dt&amp;gt;‘&amp;lt;samp&amp;gt;Circular &amp;lt;var&amp;gt;xxx&amp;lt;/var&amp;gt; &amp;amp;lt;- &amp;lt;var&amp;gt;yyy&amp;lt;/var&amp;gt; dependency dropped.&amp;lt;/samp&amp;gt;’&amp;lt;/dt&amp;gt;
&amp;lt;dd&amp;gt;&amp;lt;p&amp;gt;This means that &amp;lt;code&amp;gt;make&amp;lt;/code&amp;gt; detected a loop in the dependency graph:
after tracing the prerequisite &amp;lt;var&amp;gt;yyy&amp;lt;/var&amp;gt; of target &amp;lt;var&amp;gt;xxx&amp;lt;/var&amp;gt;, and its
prerequisites, etc., one of them depended on &amp;lt;var&amp;gt;xxx&amp;lt;/var&amp;gt; again.
&amp;lt;/p&amp;gt;
&amp;lt;/dd&amp;gt;
&amp;lt;dt&amp;gt;‘&amp;lt;samp&amp;gt;Recursive variable&lt;/code&gt;&lt;var&gt;xxx&lt;/var&gt;‘ references itself (eventually).  Stop.&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;This means you’ve defined a normal (recursive) &lt;code&gt;make&lt;/code&gt; variable&lt;br&gt;&lt;var&gt;xxx&lt;/var&gt; that, when it’s expanded, will refer to itself (&lt;var&gt;xxx&lt;/var&gt;).&lt;br&gt;This is not allowed; either use simply-expanded variables (‘&lt;samp&gt;:=&lt;/samp&gt;’&lt;br&gt;or ‘&lt;samp&gt;::=&lt;/samp&gt;’) or use the append operator (‘&lt;samp&gt;+=&lt;/samp&gt;’).  See &lt;a href=&quot;#Using-Variables&quot;&gt;How to Use Variables&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;Unterminated variable reference.  Stop.&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;This means you forgot to provide the proper closing parenthesis&lt;br&gt;or brace in your variable or function reference.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;insufficient arguments to function &lt;code&gt;&amp;lt;var&amp;gt;xxx&amp;lt;/var&amp;gt;&amp;#39;.  Stop.&amp;lt;/samp&amp;gt;’&amp;lt;/dt&amp;gt;
&amp;lt;dd&amp;gt;&amp;lt;p&amp;gt;This means you haven’t provided the requisite number of arguments for
this function.  See the documentation of the function for a description
of its arguments.  See &amp;lt;a href=&amp;quot;#Functions&amp;quot;&amp;gt;Functions for Transforming Text&amp;lt;/a&amp;gt;.
&amp;lt;/p&amp;gt;
&amp;lt;/dd&amp;gt;
&amp;lt;dt&amp;gt;‘&amp;lt;samp&amp;gt;missing target pattern.  Stop.&amp;lt;/samp&amp;gt;’&amp;lt;/dt&amp;gt;
&amp;lt;dt&amp;gt;‘&amp;lt;samp&amp;gt;multiple target patterns.  Stop.&amp;lt;/samp&amp;gt;’&amp;lt;/dt&amp;gt;
&amp;lt;dt&amp;gt;‘&amp;lt;samp&amp;gt;target pattern contains no&lt;/code&gt;%’.  Stop.&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;mixed implicit and static pattern rules.  Stop.&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;These are generated for malformed static pattern rules.  The first&lt;br&gt;means there’s no pattern in the target section of the rule; the second&lt;br&gt;means there are multiple patterns in the target section; the third&lt;br&gt;means the target doesn’t contain a pattern character (&lt;code&gt;%&lt;/code&gt;); and&lt;br&gt;the fourth means that all three parts of the static pattern rule&lt;br&gt;contain pattern characters (&lt;code&gt;%&lt;/code&gt;)–only the first two parts&lt;br&gt;should.  If you see these errors and you aren’t trying to create a&lt;br&gt;static pattern rule, check the value of any variables in your target&lt;br&gt;and prerequisite lists to be sure they do not contain colons.&lt;br&gt;See &lt;a href=&quot;#Static-Usage&quot;&gt;Syntax of Static Pattern Rules&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;warning: -jN forced in submake: disabling jobserver mode.&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;This warning and the next are generated if &lt;code&gt;make&lt;/code&gt; detects error&lt;br&gt;conditions related to parallel processing on systems where&lt;br&gt;sub-&lt;code&gt;make&lt;/code&gt;s can communicate (see &lt;a href=&quot;#Options_002fRecursion&quot;&gt;Communicating Options to a Sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;).  This warning is&lt;br&gt;generated if a recursive invocation of a &lt;code&gt;make&lt;/code&gt; process is forced&lt;br&gt;to have ‘&lt;samp&gt;-j&lt;var&gt;N&lt;/var&gt;&lt;/samp&gt;’ in its argument list (where &lt;var&gt;N&lt;/var&gt; is greater&lt;br&gt;than one).  This could happen, for example, if you set the &lt;code&gt;MAKE&lt;/code&gt;&lt;br&gt;environment variable to ‘&lt;samp&gt;make -j2&lt;/samp&gt;’.  In this case, the&lt;br&gt;sub-&lt;code&gt;make&lt;/code&gt; doesn’t communicate with other &lt;code&gt;make&lt;/code&gt; processes and&lt;br&gt;will simply pretend it has two jobs of its own.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;‘&lt;samp&gt;warning: jobserver unavailable: using -j1.  Add `+’ to parent make rule.&lt;/samp&gt;’&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;In order for &lt;code&gt;make&lt;/code&gt; processes to communicate, the parent will pass&lt;br&gt;information to the child.  Since this could result in problems if the&lt;br&gt;child process isn’t actually a &lt;code&gt;make&lt;/code&gt;, the parent will only do this&lt;br&gt;if it thinks the child is a &lt;code&gt;make&lt;/code&gt;.  The parent uses the normal&lt;br&gt;algorithms to determine this (see &lt;a href=&quot;#MAKE-Variable&quot;&gt;How the &lt;code&gt;MAKE&lt;/code&gt;&lt;br&gt;Variable Works&lt;/a&gt;).  If the makefile is constructed such that the parent&lt;br&gt;doesn’t know the child is a &lt;code&gt;make&lt;/code&gt; process, then the child will&lt;br&gt;receive only part of the information necessary.  In this case, the child&lt;br&gt;will generate this warning message and proceed with its build in a&lt;br&gt;sequential manner.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Complex-Makefile&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#GNU-Free-Documentation-License&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;GNU Free Documentation License&lt;/a&gt;, Previous: &lt;a href=&quot;#Error-Messages&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Error Messages&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;Complex-Makefile-Example&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h2 class=&quot;appendix&quot;&gt;Appendix C Complex Makefile Example&lt;/h2&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Here is the makefile for the GNU &lt;code&gt;tar&lt;/code&gt; program.  This is a&lt;br&gt;moderately complex makefile.  The first line uses a &lt;code&gt;#!&lt;/code&gt; setting&lt;br&gt;to allow the makefile to be executed directly.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Because it is the first target, the default goal is ‘&lt;samp&gt;all&lt;/samp&gt;’.  An&lt;br&gt;interesting feature of this makefile is that &lt;samp&gt;testpad.h&lt;/samp&gt; is a&lt;br&gt;source file automatically created by the &lt;code&gt;testpad&lt;/code&gt; program,&lt;br&gt;itself compiled from &lt;samp&gt;testpad.c&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you type ‘&lt;samp&gt;make&lt;/samp&gt;’ or ‘&lt;samp&gt;make all&lt;/samp&gt;’, then &lt;code&gt;make&lt;/code&gt; creates&lt;br&gt;the &lt;samp&gt;tar&lt;/samp&gt; executable, the &lt;samp&gt;rmt&lt;/samp&gt; daemon that provides&lt;br&gt;remote tape access, and the &lt;samp&gt;tar.info&lt;/samp&gt; Info file.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you type ‘&lt;samp&gt;make install&lt;/samp&gt;’, then &lt;code&gt;make&lt;/code&gt; not only creates&lt;br&gt;&lt;samp&gt;tar&lt;/samp&gt;, &lt;samp&gt;rmt&lt;/samp&gt;, and &lt;samp&gt;tar.info&lt;/samp&gt;, but also installs&lt;br&gt;them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you type ‘&lt;samp&gt;make clean&lt;/samp&gt;’, then &lt;code&gt;make&lt;/code&gt; removes the ‘&lt;samp&gt;.o&lt;/samp&gt;’&lt;br&gt;files, and the &lt;samp&gt;tar&lt;/samp&gt;, &lt;samp&gt;rmt&lt;/samp&gt;, &lt;samp&gt;testpad&lt;/samp&gt;,&lt;br&gt;&lt;samp&gt;testpad.h&lt;/samp&gt;, and &lt;samp&gt;core&lt;/samp&gt; files.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you type ‘&lt;samp&gt;make distclean&lt;/samp&gt;’, then &lt;code&gt;make&lt;/code&gt; not only removes&lt;br&gt;the same files as does ‘&lt;samp&gt;make clean&lt;/samp&gt;’ but also the&lt;br&gt;&lt;samp&gt;TAGS&lt;/samp&gt;, &lt;samp&gt;Makefile&lt;/samp&gt;, and &lt;samp&gt;config.status&lt;/samp&gt; files.&lt;br&gt;(Although it is not evident, this makefile (and&lt;br&gt;&lt;samp&gt;config.status&lt;/samp&gt;) is generated by the user with the&lt;br&gt;&lt;code&gt;configure&lt;/code&gt; program, which is provided in the &lt;code&gt;tar&lt;/code&gt;&lt;br&gt;distribution, but is not shown here.)&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you type ‘&lt;samp&gt;make realclean&lt;/samp&gt;’, then &lt;code&gt;make&lt;/code&gt; removes the same&lt;br&gt;files as does ‘&lt;samp&gt;make distclean&lt;/samp&gt;’ and also removes the Info files&lt;br&gt;generated from &lt;samp&gt;tar.texinfo&lt;/samp&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In addition, there are targets &lt;code&gt;shar&lt;/code&gt; and &lt;code&gt;dist&lt;/code&gt; that create&lt;br&gt;distribution kits.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;example&quot;&gt;&lt;br&gt;&lt;pre class=&quot;example&quot;&gt;#!/usr/bin/make -f&lt;br&gt;# Generated automatically from Makefile.in by configure.&lt;br&gt;# Unx Makefile for GNU tar program.&lt;br&gt;# Copyright (C) 1991 Free Software Foundation, Inc.&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;# This program is free software; you can redistribute&lt;br&gt;# it and/or modify it under the terms of the GNU&lt;br&gt;# General Public License …&lt;br&gt;…&lt;br&gt;…&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;SHELL = /bin/sh&lt;br&gt;&lt;br&gt;#### Start of system configuration section. ####&lt;br&gt;&lt;br&gt;srcdir = .&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;# If you use gcc, you should either run the&lt;br&gt;# fixincludes script that comes with it or else use&lt;br&gt;# gcc with the -traditional option.  Otherwise ioctl&lt;br&gt;# calls will be compiled incorrectly on some systems.&lt;br&gt;CC = gcc -O&lt;br&gt;YACC = bison -y&lt;br&gt;INSTALL = /usr/local/bin/install -c&lt;br&gt;INSTALLDATA = /usr/local/bin/install -c -m 644&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;# Things you might add to DEFS:&lt;br&gt;# -DSTDC_HEADERS        If you have ANSI C headers and&lt;br&gt;#                       libraries.&lt;br&gt;# -DPOSIX               If you have POSIX.1 headers and&lt;br&gt;#                       libraries.&lt;br&gt;# -DBSD42               If you have sys/dir.h (unless&lt;br&gt;#                       you use -DPOSIX), sys/file.h,&lt;br&gt;#                       and st_blocks in &lt;code&gt;struct stat&amp;#39;.
# -DUSG                 If you have System V/ANSI C
#                       string and memory functions
#                       and headers, sys/sysmacros.h,
#                       fcntl.h, getcwd, no valloc,
#                       and ndir.h (unless
#                       you use -DDIRENT).
# -DNO_MEMORY_H         If USG or STDC_HEADERS but do not
#                       include memory.h.
# -DDIRENT              If USG and you have dirent.h
#                       instead of ndir.h.
# -DSIGTYPE=int         If your signal handlers
#                       return int, not void.
# -DNO_MTIO             If you lack sys/mtio.h
#                       (magtape ioctls).
# -DNO_REMOTE           If you do not have a remote shell
#                       or rexec.
# -DUSE_REXEC           To use rexec for remote tape
#                       operations instead of
#                       forking rsh or remsh.
# -DVPRINTF_MISSING     If you lack vprintf function
#                       (but have _doprnt).
# -DDOPRNT_MISSING      If you lack _doprnt function.
#                       Also need to define
#                       -DVPRINTF_MISSING.
# -DFTIME_MISSING       If you lack ftime system call.
# -DSTRSTR_MISSING      If you lack strstr function.
# -DVALLOC_MISSING      If you lack valloc function.
# -DMKDIR_MISSING       If you lack mkdir and
#                       rmdir system calls.
# -DRENAME_MISSING      If you lack rename system call.
# -DFTRUNCATE_MISSING   If you lack ftruncate
#                       system call.
# -DV7                  On Version 7 Unix (not
#                       tested in a long time).
# -DEMUL_OPEN3          If you lack a 3-argument version
#                       of open, and want to emulate it
#                       with system calls you do have.
# -DNO_OPEN3            If you lack the 3-argument open
#                       and want to disable the tar -k
#                       option instead of emulating open.
# -DXENIX               If you have sys/inode.h
#                       and need it 94 to be included.

DEFS =  -DSIGTYPE=int -DDIRENT -DSTRSTR_MISSING \
        -DVPRINTF_MISSING -DBSD42
# Set this to rtapelib.o unless you defined NO_REMOTE,
# in which case make it empty.
RTAPELIB = rtapelib.o
LIBS =
DEF_AR_FILE = /dev/rmt8
DEFBLOCKING = 20

&amp;lt;/pre&amp;gt;&amp;lt;pre class=&amp;quot;example&amp;quot;&amp;gt;CDEBUG = -g
CFLAGS = $(CDEBUG) -I. -I$(srcdir) $(DEFS) \
        -DDEF_AR_FILE=\&amp;quot;$(DEF_AR_FILE)\&amp;quot; \
        -DDEFBLOCKING=$(DEFBLOCKING)
LDFLAGS = -g
&amp;lt;/pre&amp;gt;&amp;lt;pre class=&amp;quot;example&amp;quot;&amp;gt;
&amp;lt;/pre&amp;gt;&amp;lt;pre class=&amp;quot;example&amp;quot;&amp;gt;prefix = /usr/local
# Prefix for each installed program,
# normally empty or&lt;/code&gt;g’.&lt;br&gt;binprefix =&lt;br&gt;&lt;br&gt;# The directory to install tar in.&lt;br&gt;bindir = $(prefix)/bin&lt;br&gt;&lt;br&gt;# The directory to install the info files in.&lt;br&gt;infodir = $(prefix)/info&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;#### End of system configuration section. ####&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;SRCS_C  = tar.c create.c extract.c buffer.c   \&lt;br&gt;          getoldopt.c update.c gnu.c mangle.c \&lt;br&gt;          version.c list.c names.c diffarch.c \&lt;br&gt;          port.c wildmat.c getopt.c getopt1.c \&lt;br&gt;          regex.c&lt;br&gt;SRCS_Y  = getdate.y&lt;br&gt;SRCS    = $(SRCS_C) $(SRCS_Y)&lt;br&gt;OBJS    = $(SRCS_C:.c=.o) $(SRCS_Y:.y=.o) $(RTAPELIB)&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;AUX =   README COPYING ChangeLog Makefile.in  \&lt;br&gt;        makefile.pc configure configure.in \&lt;br&gt;        tar.texinfo tar.info&lt;em&gt; texinfo.tex \&lt;br&gt;        tar.h port.h open3.h getopt.h regex.h \&lt;br&gt;        rmt.h rmt.c rtapelib.c alloca.c \&lt;br&gt;        msd_dir.h msd_dir.c tcexparg.c \&lt;br&gt;        level-0 level-1 backup-specs testpad.c&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;.PHONY: all&lt;br&gt;all:    tar rmt tar.info&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;tar:    $(OBJS)&lt;br&gt;        $(CC) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;rmt:    rmt.c&lt;br&gt;        $(CC) $(CFLAGS) $(LDFLAGS) -o $@ rmt.c&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;tar.info: tar.texinfo&lt;br&gt;        makeinfo tar.texinfo&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;.PHONY: install&lt;br&gt;install: all&lt;br&gt;        $(INSTALL) tar $(bindir)/$(binprefix)tar&lt;br&gt;        -test ! -f rmt || $(INSTALL) rmt /etc/rmt&lt;br&gt;        $(INSTALLDATA) $(srcdir)/tar.info $(infodir)&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;$(OBJS): tar.h port.h testpad.h&lt;br&gt;regex.o buffer.o tar.o: regex.h&lt;br&gt;# getdate.y has 8 shift/reduce conflicts.&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;testpad.h: testpad&lt;br&gt;        ./testpad&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;testpad: testpad.o&lt;br&gt;        $(CC) -o $@ testpad.o&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;TAGS:   $(SRCS)&lt;br&gt;        etags $(SRCS)&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;.PHONY: clean&lt;br&gt;clean:&lt;br&gt;        rm -f &lt;em&gt;.o tar rmt testpad testpad.h core&lt;br&gt;&lt;/em&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;.PHONY: distclean&lt;br&gt;distclean: clean&lt;br&gt;        rm -f TAGS Makefile config.status&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;.PHONY: realclean&lt;br&gt;realclean: distclean&lt;br&gt;        rm -f tar.info&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;.PHONY: shar&lt;br&gt;shar: $(SRCS) $(AUX)&lt;br&gt;        shar $(SRCS) $(AUX) | compress \&lt;br&gt;          &amp;gt; tar-&lt;code&gt;sed -e &amp;#39;/version_string/!d&amp;#39; \
                     -e &amp;#39;s/[^0-9.]*\([0-9.]*\).*/\1/&amp;#39; \
                     -e q
                     version.c&lt;/code&gt;.shar.Z&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;.PHONY: dist&lt;br&gt;dist: $(SRCS) $(AUX)&lt;br&gt;        echo tar-&lt;code&gt;sed \
             -e &amp;#39;/version_string/!d&amp;#39; \
             -e &amp;#39;s/[^0-9.]*\([0-9.]*\).*/\1/&amp;#39; \
             -e q
             version.c&lt;/code&gt; &amp;gt; .fname&lt;br&gt;        -rm -rf &lt;code&gt;cat .fname&lt;/code&gt;&lt;br&gt;        mkdir &lt;code&gt;cat .fname&lt;/code&gt;&lt;br&gt;        ln $(SRCS) $(AUX) &lt;code&gt;cat .fname&lt;/code&gt;&lt;br&gt;        tar chZf &lt;code&gt;cat .fname&lt;/code&gt;.tar.Z &lt;code&gt;cat .fname&lt;/code&gt;&lt;br&gt;        -rm -rf &lt;code&gt;cat .fname&lt;/code&gt; .fname&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre class=&quot;example&quot;&gt;tar.zoo: $(SRCS) $(AUX)&lt;br&gt;        -rm -rf tmp.dir&lt;br&gt;        -mkdir tmp.dir&lt;br&gt;        -rm tar.zoo&lt;br&gt;        for X in $(SRCS) $(AUX) ; do \&lt;br&gt;            echo $$X ; \&lt;br&gt;            sed ‘s/$$/^M/‘ $$X \&lt;br&gt;            &amp;gt; tmp.dir/$$X ; done&lt;br&gt;        cd tmp.dir ; zoo aM ../tar.zoo *&lt;br&gt;        -rm -rf tmp.dir&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;GNU-Free-Documentation-License&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;header&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Concept-Index&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Concept Index&lt;/a&gt;, Previous: &lt;a href=&quot;#Complex-Makefile&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Complex Makefile&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;a name=&quot;GNU-Free-Documentation-License-1&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;appendixsec&quot;&gt;C.1 GNU Free Documentation License&lt;/h3&gt;&lt;br&gt;&lt;a name=&quot;index-FDL_002c-GNU-Free-Documentation-License&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;div align=&quot;center&quot;&gt;Version 1.3, 3 November 2008&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;div class=&quot;display&quot;&gt;&lt;br&gt;&lt;pre class=&quot;display&quot;&gt;Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.&lt;br&gt;&lt;a href=&quot;http://fsf.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://fsf.org/&lt;/a&gt;&lt;br&gt;&lt;br&gt;Everyone is permitted to copy and distribute verbatim copies&lt;br&gt;of this license document, but changing it is not allowed.&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;br&gt;&lt;li&gt; PREAMBLE&lt;br&gt;&lt;br&gt;&lt;p&gt;The purpose of this License is to make a manual, textbook, or other&lt;br&gt;functional and useful document &lt;em&gt;free&lt;/em&gt; in the sense of freedom: to&lt;br&gt;assure everyone the effective freedom to copy and redistribute it,&lt;br&gt;with or without modifying it, either commercially or noncommercially.&lt;br&gt;Secondarily, this License preserves for the author and publisher a way&lt;br&gt;to get credit for their work, while not being considered responsible&lt;br&gt;for modifications made by others.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;This License is a kind of “copyleft”, which means that derivative&lt;br&gt;works of the document must themselves be free in the same sense.  It&lt;br&gt;complements the GNU General Public License, which is a copyleft&lt;br&gt;license designed for free software.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;We have designed this License in order to use it for manuals for free&lt;br&gt;software, because free software needs free documentation: a free&lt;br&gt;program should come with manuals providing the same freedoms that the&lt;br&gt;software does.  But this License is not limited to software manuals;&lt;br&gt;it can be used for any textual work, regardless of subject matter or&lt;br&gt;whether it is published as a printed book.  We recommend this License&lt;br&gt;principally for works whose purpose is instruction or reference.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; APPLICABILITY AND DEFINITIONS&lt;br&gt;&lt;br&gt;&lt;p&gt;This License applies to any manual or other work, in any medium, that&lt;br&gt;contains a notice placed by the copyright holder saying it can be&lt;br&gt;distributed under the terms of this License.  Such a notice grants a&lt;br&gt;world-wide, royalty-free license, unlimited in duration, to use that&lt;br&gt;work under the conditions stated herein.  The “Document”, below,&lt;br&gt;refers to any such manual or work.  Any member of the public is a&lt;br&gt;licensee, and is addressed as “you”.  You accept the license if you&lt;br&gt;copy, modify or distribute the work in a way requiring permission&lt;br&gt;under copyright law.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A “Modified Version” of the Document means any work containing the&lt;br&gt;Document or a portion of it, either copied verbatim, or with&lt;br&gt;modifications and/or translated into another language.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A “Secondary Section” is a named appendix or a front-matter section&lt;br&gt;of the Document that deals exclusively with the relationship of the&lt;br&gt;publishers or authors of the Document to the Document’s overall&lt;br&gt;subject (or to related matters) and contains nothing that could fall&lt;br&gt;directly within that overall subject.  (Thus, if the Document is in&lt;br&gt;part a textbook of mathematics, a Secondary Section may not explain&lt;br&gt;any mathematics.)  The relationship could be a matter of historical&lt;br&gt;connection with the subject or with related matters, or of legal,&lt;br&gt;commercial, philosophical, ethical or political position regarding&lt;br&gt;them.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The “Invariant Sections” are certain Secondary Sections whose titles&lt;br&gt;are designated, as being those of Invariant Sections, in the notice&lt;br&gt;that says that the Document is released under this License.  If a&lt;br&gt;section does not fit the above definition of Secondary then it is not&lt;br&gt;allowed to be designated as Invariant.  The Document may contain zero&lt;br&gt;Invariant Sections.  If the Document does not identify any Invariant&lt;br&gt;Sections then there are none.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The “Cover Texts” are certain short passages of text that are listed,&lt;br&gt;as Front-Cover Texts or Back-Cover Texts, in the notice that says that&lt;br&gt;the Document is released under this License.  A Front-Cover Text may&lt;br&gt;be at most 5 words, and a Back-Cover Text may be at most 25 words.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A “Transparent” copy of the Document means a machine-readable copy,&lt;br&gt;represented in a format whose specification is available to the&lt;br&gt;general public, that is suitable for revising the document&lt;br&gt;straightforwardly with generic text editors or (for images composed of&lt;br&gt;pixels) generic paint programs or (for drawings) some widely available&lt;br&gt;drawing editor, and that is suitable for input to text formatters or&lt;br&gt;for automatic translation to a variety of formats suitable for input&lt;br&gt;to text formatters.  A copy made in an otherwise Transparent file&lt;br&gt;format whose markup, or absence of markup, has been arranged to thwart&lt;br&gt;or discourage subsequent modification by readers is not Transparent.&lt;br&gt;An image format is not Transparent if used for any substantial amount&lt;br&gt;of text.  A copy that is not “Transparent” is called “Opaque”.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Examples of suitable formats for Transparent copies include plain&lt;br&gt;ASCII without markup, Texinfo input format, LaTeX input&lt;br&gt;format, SGML or XML using a publicly available&lt;br&gt;DTD, and standard-conforming simple HTML,&lt;br&gt;PostScript or PDF designed for human modification.  Examples&lt;br&gt;of transparent image formats include PNG, XCF and&lt;br&gt;JPG.  Opaque formats include proprietary formats that can be&lt;br&gt;read and edited only by proprietary word processors, SGML or&lt;br&gt;XML for which the DTD and/or processing tools are&lt;br&gt;not generally available, and the machine-generated HTML,&lt;br&gt;PostScript or PDF produced by some word processors for&lt;br&gt;output purposes only.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The “Title Page” means, for a printed book, the title page itself,&lt;br&gt;plus such following pages as are needed to hold, legibly, the material&lt;br&gt;this License requires to appear in the title page.  For works in&lt;br&gt;formats which do not have any title page as such, “Title Page” means&lt;br&gt;the text near the most prominent appearance of the work’s title,&lt;br&gt;preceding the beginning of the body of the text.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The “publisher” means any person or entity that distributes copies&lt;br&gt;of the Document to the public.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;A section “Entitled XYZ” means a named subunit of the Document whose&lt;br&gt;title either is precisely XYZ or contains XYZ in parentheses following&lt;br&gt;text that translates XYZ in another language.  (Here XYZ stands for a&lt;br&gt;specific section name mentioned below, such as “Acknowledgements”,&lt;br&gt;“Dedications”, “Endorsements”, or “History”.)  To “Preserve the Title”&lt;br&gt;of such a section when you modify the Document means that it remains a&lt;br&gt;section “Entitled XYZ” according to this definition.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The Document may include Warranty Disclaimers next to the notice which&lt;br&gt;states that this License applies to the Document.  These Warranty&lt;br&gt;Disclaimers are considered to be included by reference in this&lt;br&gt;License, but only as regards disclaiming warranties: any other&lt;br&gt;implication that these Warranty Disclaimers may have is void and has&lt;br&gt;no effect on the meaning of this License.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; VERBATIM COPYING&lt;br&gt;&lt;br&gt;&lt;p&gt;You may copy and distribute the Document in any medium, either&lt;br&gt;commercially or noncommercially, provided that this License, the&lt;br&gt;copyright notices, and the license notice saying this License applies&lt;br&gt;to the Document are reproduced in all copies, and that you add no other&lt;br&gt;conditions whatsoever to those of this License.  You may not use&lt;br&gt;technical measures to obstruct or control the reading or further&lt;br&gt;copying of the copies you make or distribute.  However, you may accept&lt;br&gt;compensation in exchange for copies.  If you distribute a large enough&lt;br&gt;number of copies you must also follow the conditions in section 3.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You may also lend copies, under the same conditions stated above, and&lt;br&gt;you may publicly display copies.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; COPYING IN QUANTITY&lt;br&gt;&lt;br&gt;&lt;p&gt;If you publish printed copies (or copies in media that commonly have&lt;br&gt;printed covers) of the Document, numbering more than 100, and the&lt;br&gt;Document’s license notice requires Cover Texts, you must enclose the&lt;br&gt;copies in covers that carry, clearly and legibly, all these Cover&lt;br&gt;Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on&lt;br&gt;the back cover.  Both covers must also clearly and legibly identify&lt;br&gt;you as the publisher of these copies.  The front cover must present&lt;br&gt;the full title with all words of the title equally prominent and&lt;br&gt;visible.  You may add other material on the covers in addition.&lt;br&gt;Copying with changes limited to the covers, as long as they preserve&lt;br&gt;the title of the Document and satisfy these conditions, can be treated&lt;br&gt;as verbatim copying in other respects.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the required texts for either cover are too voluminous to fit&lt;br&gt;legibly, you should put the first ones listed (as many as fit&lt;br&gt;reasonably) on the actual cover, and continue the rest onto adjacent&lt;br&gt;pages.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If you publish or distribute Opaque copies of the Document numbering&lt;br&gt;more than 100, you must either include a machine-readable Transparent&lt;br&gt;copy along with each Opaque copy, or state in or with each Opaque copy&lt;br&gt;a computer-network location from which the general network-using&lt;br&gt;public has access to download using public-standard network protocols&lt;br&gt;a complete Transparent copy of the Document, free of added material.&lt;br&gt;If you use the latter option, you must take reasonably prudent steps,&lt;br&gt;when you begin distribution of Opaque copies in quantity, to ensure&lt;br&gt;that this Transparent copy will remain thus accessible at the stated&lt;br&gt;location until at least one year after the last time you distribute an&lt;br&gt;Opaque copy (directly or through your agents or retailers) of that&lt;br&gt;edition to the public.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;It is requested, but not required, that you contact the authors of the&lt;br&gt;Document well before redistributing any large number of copies, to give&lt;br&gt;them a chance to provide you with an updated version of the Document.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; MODIFICATIONS&lt;br&gt;&lt;br&gt;&lt;p&gt;You may copy and distribute a Modified Version of the Document under&lt;br&gt;the conditions of sections 2 and 3 above, provided that you release&lt;br&gt;the Modified Version under precisely this License, with the Modified&lt;br&gt;Version filling the role of the Document, thus licensing distribution&lt;br&gt;and modification of the Modified Version to whoever possesses a copy&lt;br&gt;of it.  In addition, you must do these things in the Modified Version:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;ol&gt;&lt;br&gt;&lt;li&gt; Use in the Title Page (and on the covers, if any) a title distinct&lt;br&gt;from that of the Document, and from those of previous versions&lt;br&gt;(which should, if there were any, be listed in the History section&lt;br&gt;of the Document).  You may use the same title as a previous version&lt;br&gt;if the original publisher of that version gives permission.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; List on the Title Page, as authors, one or more persons or entities&lt;br&gt;responsible for authorship of the modifications in the Modified&lt;br&gt;Version, together with at least five of the principal authors of the&lt;br&gt;Document (all of its principal authors, if it has fewer than five),&lt;br&gt;unless they release you from this requirement.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; State on the Title page the name of the publisher of the&lt;br&gt;Modified Version, as the publisher.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Preserve all the copyright notices of the Document.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Add an appropriate copyright notice for your modifications&lt;br&gt;adjacent to the other copyright notices.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Include, immediately after the copyright notices, a license notice&lt;br&gt;giving the public permission to use the Modified Version under the&lt;br&gt;terms of this License, in the form shown in the Addendum below.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Preserve in that license notice the full lists of Invariant Sections&lt;br&gt;and required Cover Texts given in the Document’s license notice.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Include an unaltered copy of this License.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Preserve the section Entitled “History”, Preserve its Title, and add&lt;br&gt;to it an item stating at least the title, year, new authors, and&lt;br&gt;publisher of the Modified Version as given on the Title Page.  If&lt;br&gt;there is no section Entitled “History” in the Document, create one&lt;br&gt;stating the title, year, authors, and publisher of the Document as&lt;br&gt;given on its Title Page, then add an item describing the Modified&lt;br&gt;Version as stated in the previous sentence.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Preserve the network location, if any, given in the Document for&lt;br&gt;public access to a Transparent copy of the Document, and likewise&lt;br&gt;the network locations given in the Document for previous versions&lt;br&gt;it was based on.  These may be placed in the “History” section.&lt;br&gt;You may omit a network location for a work that was published at&lt;br&gt;least four years before the Document itself, or if the original&lt;br&gt;publisher of the version it refers to gives permission.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; For any section Entitled “Acknowledgements” or “Dedications”, Preserve&lt;br&gt;the Title of the section, and preserve in the section all the&lt;br&gt;substance and tone of each of the contributor acknowledgements and/or&lt;br&gt;dedications given therein.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Preserve all the Invariant Sections of the Document,&lt;br&gt;unaltered in their text and in their titles.  Section numbers&lt;br&gt;or the equivalent are not considered part of the section titles.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Delete any section Entitled “Endorsements”.  Such a section&lt;br&gt;may not be included in the Modified Version.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Do not retitle any existing section to be Entitled “Endorsements” or&lt;br&gt;to conflict in title with any Invariant Section.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; Preserve any Warranty Disclaimers.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If the Modified Version includes new front-matter sections or&lt;br&gt;appendices that qualify as Secondary Sections and contain no material&lt;br&gt;copied from the Document, you may at your option designate some or all&lt;br&gt;of these sections as invariant.  To do this, add their titles to the&lt;br&gt;list of Invariant Sections in the Modified Version’s license notice.&lt;br&gt;These titles must be distinct from any other section titles.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You may add a section Entitled “Endorsements”, provided it contains&lt;br&gt;nothing but endorsements of your Modified Version by various&lt;br&gt;parties—for example, statements of peer review or that the text has&lt;br&gt;been approved by an organization as the authoritative definition of a&lt;br&gt;standard.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You may add a passage of up to five words as a Front-Cover Text, and a&lt;br&gt;passage of up to 25 words as a Back-Cover Text, to the end of the list&lt;br&gt;of Cover Texts in the Modified Version.  Only one passage of&lt;br&gt;Front-Cover Text and one of Back-Cover Text may be added by (or&lt;br&gt;through arrangements made by) any one entity.  If the Document already&lt;br&gt;includes a cover text for the same cover, previously added by you or&lt;br&gt;by arrangement made by the same entity you are acting on behalf of,&lt;br&gt;you may not add another; but you may replace the old one, on explicit&lt;br&gt;permission from the previous publisher that added the old one.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The author(s) and publisher(s) of the Document do not by this License&lt;br&gt;give permission to use their names for publicity for or to assert or&lt;br&gt;imply endorsement of any Modified Version.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; COMBINING DOCUMENTS&lt;br&gt;&lt;br&gt;&lt;p&gt;You may combine the Document with other documents released under this&lt;br&gt;License, under the terms defined in section 4 above for modified&lt;br&gt;versions, provided that you include in the combination all of the&lt;br&gt;Invariant Sections of all of the original documents, unmodified, and&lt;br&gt;list them all as Invariant Sections of your combined work in its&lt;br&gt;license notice, and that you preserve all their Warranty Disclaimers.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The combined work need only contain one copy of this License, and&lt;br&gt;multiple identical Invariant Sections may be replaced with a single&lt;br&gt;copy.  If there are multiple Invariant Sections with the same name but&lt;br&gt;different contents, make the title of each such section unique by&lt;br&gt;adding at the end of it, in parentheses, the name of the original&lt;br&gt;author or publisher of that section if known, or else a unique number.&lt;br&gt;Make the same adjustment to the section titles in the list of&lt;br&gt;Invariant Sections in the license notice of the combined work.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In the combination, you must combine any sections Entitled “History”&lt;br&gt;in the various original documents, forming one section Entitled&lt;br&gt;“History”; likewise combine any sections Entitled “Acknowledgements”,&lt;br&gt;and any sections Entitled “Dedications”.  You must delete all&lt;br&gt;sections Entitled “Endorsements.”&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; COLLECTIONS OF DOCUMENTS&lt;br&gt;&lt;br&gt;&lt;p&gt;You may make a collection consisting of the Document and other documents&lt;br&gt;released under this License, and replace the individual copies of this&lt;br&gt;License in the various documents with a single copy that is included in&lt;br&gt;the collection, provided that you follow the rules of this License for&lt;br&gt;verbatim copying of each of the documents in all other respects.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;You may extract a single document from such a collection, and distribute&lt;br&gt;it individually under this License, provided you insert a copy of this&lt;br&gt;License into the extracted document, and follow this License in all&lt;br&gt;other respects regarding verbatim copying of that document.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; AGGREGATION WITH INDEPENDENT WORKS&lt;br&gt;&lt;br&gt;&lt;p&gt;A compilation of the Document or its derivatives with other separate&lt;br&gt;and independent documents or works, in or on a volume of a storage or&lt;br&gt;distribution medium, is called an “aggregate” if the copyright&lt;br&gt;resulting from the compilation is not used to limit the legal rights&lt;br&gt;of the compilation’s users beyond what the individual works permit.&lt;br&gt;When the Document is included in an aggregate, this License does not&lt;br&gt;apply to the other works in the aggregate which are not themselves&lt;br&gt;derivative works of the Document.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If the Cover Text requirement of section 3 is applicable to these&lt;br&gt;copies of the Document, then if the Document is less than one half of&lt;br&gt;the entire aggregate, the Document’s Cover Texts may be placed on&lt;br&gt;covers that bracket the Document within the aggregate, or the&lt;br&gt;electronic equivalent of covers if the Document is in electronic form.&lt;br&gt;Otherwise they must appear on printed covers that bracket the whole&lt;br&gt;aggregate.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; TRANSLATION&lt;br&gt;&lt;br&gt;&lt;p&gt;Translation is considered a kind of modification, so you may&lt;br&gt;distribute translations of the Document under the terms of section 4.&lt;br&gt;Replacing Invariant Sections with translations requires special&lt;br&gt;permission from their copyright holders, but you may include&lt;br&gt;translations of some or all Invariant Sections in addition to the&lt;br&gt;original versions of these Invariant Sections.  You may include a&lt;br&gt;translation of this License, and all the license notices in the&lt;br&gt;Document, and any Warranty Disclaimers, provided that you also include&lt;br&gt;the original English version of this License and the original versions&lt;br&gt;of those notices and disclaimers.  In case of a disagreement between&lt;br&gt;the translation and the original version of this License or a notice&lt;br&gt;or disclaimer, the original version will prevail.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If a section in the Document is Entitled “Acknowledgements”,&lt;br&gt;“Dedications”, or “History”, the requirement (section 4) to Preserve&lt;br&gt;its Title (section 1) will typically require changing the actual&lt;br&gt;title.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; TERMINATION&lt;br&gt;&lt;br&gt;&lt;p&gt;You may not copy, modify, sublicense, or distribute the Document&lt;br&gt;except as expressly provided under this License.  Any attempt&lt;br&gt;otherwise to copy, modify, sublicense, or distribute it is void, and&lt;br&gt;will automatically terminate your rights under this License.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;However, if you cease all violation of this License, then your license&lt;br&gt;from a particular copyright holder is reinstated (a) provisionally,&lt;br&gt;unless and until the copyright holder explicitly and finally&lt;br&gt;terminates your license, and (b) permanently, if the copyright holder&lt;br&gt;fails to notify you of the violation by some reasonable means prior to&lt;br&gt;60 days after the cessation.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Moreover, your license from a particular copyright holder is&lt;br&gt;reinstated permanently if the copyright holder notifies you of the&lt;br&gt;violation by some reasonable means, this is the first time you have&lt;br&gt;received notice of violation of this License (for any work) from that&lt;br&gt;copyright holder, and you cure the violation prior to 30 days after&lt;br&gt;your receipt of the notice.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Termination of your rights under this section does not terminate the&lt;br&gt;licenses of parties who have received copies or rights from you under&lt;br&gt;this License.  If your rights have been terminated and not permanently&lt;br&gt;reinstated, receipt of a copy of some or all of the same material does&lt;br&gt;not give you any rights to use it.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; FUTURE REVISIONS OF THIS LICENSE&lt;br&gt;&lt;br&gt;&lt;p&gt;The Free Software Foundation may publish new, revised versions&lt;br&gt;of the GNU Free Documentation License from time to time.  Such new&lt;br&gt;versions will be similar in spirit to the present version, but may&lt;br&gt;differ in detail to address new problems or concerns.  See&lt;br&gt;&lt;a href=&quot;http://www.gnu.org/copyleft/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.gnu.org/copyleft/&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Each version of the License is given a distinguishing version number.&lt;br&gt;If the Document specifies that a particular numbered version of this&lt;br&gt;License “or any later version” applies to it, you have the option of&lt;br&gt;following the terms and conditions either of that specified version or&lt;br&gt;of any later version that has been published (not as a draft) by the&lt;br&gt;Free Software Foundation.  If the Document does not specify a version&lt;br&gt;number of this License, you may choose any version ever published (not&lt;br&gt;as a draft) by the Free Software Foundation.  If the Document&lt;br&gt;specifies that a proxy can decide which future versions of this&lt;br&gt;License can be used, that proxy’s public statement of acceptance of a&lt;br&gt;version permanently authorizes you to choose that version for the&lt;br&gt;Document.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt; RELICENSING&lt;br&gt;&lt;br&gt;&lt;p&gt;“Massive Multiauthor Collaboration Site” (or “MMC Site”) means any&lt;br&gt;World Wide Web server that publishes copyrightable works and also&lt;br&gt;provides prominent facilities for anybody to edit those works.  A&lt;br&gt;public wiki that anybody can edit is an example of such a server.  A&lt;br&gt;“Massive Multiauthor Collaboration” (or “MMC”) contained in the&lt;br&gt;site means any set of copyrightable works thus published on the MMC&lt;br&gt;site.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;“CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0&lt;br&gt;license published by Creative Commons Corporation, a not-for-profit&lt;br&gt;corporation with a principal place of business in San Francisco,&lt;br&gt;California, as well as future copyleft versions of that license&lt;br&gt;published by that same organization.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;“Incorporate” means to publish or republish a Document, in whole or&lt;br&gt;in part, as part of another Document.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;An MMC is “eligible for relicensing” if it is licensed under this&lt;br&gt;License, and if all works that were first published under this License&lt;br&gt;somewhere other than this MMC, and subsequently incorporated in whole&lt;br&gt;or in part into the MMC, (1) had no cover texts or invariant sections,&lt;br&gt;and (2) were thus incorporated prior to November 1, 2008.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The operator of an MMC Site may republish an MMC contained in the site&lt;br&gt;under CC-BY-SA on the same site at any time before August 1, 2009,&lt;br&gt;provided the MMC is eligible for relicensing.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;ADDENDUM_003a-How-to-use-this-License-for-your-documents&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;h3 class=&quot;heading&quot;&gt;ADDENDUM: How to use this License for your documents&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;To use this License in a document you have written, include a copy of&lt;br&gt;the License in the document and put the following copyright and&lt;br&gt;license notices just after the title page:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;  Copyright (C)  &lt;var&gt;year&lt;/var&gt;  &lt;var&gt;your name&lt;/var&gt;.&lt;br&gt;  Permission is granted to copy, distribute and/or modify this document&lt;br&gt;  under the terms of the GNU Free Documentation License, Version 1.3&lt;br&gt;  or any later version published by the Free Software Foundation;&lt;br&gt;  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover&lt;br&gt;  Texts.  A copy of the license is included in the section entitled ``GNU&lt;br&gt;  Free Documentation License’’.&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,&lt;br&gt;replace the “with…Texts.” line with this:&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;smallexample&quot;&gt;&lt;br&gt;&lt;pre class=&quot;smallexample&quot;&gt;    with the Invariant Sections being &lt;var&gt;list their titles&lt;/var&gt;, with&lt;br&gt;    the Front-Cover Texts being &lt;var&gt;list&lt;/var&gt;, and with the Back-Cover Texts&lt;br&gt;    being &lt;var&gt;list&lt;/var&gt;.&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;If you have Invariant Sections without Cover Texts, or some other&lt;br&gt;combination of the three, merge those two alternatives to suit the&lt;br&gt;situation.&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;If your document contains nontrivial examples of program code, we&lt;br&gt;recommend releasing these examples in parallel under your choice of&lt;br&gt;free software license, such as the GNU General Public License,&lt;br&gt;to permit their use in free software.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Concept-Index&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;Next: &lt;a href=&quot;#Name-Index&quot; accesskey=&quot;n&quot; rel=&quot;next&quot;&gt;Name Index&lt;/a&gt;, Previous: &lt;a href=&quot;#GNU-Free-Documentation-License&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;GNU Free Documentation License&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;Index-of-Concepts&quot;&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 class=&quot;unnumbered&quot;&gt;Index of Concepts&lt;/h2&gt;

&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th valign=&quot;top&quot;&gt;Jump to: &amp;nbsp; &lt;/th&gt;&lt;td&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-1&quot;&gt;&lt;b&gt;!&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-2&quot;&gt;&lt;b&gt;#&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-3&quot;&gt;&lt;b&gt;$&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-4&quot;&gt;&lt;b&gt;%&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-5&quot;&gt;&lt;b&gt;&lt;em&gt;&lt;/em&gt;&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-6&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-7&quot;&gt;&lt;b&gt;,&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-8&quot;&gt;&lt;b&gt;-&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-9&quot;&gt;&lt;b&gt;.&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-10&quot;&gt;&lt;b&gt;:&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-11&quot;&gt;&lt;b&gt;=&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-12&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-13&quot;&gt;&lt;b&gt;@&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-14&quot;&gt;&lt;b&gt;[&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-15&quot;&gt;&lt;b&gt;\&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-16&quot;&gt;&lt;b&gt;_&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-17&quot;&gt;&lt;b&gt;~&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-A&quot;&gt;&lt;b&gt;A&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-B&quot;&gt;&lt;b&gt;B&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-C&quot;&gt;&lt;b&gt;C&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-D&quot;&gt;&lt;b&gt;D&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-E&quot;&gt;&lt;b&gt;E&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-F&quot;&gt;&lt;b&gt;F&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-G&quot;&gt;&lt;b&gt;G&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-H&quot;&gt;&lt;b&gt;H&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-I&quot;&gt;&lt;b&gt;I&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-J&quot;&gt;&lt;b&gt;J&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-K&quot;&gt;&lt;b&gt;K&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-L&quot;&gt;&lt;b&gt;L&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-M&quot;&gt;&lt;b&gt;M&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-N&quot;&gt;&lt;b&gt;N&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-O&quot;&gt;&lt;b&gt;O&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-P&quot;&gt;&lt;b&gt;P&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-Q&quot;&gt;&lt;b&gt;Q&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-R&quot;&gt;&lt;b&gt;R&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-S&quot;&gt;&lt;b&gt;S&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-T&quot;&gt;&lt;b&gt;T&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-U&quot;&gt;&lt;b&gt;U&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-V&quot;&gt;&lt;b&gt;V&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-W&quot;&gt;&lt;b&gt;W&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-Y&quot;&gt;&lt;b&gt;Y&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;table class=&quot;index-cp&quot; border=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;th align=&quot;left&quot;&gt;Index Entry&lt;/th&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;th align=&quot;left&quot;&gt; Section&lt;/th&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-1&quot;&gt;!&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0021_003d&quot;&gt;!=&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Setting&quot;&gt;Setting&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0021_003d_002c-expansion&quot;&gt;!=, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-2&quot;&gt;#&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0023-_0028comments_0029_002c-in-makefile&quot;&gt;&lt;code&gt;#&lt;/code&gt; (comments), in makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Contents&quot;&gt;Makefile Contents&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0023-_0028comments_0029_002c-in-recipes&quot;&gt;&lt;code&gt;#&lt;/code&gt; (comments), in recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recipe-Syntax&quot;&gt;Recipe Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0023include&quot;&gt;&lt;code&gt;#include&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-3&quot;&gt;$&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_002c-in-function-call&quot;&gt;&lt;code&gt;$&lt;/code&gt;, in function call&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Syntax-of-Functions&quot;&gt;Syntax of Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_002c-in-rules&quot;&gt;&lt;code&gt;$&lt;/code&gt;, in rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_002c-in-variable-name&quot;&gt;&lt;code&gt;$&lt;/code&gt;, in variable name&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Computed-Names&quot;&gt;Computed Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_002c-in-variable-reference&quot;&gt;&lt;code&gt;$&lt;/code&gt;, in variable reference&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reference&quot;&gt;Reference&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-4&quot;&gt;%&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0025_002c-in-pattern-rules&quot;&gt;&lt;code&gt;%&lt;/code&gt;, in pattern rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern-Intro&quot;&gt;Pattern Intro&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0025_002c-quoting-in-patsubst&quot;&gt;&lt;code&gt;%&lt;/code&gt;, quoting in &lt;code&gt;patsubst&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0025_002c-quoting-in-static-pattern&quot;&gt;&lt;code&gt;%&lt;/code&gt;, quoting in static pattern&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0025_002c-quoting-in-vpath&quot;&gt;&lt;code&gt;%&lt;/code&gt;, quoting in &lt;code&gt;vpath&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Selective-Search&quot;&gt;Selective Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0025_002c-quoting-with-_005c-_0028backslash_0029&quot;&gt;&lt;code&gt;%&lt;/code&gt;, quoting with &lt;code&gt;\&lt;/code&gt; (backslash)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Selective-Search&quot;&gt;Selective Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0025_002c-quoting-with-_005c-_0028backslash_0029-1&quot;&gt;&lt;code&gt;%&lt;/code&gt;, quoting with &lt;code&gt;\&lt;/code&gt; (backslash)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0025_002c-quoting-with-_005c-_0028backslash_0029-2&quot;&gt;&lt;code&gt;%&lt;/code&gt;, quoting with &lt;code&gt;\&lt;/code&gt; (backslash)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-5&quot;&gt;&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002a-_0028wildcard-character_0029&quot;&gt;&lt;code&gt;&lt;em&gt;&lt;/em&gt;&lt;/code&gt; (wildcard character)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcards&quot;&gt;Wildcards&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-6&quot;&gt;+&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002b_002c-and-define&quot;&gt;+, and &lt;code&gt;define&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Canned-Recipes&quot;&gt;Canned Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002b_002c-and-recipe-execution&quot;&gt;+, and recipe execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002b_002c-and-recipes&quot;&gt;+, and recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#MAKE-Variable&quot;&gt;MAKE Variable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002b_003d&quot;&gt;+=&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Appending&quot;&gt;Appending&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002b_003d_002c-expansion&quot;&gt;+=, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002b_003d_002c-expansion-1&quot;&gt;+=, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-7&quot;&gt;,&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002cv-_0028RCS-file-extension_0029&quot;&gt;&lt;code&gt;,v &lt;span class=&quot;roman&quot;&gt;(RCS file extension)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-8&quot;&gt;-&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d-_0028in-recipes_0029&quot;&gt;&lt;code&gt;-&lt;/code&gt; (in recipes)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002c-and-define&quot;&gt;-, and &lt;code&gt;define&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Canned-Recipes&quot;&gt;Canned Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dalways_002dmake&quot;&gt;&lt;code&gt;–always-make&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dassume_002dnew&quot;&gt;&lt;code&gt;–assume-new&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dassume_002dnew-1&quot;&gt;&lt;code&gt;–assume-new&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dassume_002dnew_002c-and-recursion&quot;&gt;&lt;code&gt;–assume-new&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dassume_002dold&quot;&gt;&lt;code&gt;–assume-old&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Avoiding-Compilation&quot;&gt;Avoiding Compilation&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dassume_002dold-1&quot;&gt;&lt;code&gt;–assume-old&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dassume_002dold_002c-and-recursion&quot;&gt;&lt;code&gt;–assume-old&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dcheck_002dsymlink_002dtimes&quot;&gt;&lt;code&gt;–check-symlink-times&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002ddebug&quot;&gt;&lt;code&gt;–debug&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002ddirectory&quot;&gt;&lt;code&gt;–directory&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recursion&quot;&gt;Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002ddirectory-1&quot;&gt;&lt;code&gt;–directory&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002ddirectory_002c-and-_002d_002dprint_002ddirectory&quot;&gt;&lt;code&gt;–directory&lt;/code&gt;, and &lt;code&gt;–print-directory&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002ddirectory_002c-and-recursion&quot;&gt;&lt;code&gt;–directory&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002ddry_002drun&quot;&gt;&lt;code&gt;–dry-run&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002ddry_002drun-1&quot;&gt;&lt;code&gt;–dry-run&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002ddry_002drun-2&quot;&gt;&lt;code&gt;–dry-run&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002denvironment_002doverrides&quot;&gt;&lt;code&gt;–environment-overrides&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002deval&quot;&gt;&lt;code&gt;–eval&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dfile&quot;&gt;&lt;code&gt;–file&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dfile-1&quot;&gt;&lt;code&gt;–file&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Arguments&quot;&gt;Makefile Arguments&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dfile-2&quot;&gt;&lt;code&gt;–file&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dfile_002c-and-recursion&quot;&gt;&lt;code&gt;–file&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dhelp&quot;&gt;&lt;code&gt;–help&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dignore_002derrors&quot;&gt;&lt;code&gt;–ignore-errors&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dignore_002derrors-1&quot;&gt;&lt;code&gt;–ignore-errors&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dinclude_002ddir&quot;&gt;&lt;code&gt;–include-dir&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dinclude_002ddir-1&quot;&gt;&lt;code&gt;–include-dir&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002djobs&quot;&gt;&lt;code&gt;–jobs&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002djobs-1&quot;&gt;&lt;code&gt;–jobs&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002djobs_002c-and-recursion&quot;&gt;&lt;code&gt;–jobs&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002djust_002dprint&quot;&gt;&lt;code&gt;–just-print&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002djust_002dprint-1&quot;&gt;&lt;code&gt;–just-print&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002djust_002dprint-2&quot;&gt;&lt;code&gt;–just-print&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dkeep_002dgoing&quot;&gt;&lt;code&gt;–keep-going&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dkeep_002dgoing-1&quot;&gt;&lt;code&gt;–keep-going&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Testing&quot;&gt;Testing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dkeep_002dgoing-2&quot;&gt;&lt;code&gt;–keep-going&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dload_002daverage&quot;&gt;&lt;code&gt;–load-average&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dload_002daverage-1&quot;&gt;&lt;code&gt;–load-average&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dmakefile&quot;&gt;&lt;code&gt;–makefile&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dmakefile-1&quot;&gt;&lt;code&gt;–makefile&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Arguments&quot;&gt;Makefile Arguments&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dmakefile-2&quot;&gt;&lt;code&gt;–makefile&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dmax_002dload&quot;&gt;&lt;code&gt;–max-load&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dmax_002dload-1&quot;&gt;&lt;code&gt;–max-load&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dnew_002dfile&quot;&gt;&lt;code&gt;–new-file&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dnew_002dfile-1&quot;&gt;&lt;code&gt;–new-file&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dnew_002dfile_002c-and-recursion&quot;&gt;&lt;code&gt;–new-file&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dno_002dbuiltin_002drules&quot;&gt;&lt;code&gt;–no-builtin-rules&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dno_002dbuiltin_002dvariables&quot;&gt;&lt;code&gt;–no-builtin-variables&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dno_002dkeep_002dgoing&quot;&gt;&lt;code&gt;–no-keep-going&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dno_002dprint_002ddirectory&quot;&gt;&lt;code&gt;–no-print-directory&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dno_002dprint_002ddirectory-1&quot;&gt;&lt;code&gt;–no-print-directory&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dold_002dfile&quot;&gt;&lt;code&gt;–old-file&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Avoiding-Compilation&quot;&gt;Avoiding Compilation&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dold_002dfile-1&quot;&gt;&lt;code&gt;–old-file&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dold_002dfile_002c-and-recursion&quot;&gt;&lt;code&gt;–old-file&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002doutput_002dsync&quot;&gt;&lt;code&gt;–output-sync&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel-Output&quot;&gt;Parallel Output&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002doutput_002dsync-1&quot;&gt;&lt;code&gt;–output-sync&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dprint_002ddata_002dbase&quot;&gt;&lt;code&gt;–print-data-base&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dprint_002ddirectory&quot;&gt;&lt;code&gt;–print-directory&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dprint_002ddirectory_002c-and-_002d_002ddirectory&quot;&gt;&lt;code&gt;–print-directory&lt;/code&gt;, and &lt;code&gt;–directory&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dprint_002ddirectory_002c-and-recursion&quot;&gt;&lt;code&gt;–print-directory&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dprint_002ddirectory_002c-disabling&quot;&gt;&lt;code&gt;–print-directory&lt;/code&gt;, disabling&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dquestion&quot;&gt;&lt;code&gt;–question&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dquestion-1&quot;&gt;&lt;code&gt;–question&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dquiet&quot;&gt;&lt;code&gt;–quiet&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dquiet-1&quot;&gt;&lt;code&gt;–quiet&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002drecon&quot;&gt;&lt;code&gt;–recon&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002drecon-1&quot;&gt;&lt;code&gt;–recon&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002drecon-2&quot;&gt;&lt;code&gt;–recon&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dsilent&quot;&gt;&lt;code&gt;–silent&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dsilent-1&quot;&gt;&lt;code&gt;–silent&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dstop&quot;&gt;&lt;code&gt;–stop&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dtouch&quot;&gt;&lt;code&gt;–touch&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dtouch-1&quot;&gt;&lt;code&gt;–touch&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dtouch_002c-and-recursion&quot;&gt;&lt;code&gt;–touch&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#MAKE-Variable&quot;&gt;MAKE Variable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dtrace&quot;&gt;&lt;code&gt;–trace&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dversion&quot;&gt;&lt;code&gt;–version&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dwarn_002dundefined_002dvariables&quot;&gt;&lt;code&gt;–warn-undefined-variables&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dwhat_002dif&quot;&gt;&lt;code&gt;–what-if&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002d_002dwhat_002dif-1&quot;&gt;&lt;code&gt;–what-if&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002db&quot;&gt;&lt;code&gt;-b&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dB&quot;&gt;&lt;code&gt;-B&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dC&quot;&gt;&lt;code&gt;-C&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recursion&quot;&gt;Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dC-1&quot;&gt;&lt;code&gt;-C&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dC_002c-and-_002dw&quot;&gt;&lt;code&gt;-C&lt;/code&gt;, and &lt;code&gt;-w&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dC_002c-and-recursion&quot;&gt;&lt;code&gt;-C&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dd&quot;&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002de&quot;&gt;&lt;code&gt;-e&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002de-_0028shell-flag_0029&quot;&gt;&lt;code&gt;-e&lt;/code&gt; (shell flag)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002df&quot;&gt;&lt;code&gt;-f&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002df-1&quot;&gt;&lt;code&gt;-f&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Arguments&quot;&gt;Makefile Arguments&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002df-2&quot;&gt;&lt;code&gt;-f&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002df_002c-and-recursion&quot;&gt;&lt;code&gt;-f&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dh&quot;&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dI&quot;&gt;&lt;code&gt;-I&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002di&quot;&gt;&lt;code&gt;-i&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002di-1&quot;&gt;&lt;code&gt;-i&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dI-1&quot;&gt;&lt;code&gt;-I&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dj&quot;&gt;&lt;code&gt;-j&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dj-1&quot;&gt;&lt;code&gt;-j&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dj_002c-and-archive-update&quot;&gt;&lt;code&gt;-j&lt;/code&gt;, and archive update&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Pitfalls&quot;&gt;Archive Pitfalls&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dj_002c-and-recursion&quot;&gt;&lt;code&gt;-j&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dk&quot;&gt;&lt;code&gt;-k&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dk-1&quot;&gt;&lt;code&gt;-k&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Testing&quot;&gt;Testing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dk-2&quot;&gt;&lt;code&gt;-k&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dl&quot;&gt;&lt;code&gt;-l&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dL&quot;&gt;&lt;code&gt;-L&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dl-_0028library-search_0029&quot;&gt;&lt;code&gt;-l&lt;/code&gt; (library search)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Libraries/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dl-_0028load-average_0029&quot;&gt;&lt;code&gt;-l&lt;/code&gt; (load average)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dm&quot;&gt;&lt;code&gt;-m&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dM-_0028to-compiler_0029&quot;&gt;&lt;code&gt;-M&lt;/code&gt; (to compiler)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dMM-_0028to-GNU-compiler_0029&quot;&gt;&lt;code&gt;-MM&lt;/code&gt; (to GNU compiler)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dn&quot;&gt;&lt;code&gt;-n&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dn-1&quot;&gt;&lt;code&gt;-n&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dn-2&quot;&gt;&lt;code&gt;-n&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dO&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel-Output&quot;&gt;Parallel Output&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002do&quot;&gt;&lt;code&gt;-o&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Avoiding-Compilation&quot;&gt;Avoiding Compilation&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002do-1&quot;&gt;&lt;code&gt;-o&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dO-1&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002do_002c-and-recursion&quot;&gt;&lt;code&gt;-o&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dp&quot;&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dq&quot;&gt;&lt;code&gt;-q&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dq-1&quot;&gt;&lt;code&gt;-q&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dr&quot;&gt;&lt;code&gt;-r&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dR&quot;&gt;&lt;code&gt;-R&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ds&quot;&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ds-1&quot;&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dS&quot;&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dt&quot;&gt;&lt;code&gt;-t&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dt-1&quot;&gt;&lt;code&gt;-t&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dt_002c-and-recursion&quot;&gt;&lt;code&gt;-t&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#MAKE-Variable&quot;&gt;MAKE Variable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dv&quot;&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dW&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dw&quot;&gt;&lt;code&gt;-w&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dW-1&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dw_002c-and-_002dC&quot;&gt;&lt;code&gt;-w&lt;/code&gt;, and &lt;code&gt;-C&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dW_002c-and-recursion&quot;&gt;&lt;code&gt;-W&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dw_002c-and-recursion&quot;&gt;&lt;code&gt;-w&lt;/code&gt;, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dw_002c-disabling&quot;&gt;&lt;code&gt;-w&lt;/code&gt;, disabling&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-9&quot;&gt;.&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ea-_0028archives_0029&quot;&gt;&lt;code&gt;.a&lt;/code&gt; (archives)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Suffix-Rules&quot;&gt;Archive Suffix Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ec&quot;&gt;&lt;code&gt;.c&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eC&quot;&gt;&lt;code&gt;.C&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ecc&quot;&gt;&lt;code&gt;.cc&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ech&quot;&gt;&lt;code&gt;.ch&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ecpp&quot;&gt;&lt;code&gt;.cpp&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ed&quot;&gt;&lt;code&gt;.d&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002edef&quot;&gt;&lt;code&gt;.def&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002edvi&quot;&gt;&lt;code&gt;.dvi&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ef&quot;&gt;&lt;code&gt;.f&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eF&quot;&gt;&lt;code&gt;.F&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002einfo&quot;&gt;&lt;code&gt;.info&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002el&quot;&gt;&lt;code&gt;.l&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eLIBPATTERNS_002c-and-link-libraries&quot;&gt;&lt;code&gt;.LIBPATTERNS&lt;/code&gt;, and link libraries&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Libraries/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eln&quot;&gt;&lt;code&gt;.ln&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002emod&quot;&gt;&lt;code&gt;.mod&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eo&quot;&gt;&lt;code&gt;.o&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eo-1&quot;&gt;&lt;code&gt;.o&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eONESHELL_002c-use-of&quot;&gt;&lt;code&gt;.ONESHELL&lt;/code&gt;, use of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#One-Shell&quot;&gt;One Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ep&quot;&gt;&lt;code&gt;.p&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ePRECIOUS-intermediate-files&quot;&gt;&lt;code&gt;.PRECIOUS&lt;/code&gt; intermediate files&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Chained-Rules&quot;&gt;Chained Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002er&quot;&gt;&lt;code&gt;.r&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002es&quot;&gt;&lt;code&gt;.s&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eS&quot;&gt;&lt;code&gt;.S&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002esh&quot;&gt;&lt;code&gt;.sh&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eSHELLFLAGS_002c-value-of&quot;&gt;&lt;code&gt;.SHELLFLAGS&lt;/code&gt;, value of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002esym&quot;&gt;&lt;code&gt;.sym&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002etex&quot;&gt;&lt;code&gt;.tex&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002etexi&quot;&gt;&lt;code&gt;.texi&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002etexinfo&quot;&gt;&lt;code&gt;.texinfo&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002etxinfo&quot;&gt;&lt;code&gt;.txinfo&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ew&quot;&gt;&lt;code&gt;.w&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eweb&quot;&gt;&lt;code&gt;.web&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ey&quot;&gt;&lt;code&gt;.y&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-10&quot;&gt;:&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003a_003a-rules-_0028double_002dcolon_0029&quot;&gt;&lt;code&gt;::&lt;/code&gt; rules (double-colon)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Double_002dColon&quot;&gt;Double-Colon&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003a_003a_003d&quot;&gt;::=&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003a_003a_003d-1&quot;&gt;::=&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Setting&quot;&gt;Setting&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003a_003d&quot;&gt;:=&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003a_003d-1&quot;&gt;:=&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Setting&quot;&gt;Setting&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-11&quot;&gt;=&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003d&quot;&gt;=&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003d-1&quot;&gt;=&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Setting&quot;&gt;Setting&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003d_002c-expansion&quot;&gt;=, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-12&quot;&gt;?&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003f-_0028wildcard-character_0029&quot;&gt;&lt;code&gt;?&lt;/code&gt; (wildcard character)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcards&quot;&gt;Wildcards&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003f_003d&quot;&gt;?=&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003f_003d-1&quot;&gt;?=&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Setting&quot;&gt;Setting&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003f_003d_002c-expansion&quot;&gt;?=, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-13&quot;&gt;@&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0040-_0028in-recipes_0029&quot;&gt;&lt;code&gt;@&lt;/code&gt; (in recipes)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0040_002c-and-define&quot;&gt;@, and &lt;code&gt;define&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Canned-Recipes&quot;&gt;Canned Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-14&quot;&gt;[&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_005b_2026_005d-_0028wildcard-characters_0029&quot;&gt;&lt;code&gt;[…]&lt;/code&gt; (wildcard characters)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcards&quot;&gt;Wildcards&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-15&quot;&gt;\&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_005c-_0028backslash_0029_002c-for-continuation-lines&quot;&gt;&lt;code&gt;\&lt;/code&gt; (backslash), for continuation lines&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Simple-Makefile&quot;&gt;Simple Makefile&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_005c-_0028backslash_0029_002c-in-recipes&quot;&gt;&lt;code&gt;\&lt;/code&gt; (backslash), in recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Splitting-Recipe-Lines&quot;&gt;Splitting Recipe Lines&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_005c-_0028backslash_0029_002c-to-quote-_0025&quot;&gt;&lt;code&gt;\&lt;/code&gt; (backslash), to quote &lt;code&gt;%&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Selective-Search&quot;&gt;Selective Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_005c-_0028backslash_0029_002c-to-quote-_0025-1&quot;&gt;&lt;code&gt;\&lt;/code&gt; (backslash), to quote &lt;code&gt;%&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_005c-_0028backslash_0029_002c-to-quote-_0025-2&quot;&gt;&lt;code&gt;\&lt;/code&gt; (backslash), to quote &lt;code&gt;%&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-16&quot;&gt;_&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_005f_005f_002eSYMDEF&quot;&gt;&lt;code&gt;__.SYMDEF&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Symbols&quot;&gt;Archive Symbols&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_symbol-17&quot;&gt;~&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_007e-_0028tilde_0029&quot;&gt;&lt;code&gt;~&lt;/code&gt; (tilde)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcards&quot;&gt;Wildcards&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-A&quot;&gt;A&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-abspath&quot;&gt;abspath&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-algorithm-for-directory-search&quot;&gt;algorithm for directory search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Search-Algorithm&quot;&gt;Search Algorithm&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-all-_0028standard-target_0029&quot;&gt;&lt;code&gt;all&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-appending-to-variables&quot;&gt;appending to variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Appending&quot;&gt;Appending&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ar&quot;&gt;&lt;code&gt;ar&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-archive&quot;&gt;archive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archives&quot;&gt;Archives&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-archive-member-targets&quot;&gt;archive member targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Members&quot;&gt;Archive Members&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-archive-symbol-directory-updating&quot;&gt;archive symbol directory updating&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Symbols&quot;&gt;Archive Symbols&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-archive_002c-and-_002dj&quot;&gt;archive, and &lt;code&gt;-j&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Pitfalls&quot;&gt;Archive Pitfalls&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-archive_002c-and-parallel-execution&quot;&gt;archive, and parallel execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Pitfalls&quot;&gt;Archive Pitfalls&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-archive_002c-suffix-rule-for&quot;&gt;archive, suffix rule for&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Suffix-Rules&quot;&gt;Archive Suffix Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Arg-list-too-long&quot;&gt;Arg list too long&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-arguments-of-functions&quot;&gt;arguments of functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Syntax-of-Functions&quot;&gt;Syntax of Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-as&quot;&gt;&lt;code&gt;as&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-as-1&quot;&gt;&lt;code&gt;as&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-assembly_002c-rule-to-compile&quot;&gt;assembly, rule to compile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-automatic-generation-of-prerequisites&quot;&gt;automatic generation of prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-automatic-generation-of-prerequisites-1&quot;&gt;automatic generation of prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-automatic-variables&quot;&gt;automatic variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-automatic-variables-in-prerequisites&quot;&gt;automatic variables in prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-B&quot;&gt;B&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-backquotes&quot;&gt;backquotes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Shell-Function&quot;&gt;Shell Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-backslash-_0028_005c_0029_002c-for-continuation-lines&quot;&gt;backslash (&lt;code&gt;\&lt;/code&gt;), for continuation lines&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Simple-Makefile&quot;&gt;Simple Makefile&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-backslash-_0028_005c_0029_002c-in-recipes&quot;&gt;backslash (&lt;code&gt;\&lt;/code&gt;), in recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Splitting-Recipe-Lines&quot;&gt;Splitting Recipe Lines&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-backslash-_0028_005c_0029_002c-to-quote-_0025&quot;&gt;backslash (&lt;code&gt;\&lt;/code&gt;), to quote &lt;code&gt;%&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Selective-Search&quot;&gt;Selective Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-backslash-_0028_005c_0029_002c-to-quote-_0025-1&quot;&gt;backslash (&lt;code&gt;\&lt;/code&gt;), to quote &lt;code&gt;%&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-backslash-_0028_005c_0029_002c-to-quote-_0025-2&quot;&gt;backslash (&lt;code&gt;\&lt;/code&gt;), to quote &lt;code&gt;%&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-backslash-_0028_005c_0029_002c-to-quote-newlines&quot;&gt;backslash (&lt;code&gt;\&lt;/code&gt;), to quote newlines&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Splitting-Lines&quot;&gt;Splitting Lines&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-backslashes-in-pathnames-and-wildcard-expansion&quot;&gt;backslashes in pathnames and wildcard expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Pitfall&quot;&gt;Wildcard Pitfall&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-basename&quot;&gt;basename&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-binary-packages&quot;&gt;binary packages&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Install-Command-Categories&quot;&gt;Install Command Categories&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-broken-pipe&quot;&gt;broken pipe&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel-Input&quot;&gt;Parallel Input&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-bugs_002c-reporting&quot;&gt;bugs, reporting&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Bugs&quot;&gt;Bugs&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-built_002din-special-targets&quot;&gt;built-in special targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-C&quot;&gt;C&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-C_002b_002b_002c-rule-to-compile&quot;&gt;C++, rule to compile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-C_002c-rule-to-compile&quot;&gt;C, rule to compile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-canned-recipes&quot;&gt;canned recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Canned-Recipes&quot;&gt;Canned Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-cc&quot;&gt;&lt;code&gt;cc&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-cc-1&quot;&gt;&lt;code&gt;cc&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-cd-_0028shell-command_0029&quot;&gt;&lt;code&gt;cd&lt;/code&gt; (shell command)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Execution&quot;&gt;Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-cd-_0028shell-command_0029-1&quot;&gt;&lt;code&gt;cd&lt;/code&gt; (shell command)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#MAKE-Variable&quot;&gt;MAKE Variable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-chains-of-rules&quot;&gt;chains of rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Chained-Rules&quot;&gt;Chained Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-check-_0028standard-target_0029&quot;&gt;&lt;code&gt;check&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-clean-_0028standard-target_0029&quot;&gt;&lt;code&gt;clean&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-clean-target&quot;&gt;&lt;code&gt;clean&lt;/code&gt; target&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Simple-Makefile&quot;&gt;Simple Makefile&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-clean-target-1&quot;&gt;&lt;code&gt;clean&lt;/code&gt; target&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Cleanup&quot;&gt;Cleanup&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-cleaning-up&quot;&gt;cleaning up&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Cleanup&quot;&gt;Cleanup&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-clobber-_0028standard-target_0029&quot;&gt;&lt;code&gt;clobber&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-co&quot;&gt;&lt;code&gt;co&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-co-1&quot;&gt;&lt;code&gt;co&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-combining-rules-by-prerequisite&quot;&gt;combining rules by prerequisite&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Combine-By-Prerequisite&quot;&gt;Combine By Prerequisite&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-command-expansion&quot;&gt;command expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Shell-Function&quot;&gt;Shell Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-command-line-variable-definitions_002c-and-recursion&quot;&gt;command line variable definitions, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-command-line-variables&quot;&gt;command line variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Overriding&quot;&gt;Overriding&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-commands_002c-sequences-of&quot;&gt;commands, sequences of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Canned-Recipes&quot;&gt;Canned Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-comments_002c-in-makefile&quot;&gt;comments, in makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Contents&quot;&gt;Makefile Contents&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-comments_002c-in-recipes&quot;&gt;comments, in recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recipe-Syntax&quot;&gt;Recipe Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-compatibility&quot;&gt;compatibility&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Features&quot;&gt;Features&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-compatibility-in-exporting&quot;&gt;compatibility in exporting&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-compilation_002c-testing&quot;&gt;compilation, testing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Testing&quot;&gt;Testing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-computed-variable-name&quot;&gt;computed variable name&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Computed-Names&quot;&gt;Computed Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-conditional-expansion&quot;&gt;conditional expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditional-Functions&quot;&gt;Conditional Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-conditional-variable-assignment&quot;&gt;conditional variable assignment&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-conditionals&quot;&gt;conditionals&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditionals&quot;&gt;Conditionals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-continuation-lines&quot;&gt;continuation lines&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Simple-Makefile&quot;&gt;Simple Makefile&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-controlling-make&quot;&gt;controlling make&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-conventions-for-makefiles&quot;&gt;conventions for makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Conventions&quot;&gt;Makefile Conventions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-convert-guile-types&quot;&gt;convert guile types&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Types&quot;&gt;Guile Types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ctangle&quot;&gt;&lt;code&gt;ctangle&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ctangle-1&quot;&gt;&lt;code&gt;ctangle&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-cweave&quot;&gt;&lt;code&gt;cweave&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-cweave-1&quot;&gt;&lt;code&gt;cweave&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-D&quot;&gt;D&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-data-base-of-make-rules&quot;&gt;data base of &lt;code&gt;make&lt;/code&gt; rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-deducing-recipes-_0028implicit-rules_0029&quot;&gt;deducing recipes (implicit rules)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#make-Deduces&quot;&gt;make Deduces&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-default-directories-for-included-makefiles&quot;&gt;default directories for included makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-default-goal&quot;&gt;default goal&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#How-Make-Works&quot;&gt;How Make Works&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-default-goal-1&quot;&gt;default goal&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rules&quot;&gt;Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-default-makefile-name&quot;&gt;default makefile name&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-default-rules_002c-last_002dresort&quot;&gt;default rules, last-resort&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Last-Resort&quot;&gt;Last Resort&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-define_002c-expansion&quot;&gt;define, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-defining-variables-verbatim&quot;&gt;defining variables verbatim&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multi_002dLine&quot;&gt;Multi-Line&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-deletion-of-target-files&quot;&gt;deletion of target files&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-deletion-of-target-files-1&quot;&gt;deletion of target files&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Interrupts&quot;&gt;Interrupts&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-directive&quot;&gt;directive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Contents&quot;&gt;Makefile Contents&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-directories_002c-creating-installation&quot;&gt;directories, creating installation&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Variables&quot;&gt;Directory Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-directories_002c-printing-them&quot;&gt;directories, printing them&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-directories_002c-updating-archive-symbol&quot;&gt;directories, updating archive symbol&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Symbols&quot;&gt;Archive Symbols&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-directory-part&quot;&gt;directory part&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-directory-search-_0028VPATH_0029&quot;&gt;directory search (&lt;code&gt;VPATH&lt;/code&gt;)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Search&quot;&gt;Directory Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-directory-search-_0028VPATH_0029_002c-and-implicit-rules&quot;&gt;directory search (&lt;code&gt;VPATH&lt;/code&gt;), and implicit rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit_002fSearch&quot;&gt;Implicit/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-directory-search-_0028VPATH_0029_002c-and-link-libraries&quot;&gt;directory search (&lt;code&gt;VPATH&lt;/code&gt;), and link libraries&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Libraries/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-directory-search-_0028VPATH_0029_002c-and-recipes&quot;&gt;directory search (&lt;code&gt;VPATH&lt;/code&gt;), and recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recipes_002fSearch&quot;&gt;Recipes/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-directory-search-algorithm&quot;&gt;directory search algorithm&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Search-Algorithm&quot;&gt;Search Algorithm&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-directory-search_002c-traditional-_0028GPATH_0029&quot;&gt;directory search, traditional (GPATH)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Search-Algorithm&quot;&gt;Search Algorithm&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-dist-_0028standard-target_0029&quot;&gt;&lt;code&gt;dist&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-distclean-_0028standard-target_0029&quot;&gt;&lt;code&gt;distclean&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-dollar-sign-_0028_0024_0029_002c-in-function-call&quot;&gt;dollar sign (&lt;code&gt;$&lt;/code&gt;), in function call&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Syntax-of-Functions&quot;&gt;Syntax of Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-dollar-sign-_0028_0024_0029_002c-in-rules&quot;&gt;dollar sign (&lt;code&gt;$&lt;/code&gt;), in rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-dollar-sign-_0028_0024_0029_002c-in-variable-name&quot;&gt;dollar sign (&lt;code&gt;$&lt;/code&gt;), in variable name&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Computed-Names&quot;&gt;Computed Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-dollar-sign-_0028_0024_0029_002c-in-variable-reference&quot;&gt;dollar sign (&lt;code&gt;$&lt;/code&gt;), in variable reference&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reference&quot;&gt;Reference&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-DOS_002c-choosing-a-shell-in&quot;&gt;DOS, choosing a shell in&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-double_002dcolon-rules&quot;&gt;double-colon rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Double_002dColon&quot;&gt;Double-Colon&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-duplicate-words_002c-removing&quot;&gt;duplicate words, removing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-E&quot;&gt;E&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-E2BIG&quot;&gt;E2BIG&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-echoing-of-recipes&quot;&gt;echoing of recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-editor&quot;&gt;editor&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Emacs-_0028M_002dx-compile_0029&quot;&gt;Emacs (&lt;code&gt;M-x compile&lt;/code&gt;)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-empty-recipes&quot;&gt;empty recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Empty-Recipes&quot;&gt;Empty Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-empty-targets&quot;&gt;empty targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Empty-Targets&quot;&gt;Empty Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-environment&quot;&gt;environment&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Environment&quot;&gt;Environment&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-environment_002c-and-recursion&quot;&gt;environment, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-environment_002c-SHELL-in&quot;&gt;environment, &lt;code&gt;SHELL&lt;/code&gt; in&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-error_002c-stopping-on&quot;&gt;error, stopping on&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-errors-_0028in-recipes_0029&quot;&gt;errors (in recipes)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-errors-with-wildcards&quot;&gt;errors with wildcards&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Pitfall&quot;&gt;Wildcard Pitfall&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-evaluating-makefile-syntax&quot;&gt;evaluating makefile syntax&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Eval-Function&quot;&gt;Eval Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-example-of-loaded-objects&quot;&gt;example of loaded objects&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-Example&quot;&gt;Loaded Object Example&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-example-using-Guile&quot;&gt;example using Guile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Example&quot;&gt;Guile Example&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-execution_002c-in-parallel&quot;&gt;execution, in parallel&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-execution_002c-instead-of&quot;&gt;execution, instead of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-execution_002c-of-recipes&quot;&gt;execution, of recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Execution&quot;&gt;Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-exit-status-_0028errors_0029&quot;&gt;exit status (errors)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-exit-status-of-make&quot;&gt;exit status of make&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Running&quot;&gt;Running&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-expansion_002c-secondary&quot;&gt;expansion, secondary&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-explicit-rule_002c-definition-of&quot;&gt;explicit rule, definition of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Contents&quot;&gt;Makefile Contents&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-explicit-rule_002c-expansion&quot;&gt;explicit rule, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-explicit-rules_002c-secondary-expansion-of&quot;&gt;explicit rules, secondary expansion of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-exporting-variables&quot;&gt;exporting variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-extensions_002c-Guile&quot;&gt;extensions, Guile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Integration&quot;&gt;Guile Integration&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-extensions_002c-load-directive&quot;&gt;extensions, load directive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#load-Directive&quot;&gt;load Directive&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-extensions_002c-loading&quot;&gt;extensions, loading&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loading-Objects&quot;&gt;Loading Objects&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-F&quot;&gt;F&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-f77&quot;&gt;&lt;code&gt;f77&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-f77-1&quot;&gt;&lt;code&gt;f77&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-FDL_002c-GNU-Free-Documentation-License&quot;&gt;FDL, GNU Free Documentation License&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#GNU-Free-Documentation-License&quot;&gt;GNU Free Documentation License&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-features-of-GNU-make&quot;&gt;features of GNU &lt;code&gt;make&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Features&quot;&gt;Features&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-features_002c-missing&quot;&gt;features, missing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Missing&quot;&gt;Missing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name-functions&quot;&gt;file name functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name-of-makefile&quot;&gt;file name of makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name-of-makefile_002c-how-to-specify&quot;&gt;file name of makefile, how to specify&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name-prefix_002c-adding&quot;&gt;file name prefix, adding&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name-suffix&quot;&gt;file name suffix&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name-suffix_002c-adding&quot;&gt;file name suffix, adding&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name-with-wildcards&quot;&gt;file name with wildcards&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcards&quot;&gt;Wildcards&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name_002c-abspath-of&quot;&gt;file name, abspath of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name_002c-basename-of&quot;&gt;file name, basename of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name_002c-directory-part&quot;&gt;file name, directory part&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name_002c-nondirectory-part&quot;&gt;file name, nondirectory part&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file-name_002c-realpath-of&quot;&gt;file name, realpath of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file_002c-reading-from&quot;&gt;file, reading from&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Function&quot;&gt;File Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file_002c-writing-to&quot;&gt;file, writing to&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Function&quot;&gt;File Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-files_002c-assuming-new&quot;&gt;files, assuming new&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-files_002c-assuming-old&quot;&gt;files, assuming old&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Avoiding-Compilation&quot;&gt;Avoiding Compilation&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-files_002c-avoiding-recompilation-of&quot;&gt;files, avoiding recompilation of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Avoiding-Compilation&quot;&gt;Avoiding Compilation&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-files_002c-intermediate&quot;&gt;files, intermediate&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Chained-Rules&quot;&gt;Chained Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-filtering-out-words&quot;&gt;filtering out words&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-filtering-words&quot;&gt;filtering words&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-finding-strings&quot;&gt;finding strings&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-flags&quot;&gt;flags&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-flags-for-compilers&quot;&gt;flags for compilers&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-flavor-of-variable&quot;&gt;flavor of variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavor-Function&quot;&gt;Flavor Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-flavors-of-variables&quot;&gt;flavors of variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-FORCE&quot;&gt;&lt;code&gt;FORCE&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Force-Targets&quot;&gt;Force Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-force-targets&quot;&gt;force targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Force-Targets&quot;&gt;Force Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Fortran_002c-rule-to-compile&quot;&gt;Fortran, rule to compile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-functions&quot;&gt;functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Functions&quot;&gt;Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-functions_002c-for-controlling-make&quot;&gt;functions, for controlling make&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-functions_002c-for-file-names&quot;&gt;functions, for file names&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-functions_002c-for-text&quot;&gt;functions, for text&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-functions_002c-syntax-of&quot;&gt;functions, syntax of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Syntax-of-Functions&quot;&gt;Syntax of Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-functions_002c-user-defined&quot;&gt;functions, user defined&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Call-Function&quot;&gt;Call Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-G&quot;&gt;G&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-g_002b_002b&quot;&gt;&lt;code&gt;g++&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-g_002b_002b-1&quot;&gt;&lt;code&gt;g++&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-gcc&quot;&gt;&lt;code&gt;gcc&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-generating-prerequisites-automatically&quot;&gt;generating prerequisites automatically&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-generating-prerequisites-automatically-1&quot;&gt;generating prerequisites automatically&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-get&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-get-1&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-globbing-_0028wildcards_0029&quot;&gt;globbing (wildcards)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcards&quot;&gt;Wildcards&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-goal&quot;&gt;goal&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#How-Make-Works&quot;&gt;How Make Works&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-goal_002c-default&quot;&gt;goal, default&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#How-Make-Works&quot;&gt;How Make Works&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-goal_002c-default-1&quot;&gt;goal, default&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rules&quot;&gt;Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-goal_002c-how-to-specify&quot;&gt;goal, how to specify&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Guile&quot;&gt;Guile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Function&quot;&gt;Guile Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Guile-1&quot;&gt;Guile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Integration&quot;&gt;Guile Integration&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Guile-example&quot;&gt;Guile example&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Example&quot;&gt;Guile Example&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-guile_002c-conversion-of-types&quot;&gt;guile, conversion of types&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Types&quot;&gt;Guile Types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-H&quot;&gt;H&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-home-directory&quot;&gt;home directory&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcards&quot;&gt;Wildcards&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-I&quot;&gt;I&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-IEEE-Standard-1003_002e2&quot;&gt;IEEE Standard 1003.2&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Overview&quot;&gt;Overview&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ifdef_002c-expansion&quot;&gt;ifdef, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ifeq_002c-expansion&quot;&gt;ifeq, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ifndef_002c-expansion&quot;&gt;ifndef, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ifneq_002c-expansion&quot;&gt;ifneq, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-implicit-rule&quot;&gt;implicit rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Rules&quot;&gt;Implicit Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-implicit-rule_002c-and-directory-search&quot;&gt;implicit rule, and directory search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit_002fSearch&quot;&gt;Implicit/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-implicit-rule_002c-and-VPATH&quot;&gt;implicit rule, and &lt;code&gt;VPATH&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit_002fSearch&quot;&gt;Implicit/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-implicit-rule_002c-definition-of&quot;&gt;implicit rule, definition of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Contents&quot;&gt;Makefile Contents&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-implicit-rule_002c-expansion&quot;&gt;implicit rule, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-implicit-rule_002c-how-to-use&quot;&gt;implicit rule, how to use&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Using-Implicit&quot;&gt;Using Implicit&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-implicit-rule_002c-introduction-to&quot;&gt;implicit rule, introduction to&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#make-Deduces&quot;&gt;make Deduces&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-implicit-rule_002c-predefined&quot;&gt;implicit rule, predefined&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-implicit-rule_002c-search-algorithm&quot;&gt;implicit rule, search algorithm&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Rule-Search&quot;&gt;Implicit Rule Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-implicit-rules_002c-secondary-expansion-of&quot;&gt;implicit rules, secondary expansion of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-included-makefiles_002c-default-directories&quot;&gt;included makefiles, default directories&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-including-_0028MAKEFILES-variable_0029&quot;&gt;including (&lt;code&gt;MAKEFILES&lt;/code&gt; variable)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#MAKEFILES-Variable&quot;&gt;MAKEFILES Variable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-including-_0028MAKEFILE_005fLIST-variable_0029&quot;&gt;including (&lt;code&gt;MAKEFILE_LIST&lt;/code&gt; variable)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-including-other-makefiles&quot;&gt;including other makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-incompatibilities&quot;&gt;incompatibilities&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Missing&quot;&gt;Missing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Info_002c-rule-to-format&quot;&gt;Info, rule to format&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-inheritance_002c-suppressing&quot;&gt;inheritance, suppressing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Suppressing-Inheritance&quot;&gt;Suppressing Inheritance&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-input-during-parallel-execution&quot;&gt;input during parallel execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel-Input&quot;&gt;Parallel Input&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-install-_0028standard-target_0029&quot;&gt;&lt;code&gt;install&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-installation-directories_002c-creating&quot;&gt;installation directories, creating&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Variables&quot;&gt;Directory Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-installations_002c-staged&quot;&gt;installations, staged&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#DESTDIR&quot;&gt;DESTDIR&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-interface-for-loaded-objects&quot;&gt;interface for loaded objects&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-API&quot;&gt;Loaded Object API&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-intermediate-files&quot;&gt;intermediate files&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Chained-Rules&quot;&gt;Chained Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-intermediate-files_002c-preserving&quot;&gt;intermediate files, preserving&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Chained-Rules&quot;&gt;Chained Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-intermediate-targets_002c-explicit&quot;&gt;intermediate targets, explicit&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-interrupt&quot;&gt;interrupt&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Interrupts&quot;&gt;Interrupts&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-J&quot;&gt;J&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-job-slots&quot;&gt;job slots&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-job-slots_002c-and-recursion&quot;&gt;job slots, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-job-slots_002c-sharing&quot;&gt;job slots, sharing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Job-Slots&quot;&gt;Job Slots&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-jobs_002c-limiting-based-on-load&quot;&gt;jobs, limiting based on load&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-jobserver&quot;&gt;jobserver&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Job-Slots&quot;&gt;Job Slots&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-jobserver-on-POSIX&quot;&gt;jobserver on POSIX&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#POSIX-Jobserver&quot;&gt;POSIX Jobserver&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-jobserver-on-Windows&quot;&gt;jobserver on Windows&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Windows-Jobserver&quot;&gt;Windows Jobserver&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-joining-lists-of-words&quot;&gt;joining lists of words&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-K&quot;&gt;K&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-killing-_0028interruption_0029&quot;&gt;killing (interruption)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Interrupts&quot;&gt;Interrupts&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-L&quot;&gt;L&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-last_002dresort-default-rules&quot;&gt;last-resort default rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Last-Resort&quot;&gt;Last Resort&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ld&quot;&gt;&lt;code&gt;ld&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-lex&quot;&gt;&lt;code&gt;lex&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-lex-1&quot;&gt;&lt;code&gt;lex&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Lex_002c-rule-to-run&quot;&gt;Lex, rule to run&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-libraries-for-linking_002c-directory-search&quot;&gt;libraries for linking, directory search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Libraries/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-library-archive_002c-suffix-rule-for&quot;&gt;library archive, suffix rule for&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Suffix-Rules&quot;&gt;Archive Suffix Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-limiting-jobs-based-on-load&quot;&gt;limiting jobs based on load&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-link-libraries_002c-and-directory-search&quot;&gt;link libraries, and directory search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Libraries/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-link-libraries_002c-patterns-matching&quot;&gt;link libraries, patterns matching&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Libraries/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-linking_002c-predefined-rule-for&quot;&gt;linking, predefined rule for&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-lint&quot;&gt;&lt;code&gt;lint&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-lint-1&quot;&gt;&lt;code&gt;lint&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-lint_002c-rule-to-run&quot;&gt;&lt;code&gt;lint&lt;/code&gt;, rule to run&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-list-of-all-prerequisites&quot;&gt;list of all prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-list-of-changed-prerequisites&quot;&gt;list of changed prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-load-average&quot;&gt;load average&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-load-directive&quot;&gt;load directive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#load-Directive&quot;&gt;load Directive&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-loaded-object-API&quot;&gt;loaded object API&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-API&quot;&gt;Loaded Object API&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-loaded-object-example&quot;&gt;loaded object example&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-Example&quot;&gt;Loaded Object Example&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-loaded-object-licensing&quot;&gt;loaded object licensing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-API&quot;&gt;Loaded Object API&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-loaded-objects&quot;&gt;loaded objects&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loading-Objects&quot;&gt;Loading Objects&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-loaded-objects_002c-remaking-of&quot;&gt;loaded objects, remaking of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Remaking-Loaded-Objects&quot;&gt;Remaking Loaded Objects&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-long-lines_002c-splitting&quot;&gt;long lines, splitting&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Splitting-Lines&quot;&gt;Splitting Lines&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-loops-in-variable-expansion&quot;&gt;loops in variable expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-lpr-_0028shell-command_0029&quot;&gt;&lt;code&gt;lpr&lt;/code&gt; (shell command)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Examples&quot;&gt;Wildcard Examples&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-lpr-_0028shell-command_0029-1&quot;&gt;&lt;code&gt;lpr&lt;/code&gt; (shell command)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Empty-Targets&quot;&gt;Empty Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-M&quot;&gt;M&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-m2c&quot;&gt;&lt;code&gt;m2c&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-m2c-1&quot;&gt;&lt;code&gt;m2c&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-macro&quot;&gt;macro&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Using-Variables&quot;&gt;Using Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-make-depend&quot;&gt;&lt;code&gt;make depend&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-make-extensions&quot;&gt;make extensions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Extending-make&quot;&gt;Extending make&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-make-integration&quot;&gt;make integration&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Integrating-make&quot;&gt;Integrating make&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-make-interface-to-guile&quot;&gt;make interface to guile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Interface&quot;&gt;Guile Interface&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-make-procedures-in-guile&quot;&gt;make procedures in guile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Interface&quot;&gt;Guile Interface&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile&quot;&gt;makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile-name&quot;&gt;makefile name&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile-name_002c-how-to-specify&quot;&gt;makefile name, how to specify&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile-rule-parts&quot;&gt;makefile rule parts&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Introduction&quot;&gt;Rule Introduction&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile-syntax_002c-evaluating&quot;&gt;makefile syntax, evaluating&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Eval-Function&quot;&gt;Eval Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile_002c-and-MAKEFILES-variable&quot;&gt;makefile, and &lt;code&gt;MAKEFILES&lt;/code&gt; variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#MAKEFILES-Variable&quot;&gt;MAKEFILES Variable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile_002c-conventions-for&quot;&gt;makefile, conventions for&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Conventions&quot;&gt;Makefile Conventions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile_002c-how-make-processes&quot;&gt;makefile, how &lt;code&gt;make&lt;/code&gt; processes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#How-Make-Works&quot;&gt;How Make Works&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile_002c-how-to-write&quot;&gt;makefile, how to write&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefiles&quot;&gt;Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile_002c-including&quot;&gt;makefile, including&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile_002c-overriding&quot;&gt;makefile, overriding&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Overriding-Makefiles&quot;&gt;Overriding Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile_002c-parsing&quot;&gt;makefile, parsing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile_002c-remaking-of&quot;&gt;makefile, remaking of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Remaking-Makefiles&quot;&gt;Remaking Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile_002c-simple&quot;&gt;makefile, simple&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Simple-Makefile&quot;&gt;Simple Makefile&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefiles_002c-and-MAKEFILE_005fLIST-variable&quot;&gt;makefiles, and &lt;code&gt;MAKEFILE_LIST&lt;/code&gt; variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefiles_002c-and-special-variables&quot;&gt;makefiles, and special variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makeinfo&quot;&gt;&lt;code&gt;makeinfo&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makeinfo-1&quot;&gt;&lt;code&gt;makeinfo&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-match_002danything-rule&quot;&gt;match-anything rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Match_002dAnything-Rules&quot;&gt;Match-Anything Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-match_002danything-rule_002c-used-to-override&quot;&gt;match-anything rule, used to override&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Overriding-Makefiles&quot;&gt;Overriding Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-missing-features&quot;&gt;missing features&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Missing&quot;&gt;Missing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-mistakes-with-wildcards&quot;&gt;mistakes with wildcards&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Pitfall&quot;&gt;Wildcard Pitfall&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-modified-variable-reference&quot;&gt;modified variable reference&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Substitution-Refs&quot;&gt;Substitution Refs&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Modula_002d2_002c-rule-to-compile&quot;&gt;Modula-2, rule to compile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-mostlyclean-_0028standard-target_0029&quot;&gt;&lt;code&gt;mostlyclean&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-multi_002dline-variable-definition&quot;&gt;multi-line variable definition&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multi_002dLine&quot;&gt;Multi-Line&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-multiple-rules-for-one-target&quot;&gt;multiple rules for one target&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multiple-Rules&quot;&gt;Multiple Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-multiple-rules-for-one-target-_0028_003a_003a_0029&quot;&gt;multiple rules for one target (&lt;code&gt;::&lt;/code&gt;)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Double_002dColon&quot;&gt;Double-Colon&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-multiple-targets&quot;&gt;multiple targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multiple-Targets&quot;&gt;Multiple Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-multiple-targets_002c-in-pattern-rule&quot;&gt;multiple targets, in pattern rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern-Intro&quot;&gt;Pattern Intro&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-N&quot;&gt;N&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-name-of-makefile&quot;&gt;name of makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-name-of-makefile_002c-how-to-specify&quot;&gt;name of makefile, how to specify&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-nested-variable-reference&quot;&gt;nested variable reference&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Computed-Names&quot;&gt;Computed Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-newline_002c-quoting_002c-in-makefile&quot;&gt;newline, quoting, in makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Simple-Makefile&quot;&gt;Simple Makefile&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-newline_002c-quoting_002c-in-recipes&quot;&gt;newline, quoting, in recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Splitting-Recipe-Lines&quot;&gt;Splitting Recipe Lines&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-nondirectory-part&quot;&gt;nondirectory part&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-normal-prerequisites&quot;&gt;normal prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Prerequisite-Types&quot;&gt;Prerequisite Types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-O&quot;&gt;O&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-obj&quot;&gt;&lt;code&gt;obj&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables-Simplify&quot;&gt;Variables Simplify&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-OBJ&quot;&gt;&lt;code&gt;OBJ&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables-Simplify&quot;&gt;Variables Simplify&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-objects&quot;&gt;&lt;code&gt;objects&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables-Simplify&quot;&gt;Variables Simplify&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-OBJECTS&quot;&gt;&lt;code&gt;OBJECTS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables-Simplify&quot;&gt;Variables Simplify&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-objects_002c-loaded&quot;&gt;objects, loaded&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loading-Objects&quot;&gt;Loading Objects&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-objs&quot;&gt;&lt;code&gt;objs&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables-Simplify&quot;&gt;Variables Simplify&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-OBJS&quot;&gt;&lt;code&gt;OBJS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables-Simplify&quot;&gt;Variables Simplify&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-old_002dfashioned-suffix-rules&quot;&gt;old-fashioned suffix rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Suffix-Rules&quot;&gt;Suffix Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-options&quot;&gt;options&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-options_002c-and-recursion&quot;&gt;options, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-options_002c-setting-from-environment&quot;&gt;options, setting from environment&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-options_002c-setting-in-makefiles&quot;&gt;options, setting in makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-order-of-pattern-rules&quot;&gt;order of pattern rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern-Match&quot;&gt;Pattern Match&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-order_002donly-prerequisites&quot;&gt;order-only prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Prerequisite-Types&quot;&gt;Prerequisite Types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-origin-of-variable&quot;&gt;origin of variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Origin-Function&quot;&gt;Origin Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-output-during-parallel-execution&quot;&gt;output during parallel execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel-Output&quot;&gt;Parallel Output&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-output-during-parallel-execution-1&quot;&gt;output during parallel execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-overriding-makefiles&quot;&gt;overriding makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Overriding-Makefiles&quot;&gt;Overriding Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-overriding-variables-with-arguments&quot;&gt;overriding variables with arguments&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Overriding&quot;&gt;Overriding&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-overriding-with-override&quot;&gt;overriding with &lt;code&gt;override&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Override-Directive&quot;&gt;Override Directive&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-P&quot;&gt;P&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-parallel-execution&quot;&gt;parallel execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-parallel-execution_002c-and-archive-update&quot;&gt;parallel execution, and archive update&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Pitfalls&quot;&gt;Archive Pitfalls&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-parallel-execution_002c-input-during&quot;&gt;parallel execution, input during&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel-Input&quot;&gt;Parallel Input&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-parallel-execution_002c-output-during&quot;&gt;parallel execution, output during&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel-Output&quot;&gt;Parallel Output&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-parallel-execution_002c-output-during-1&quot;&gt;parallel execution, output during&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-parallel-execution_002c-overriding&quot;&gt;parallel execution, overriding&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-parallel-output-to-terminal&quot;&gt;parallel output to terminal&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Terminal-Output&quot;&gt;Terminal Output&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-parts-of-makefile-rule&quot;&gt;parts of makefile rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Introduction&quot;&gt;Rule Introduction&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Pascal_002c-rule-to-compile&quot;&gt;Pascal, rule to compile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-pattern-rule&quot;&gt;pattern rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern-Intro&quot;&gt;Pattern Intro&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-pattern-rule_002c-expansion&quot;&gt;pattern rule, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-pattern-rules_002c-order-of&quot;&gt;pattern rules, order of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern-Match&quot;&gt;Pattern Match&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-pattern-rules_002c-static-_0028not-implicit_0029&quot;&gt;pattern rules, static (not implicit)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Pattern&quot;&gt;Static Pattern&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-pattern-rules_002c-static_002c-syntax-of&quot;&gt;pattern rules, static, syntax of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-pattern_002dspecific-variables&quot;&gt;pattern-specific variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern_002dspecific&quot;&gt;Pattern-specific&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-pc&quot;&gt;&lt;code&gt;pc&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-pc-1&quot;&gt;&lt;code&gt;pc&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-phony-targets&quot;&gt;phony targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-phony-targets-and-recipe-execution&quot;&gt;phony targets and recipe execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-pitfalls-of-wildcards&quot;&gt;pitfalls of wildcards&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Pitfall&quot;&gt;Wildcard Pitfall&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-plugin_005fis_005fGPL_005fcompatible&quot;&gt;plugin_is_GPL_compatible&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-API&quot;&gt;Loaded Object API&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-portability&quot;&gt;portability&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Features&quot;&gt;Features&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-POSIX&quot;&gt;POSIX&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Overview&quot;&gt;Overview&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-POSIX-1&quot;&gt;POSIX&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-POSIX_002dconforming-mode_002c-setting&quot;&gt;POSIX-conforming mode, setting&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-post_002dinstallation-commands&quot;&gt;post-installation commands&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Install-Command-Categories&quot;&gt;Install Command Categories&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-pre_002dinstallation-commands&quot;&gt;pre-installation commands&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Install-Command-Categories&quot;&gt;Install Command Categories&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-precious-targets&quot;&gt;precious targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-predefined-rules-and-variables_002c-printing&quot;&gt;predefined rules and variables, printing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prefix_002c-adding&quot;&gt;prefix, adding&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisite&quot;&gt;prerequisite&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rules&quot;&gt;Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisite-pattern_002c-implicit&quot;&gt;prerequisite pattern, implicit&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern-Intro&quot;&gt;Pattern Intro&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisite-pattern_002c-static-_0028not-implicit_0029&quot;&gt;prerequisite pattern, static (not implicit)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisite-types&quot;&gt;prerequisite types&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Prerequisite-Types&quot;&gt;Prerequisite Types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisite_002c-expansion&quot;&gt;prerequisite, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisites&quot;&gt;prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisites_002c-and-automatic-variables&quot;&gt;prerequisites, and automatic variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisites_002c-automatic-generation&quot;&gt;prerequisites, automatic generation&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisites_002c-automatic-generation-1&quot;&gt;prerequisites, automatic generation&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisites_002c-introduction-to&quot;&gt;prerequisites, introduction to&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Introduction&quot;&gt;Rule Introduction&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisites_002c-list-of-all&quot;&gt;prerequisites, list of all&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisites_002c-list-of-changed&quot;&gt;prerequisites, list of changed&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisites_002c-normal&quot;&gt;prerequisites, normal&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Prerequisite-Types&quot;&gt;Prerequisite Types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisites_002c-order_002donly&quot;&gt;prerequisites, order-only&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Prerequisite-Types&quot;&gt;Prerequisite Types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prerequisites_002c-varying-_0028static-pattern_0029&quot;&gt;prerequisites, varying (static pattern)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Pattern&quot;&gt;Static Pattern&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-preserving-intermediate-files&quot;&gt;preserving intermediate files&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Chained-Rules&quot;&gt;Chained Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-preserving-with-_002ePRECIOUS&quot;&gt;preserving with &lt;code&gt;.PRECIOUS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-preserving-with-_002ePRECIOUS-1&quot;&gt;preserving with &lt;code&gt;.PRECIOUS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Chained-Rules&quot;&gt;Chained Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-preserving-with-_002eSECONDARY&quot;&gt;preserving with &lt;code&gt;.SECONDARY&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-print-_0028standard-target_0029&quot;&gt;&lt;code&gt;print&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-print-target&quot;&gt;&lt;code&gt;print&lt;/code&gt; target&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Examples&quot;&gt;Wildcard Examples&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-print-target-1&quot;&gt;&lt;code&gt;print&lt;/code&gt; target&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Empty-Targets&quot;&gt;Empty Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-printing-directories&quot;&gt;printing directories&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-printing-messages&quot;&gt;printing messages&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-printing-of-recipes&quot;&gt;printing of recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-printing-user-warnings&quot;&gt;printing user warnings&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-problems-and-bugs_002c-reporting&quot;&gt;problems and bugs, reporting&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Bugs&quot;&gt;Bugs&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-problems-with-wildcards&quot;&gt;problems with wildcards&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Pitfall&quot;&gt;Wildcard Pitfall&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-processing-a-makefile&quot;&gt;processing a makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#How-Make-Works&quot;&gt;How Make Works&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-Q&quot;&gt;Q&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-question-mode&quot;&gt;question mode&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-quoting-_0025_002c-in-patsubst&quot;&gt;quoting &lt;code&gt;%&lt;/code&gt;, in &lt;code&gt;patsubst&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-quoting-_0025_002c-in-static-pattern&quot;&gt;quoting &lt;code&gt;%&lt;/code&gt;, in static pattern&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-quoting-_0025_002c-in-vpath&quot;&gt;quoting &lt;code&gt;%&lt;/code&gt;, in &lt;code&gt;vpath&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Selective-Search&quot;&gt;Selective Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-quoting-newline_002c-in-makefile&quot;&gt;quoting newline, in makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Simple-Makefile&quot;&gt;Simple Makefile&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-quoting-newline_002c-in-recipes&quot;&gt;quoting newline, in recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Splitting-Recipe-Lines&quot;&gt;Splitting Recipe Lines&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-R&quot;&gt;R&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Ratfor_002c-rule-to-compile&quot;&gt;Ratfor, rule to compile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-RCS_002c-rule-to-extract-from&quot;&gt;RCS, rule to extract from&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-reading-from-a-file&quot;&gt;reading from a file&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Function&quot;&gt;File Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-reading-makefiles&quot;&gt;reading makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-README&quot;&gt;&lt;code&gt;README&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-realclean-_0028standard-target_0029&quot;&gt;&lt;code&gt;realclean&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-realpath&quot;&gt;realpath&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipe&quot;&gt;recipe&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Simple-Makefile&quot;&gt;Simple Makefile&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipe-execution_002c-single-invocation&quot;&gt;recipe execution, single invocation&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipe-lines_002c-single-shell&quot;&gt;recipe lines, single shell&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#One-Shell&quot;&gt;One Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipe-syntax&quot;&gt;recipe syntax&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recipe-Syntax&quot;&gt;Recipe Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipe_002c-execution&quot;&gt;recipe, execution&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Execution&quot;&gt;Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes&quot;&gt;recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes-1&quot;&gt;recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recipes&quot;&gt;Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes-setting-shell-variables&quot;&gt;recipes setting shell variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Execution&quot;&gt;Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-and-directory-search&quot;&gt;recipes, and directory search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recipes_002fSearch&quot;&gt;Recipes/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-backslash-_0028_005c_0029-in&quot;&gt;recipes, backslash (&lt;code&gt;\&lt;/code&gt;) in&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Splitting-Recipe-Lines&quot;&gt;Splitting Recipe Lines&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-canned&quot;&gt;recipes, canned&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Canned-Recipes&quot;&gt;Canned Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-comments-in&quot;&gt;recipes, comments in&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recipe-Syntax&quot;&gt;Recipe Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-echoing&quot;&gt;recipes, echoing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-empty&quot;&gt;recipes, empty&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Empty-Recipes&quot;&gt;Empty Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-errors-in&quot;&gt;recipes, errors in&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-execution-in-parallel&quot;&gt;recipes, execution in parallel&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel&quot;&gt;Parallel&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-how-to-write&quot;&gt;recipes, how to write&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recipes&quot;&gt;Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-instead-of-executing&quot;&gt;recipes, instead of executing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-introduction-to&quot;&gt;recipes, introduction to&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Introduction&quot;&gt;Rule Introduction&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-quoting-newlines-in&quot;&gt;recipes, quoting newlines in&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Splitting-Recipe-Lines&quot;&gt;Splitting Recipe Lines&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-splitting&quot;&gt;recipes, splitting&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Splitting-Recipe-Lines&quot;&gt;Splitting Recipe Lines&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recipes_002c-using-variables-in&quot;&gt;recipes, using variables in&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables-in-Recipes&quot;&gt;Variables in Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recompilation&quot;&gt;recompilation&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recompilation_002c-avoiding&quot;&gt;recompilation, avoiding&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Avoiding-Compilation&quot;&gt;Avoiding Compilation&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recording-events-with-empty-targets&quot;&gt;recording events with empty targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Empty-Targets&quot;&gt;Empty Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion&quot;&gt;recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recursion&quot;&gt;Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-_002dC&quot;&gt;recursion, and &lt;code&gt;-C&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-_002df&quot;&gt;recursion, and &lt;code&gt;-f&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-_002dj&quot;&gt;recursion, and &lt;code&gt;-j&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-_002do&quot;&gt;recursion, and &lt;code&gt;-o&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-_002dt&quot;&gt;recursion, and &lt;code&gt;-t&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#MAKE-Variable&quot;&gt;MAKE Variable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-_002dW&quot;&gt;recursion, and &lt;code&gt;-W&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-_002dw&quot;&gt;recursion, and &lt;code&gt;-w&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-command-line-variable-definitions&quot;&gt;recursion, and command line variable definitions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-environment&quot;&gt;recursion, and environment&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-MAKE-variable&quot;&gt;recursion, and &lt;code&gt;MAKE&lt;/code&gt; variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#MAKE-Variable&quot;&gt;MAKE Variable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-MAKEFILES-variable&quot;&gt;recursion, and &lt;code&gt;MAKEFILES&lt;/code&gt; variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#MAKEFILES-Variable&quot;&gt;MAKEFILES Variable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-options&quot;&gt;recursion, and options&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-printing-directories&quot;&gt;recursion, and printing directories&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#g_t_002dw-Option&quot;&gt;-w Option&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-and-variables&quot;&gt;recursion, and variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursion_002c-level-of&quot;&gt;recursion, level of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursive-variable-expansion&quot;&gt;recursive variable expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Using-Variables&quot;&gt;Using Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursive-variable-expansion-1&quot;&gt;recursive variable expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-recursively-expanded-variables&quot;&gt;recursively expanded variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-reference-to-variables&quot;&gt;reference to variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reference&quot;&gt;Reference&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-reference-to-variables-1&quot;&gt;reference to variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Advanced&quot;&gt;Advanced&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-relinking&quot;&gt;relinking&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#How-Make-Works&quot;&gt;How Make Works&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-remaking-loaded-objects&quot;&gt;remaking loaded objects&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Remaking-Loaded-Objects&quot;&gt;Remaking Loaded Objects&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-remaking-makefiles&quot;&gt;remaking makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Remaking-Makefiles&quot;&gt;Remaking Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-removal-of-target-files&quot;&gt;removal of target files&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-removal-of-target-files-1&quot;&gt;removal of target files&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Interrupts&quot;&gt;Interrupts&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-removing-duplicate-words&quot;&gt;removing duplicate words&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-removing-targets-on-failure&quot;&gt;removing targets on failure&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-removing_002c-to-clean-up&quot;&gt;removing, to clean up&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Cleanup&quot;&gt;Cleanup&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-reporting-bugs&quot;&gt;reporting bugs&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Bugs&quot;&gt;Bugs&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rm&quot;&gt;&lt;code&gt;rm&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rm-_0028shell-command_0029&quot;&gt;&lt;code&gt;rm&lt;/code&gt; (shell command)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Simple-Makefile&quot;&gt;Simple Makefile&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rm-_0028shell-command_0029-1&quot;&gt;&lt;code&gt;rm&lt;/code&gt; (shell command)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Examples&quot;&gt;Wildcard Examples&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rm-_0028shell-command_0029-2&quot;&gt;&lt;code&gt;rm&lt;/code&gt; (shell command)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rm-_0028shell-command_0029-3&quot;&gt;&lt;code&gt;rm&lt;/code&gt; (shell command)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule-prerequisites&quot;&gt;rule prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule-syntax&quot;&gt;rule syntax&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule-targets&quot;&gt;rule targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-double_002dcolon-_0028_003a_003a_0029&quot;&gt;rule, double-colon (&lt;code&gt;::&lt;/code&gt;)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Double_002dColon&quot;&gt;Double-Colon&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-explicit_002c-definition-of&quot;&gt;rule, explicit, definition of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Contents&quot;&gt;Makefile Contents&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-how-to-write&quot;&gt;rule, how to write&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rules&quot;&gt;Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-implicit&quot;&gt;rule, implicit&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Rules&quot;&gt;Implicit Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-implicit_002c-and-directory-search&quot;&gt;rule, implicit, and directory search&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit_002fSearch&quot;&gt;Implicit/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-implicit_002c-and-VPATH&quot;&gt;rule, implicit, and &lt;code&gt;VPATH&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit_002fSearch&quot;&gt;Implicit/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-implicit_002c-chains-of&quot;&gt;rule, implicit, chains of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Chained-Rules&quot;&gt;Chained Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-implicit_002c-definition-of&quot;&gt;rule, implicit, definition of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Contents&quot;&gt;Makefile Contents&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-implicit_002c-how-to-use&quot;&gt;rule, implicit, how to use&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Using-Implicit&quot;&gt;Using Implicit&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-implicit_002c-introduction-to&quot;&gt;rule, implicit, introduction to&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#make-Deduces&quot;&gt;make Deduces&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-implicit_002c-predefined&quot;&gt;rule, implicit, predefined&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-introduction-to&quot;&gt;rule, introduction to&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Introduction&quot;&gt;Rule Introduction&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-multiple-for-one-target&quot;&gt;rule, multiple for one target&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multiple-Rules&quot;&gt;Multiple Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-no-recipe-or-prerequisites&quot;&gt;rule, no recipe or prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Force-Targets&quot;&gt;Force Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-pattern&quot;&gt;rule, pattern&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern-Intro&quot;&gt;Pattern Intro&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-static-pattern&quot;&gt;rule, static pattern&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Pattern&quot;&gt;Static Pattern&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-static-pattern-versus-implicit&quot;&gt;rule, static pattern versus implicit&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-versus-Implicit&quot;&gt;Static versus Implicit&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rule_002c-with-multiple-targets&quot;&gt;rule, with multiple targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multiple-Targets&quot;&gt;Multiple Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-rules_002c-and-_0024&quot;&gt;rules, and &lt;code&gt;$&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-S&quot;&gt;S&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-s_002e-_0028SCCS-file-prefix_0029&quot;&gt;&lt;code&gt;s. &lt;span class=&quot;roman&quot;&gt;(SCCS file prefix)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-SCCS_002c-rule-to-extract-from&quot;&gt;SCCS, rule to extract from&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-search-algorithm_002c-implicit-rule&quot;&gt;search algorithm, implicit rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Rule-Search&quot;&gt;Implicit Rule Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-search-path-for-prerequisites-_0028VPATH_0029&quot;&gt;search path for prerequisites (&lt;code&gt;VPATH&lt;/code&gt;)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Search&quot;&gt;Directory Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-search-path-for-prerequisites-_0028VPATH_0029_002c-and-implicit-rules&quot;&gt;search path for prerequisites (&lt;code&gt;VPATH&lt;/code&gt;), and implicit rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit_002fSearch&quot;&gt;Implicit/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-search-path-for-prerequisites-_0028VPATH_0029_002c-and-link-libraries&quot;&gt;search path for prerequisites (&lt;code&gt;VPATH&lt;/code&gt;), and link libraries&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Libraries/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-searching-for-strings&quot;&gt;searching for strings&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-secondary-expansion&quot;&gt;secondary expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-secondary-expansion-and-explicit-rules&quot;&gt;secondary expansion and explicit rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-secondary-expansion-and-implicit-rules&quot;&gt;secondary expansion and implicit rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-secondary-expansion-and-static-pattern-rules&quot;&gt;secondary expansion and static pattern rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-secondary-files&quot;&gt;secondary files&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Chained-Rules&quot;&gt;Chained Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-secondary-targets&quot;&gt;secondary targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-sed-_0028shell-command_0029&quot;&gt;&lt;code&gt;sed&lt;/code&gt; (shell command)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Prerequisites&quot;&gt;Automatic Prerequisites&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-selecting-a-word&quot;&gt;selecting a word&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-selecting-word-lists&quot;&gt;selecting word lists&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-sequences-of-commands&quot;&gt;sequences of commands&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Canned-Recipes&quot;&gt;Canned Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-setting-options-from-environment&quot;&gt;setting options from environment&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-setting-options-in-makefiles&quot;&gt;setting options in makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-setting-variables&quot;&gt;setting variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Setting&quot;&gt;Setting&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-several-rules-for-one-target&quot;&gt;several rules for one target&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multiple-Rules&quot;&gt;Multiple Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-several-targets-in-a-rule&quot;&gt;several targets in a rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multiple-Targets&quot;&gt;Multiple Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-shar-_0028standard-target_0029&quot;&gt;&lt;code&gt;shar&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-shell-command_002c-function-for&quot;&gt;shell command, function for&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Shell-Function&quot;&gt;Shell Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-shell-file-name-pattern-_0028in-include_0029&quot;&gt;shell file name pattern (in &lt;code&gt;include&lt;/code&gt;)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-shell-variables_002c-setting-in-recipes&quot;&gt;shell variables, setting in recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Execution&quot;&gt;Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-shell-wildcards-_0028in-include_0029&quot;&gt;shell wildcards (in &lt;code&gt;include&lt;/code&gt;)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-shell_002c-choosing-the&quot;&gt;shell, choosing the&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-SHELL_002c-exported-value&quot;&gt;SHELL, exported value&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-SHELL_002c-import-from-environment&quot;&gt;SHELL, import from environment&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Environment&quot;&gt;Environment&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-shell_002c-in-DOS-and-Windows&quot;&gt;shell, in DOS and Windows&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-SHELL_002c-MS_002dDOS-specifics&quot;&gt;&lt;code&gt;SHELL&lt;/code&gt;, MS-DOS specifics&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-SHELL_002c-value-of&quot;&gt;&lt;code&gt;SHELL&lt;/code&gt;, value of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-signal&quot;&gt;signal&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Interrupts&quot;&gt;Interrupts&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-silent-operation&quot;&gt;silent operation&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-simple-makefile&quot;&gt;simple makefile&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Simple-Makefile&quot;&gt;Simple Makefile&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-simple-variable-expansion&quot;&gt;simple variable expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Using-Variables&quot;&gt;Using Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-simplifying-with-variables&quot;&gt;simplifying with variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables-Simplify&quot;&gt;Variables Simplify&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-simply-expanded-variables&quot;&gt;simply expanded variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-sorting-words&quot;&gt;sorting words&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-spaces_002c-in-variable-values&quot;&gt;spaces, in variable values&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-spaces_002c-stripping&quot;&gt;spaces, stripping&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-special-targets&quot;&gt;special targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-special-variables&quot;&gt;special variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-specifying-makefile-name&quot;&gt;specifying makefile name&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-splitting-long-lines&quot;&gt;splitting long lines&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Splitting-Lines&quot;&gt;Splitting Lines&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-splitting-recipes&quot;&gt;splitting recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Splitting-Recipe-Lines&quot;&gt;Splitting Recipe Lines&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-staged-installs&quot;&gt;staged installs&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#DESTDIR&quot;&gt;DESTDIR&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-standard-input&quot;&gt;standard input&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Parallel-Input&quot;&gt;Parallel Input&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-standards-conformance&quot;&gt;standards conformance&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Overview&quot;&gt;Overview&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-standards-for-makefiles&quot;&gt;standards for makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Conventions&quot;&gt;Makefile Conventions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-static-pattern-rule&quot;&gt;static pattern rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Pattern&quot;&gt;Static Pattern&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-static-pattern-rule_002c-syntax-of&quot;&gt;static pattern rule, syntax of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-static-pattern-rule_002c-versus-implicit&quot;&gt;static pattern rule, versus implicit&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-versus-Implicit&quot;&gt;Static versus Implicit&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-static-pattern-rules_002c-secondary-expansion-of&quot;&gt;static pattern rules, secondary expansion of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-stem&quot;&gt;stem&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-stem-1&quot;&gt;stem&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern-Match&quot;&gt;Pattern Match&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-stem_002c-shortest&quot;&gt;stem, shortest&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern-Match&quot;&gt;Pattern Match&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-stem_002c-variable-for&quot;&gt;stem, variable for&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-stopping-make&quot;&gt;stopping make&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-strings_002c-searching-for&quot;&gt;strings, searching for&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-stripping-whitespace&quot;&gt;stripping whitespace&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-sub_002dmake&quot;&gt;sub-&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-subdirectories_002c-recursion-for&quot;&gt;subdirectories, recursion for&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recursion&quot;&gt;Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-substitution-variable-reference&quot;&gt;substitution variable reference&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Substitution-Refs&quot;&gt;Substitution Refs&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-suffix-rule&quot;&gt;suffix rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Suffix-Rules&quot;&gt;Suffix Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-suffix-rule_002c-for-archive&quot;&gt;suffix rule, for archive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Suffix-Rules&quot;&gt;Archive Suffix Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-suffix_002c-adding&quot;&gt;suffix, adding&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-suffix_002c-function-to-find&quot;&gt;suffix, function to find&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-suffix_002c-substituting-in-variables&quot;&gt;suffix, substituting in variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Substitution-Refs&quot;&gt;Substitution Refs&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-suppressing-inheritance&quot;&gt;suppressing inheritance&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Suppressing-Inheritance&quot;&gt;Suppressing Inheritance&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-switches&quot;&gt;switches&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-symbol-directories_002c-updating-archive&quot;&gt;symbol directories, updating archive&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Symbols&quot;&gt;Archive Symbols&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-syntax-of-recipe&quot;&gt;syntax of recipe&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recipe-Syntax&quot;&gt;Recipe Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-syntax-of-rules&quot;&gt;syntax of rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-T&quot;&gt;T&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-tab-character-_0028in-commands_0029&quot;&gt;tab character (in commands)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-tabs-in-rules&quot;&gt;tabs in rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Introduction&quot;&gt;Rule Introduction&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-TAGS-_0028standard-target_0029&quot;&gt;&lt;code&gt;TAGS&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-tangle&quot;&gt;&lt;code&gt;tangle&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-tangle-1&quot;&gt;&lt;code&gt;tangle&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-tar-_0028standard-target_0029&quot;&gt;&lt;code&gt;tar&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-target&quot;&gt;target&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rules&quot;&gt;Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-target-pattern_002c-implicit&quot;&gt;target pattern, implicit&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern-Intro&quot;&gt;Pattern Intro&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-target-pattern_002c-static-_0028not-implicit_0029&quot;&gt;target pattern, static (not implicit)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-target_002c-deleting-on-error&quot;&gt;target, deleting on error&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-target_002c-deleting-on-interrupt&quot;&gt;target, deleting on interrupt&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Interrupts&quot;&gt;Interrupts&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-target_002c-expansion&quot;&gt;target, expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reading-Makefiles&quot;&gt;Reading Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-target_002c-multiple-in-pattern-rule&quot;&gt;target, multiple in pattern rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern-Intro&quot;&gt;Pattern Intro&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-target_002c-multiple-rules-for-one&quot;&gt;target, multiple rules for one&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multiple-Rules&quot;&gt;Multiple Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-target_002c-touching&quot;&gt;target, touching&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-target_002dspecific-variables&quot;&gt;target-specific variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Target_002dspecific&quot;&gt;Target-specific&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-targets&quot;&gt;targets&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Syntax&quot;&gt;Rule Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-targets-without-a-file&quot;&gt;targets without a file&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-targets_002c-built_002din-special&quot;&gt;targets, built-in special&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-targets_002c-empty&quot;&gt;targets, empty&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Empty-Targets&quot;&gt;Empty Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-targets_002c-force&quot;&gt;targets, force&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Force-Targets&quot;&gt;Force Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-targets_002c-introduction-to&quot;&gt;targets, introduction to&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rule-Introduction&quot;&gt;Rule Introduction&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-targets_002c-multiple&quot;&gt;targets, multiple&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multiple-Targets&quot;&gt;Multiple Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-targets_002c-phony&quot;&gt;targets, phony&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-terminal-rule&quot;&gt;terminal rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Match_002dAnything-Rules&quot;&gt;Match-Anything Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-terminal_002c-output-to&quot;&gt;terminal, output to&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Terminal-Output&quot;&gt;Terminal Output&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-test-_0028standard-target_0029&quot;&gt;&lt;code&gt;test&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(standard target)&lt;/span&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-testing-compilation&quot;&gt;testing compilation&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Testing&quot;&gt;Testing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-tex&quot;&gt;&lt;code&gt;tex&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-tex-1&quot;&gt;&lt;code&gt;tex&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-TeX_002c-rule-to-run&quot;&gt;TeX, rule to run&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-texi2dvi&quot;&gt;&lt;code&gt;texi2dvi&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-texi2dvi-1&quot;&gt;&lt;code&gt;texi2dvi&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Texinfo_002c-rule-to-format&quot;&gt;Texinfo, rule to format&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-tilde-_0028_007e_0029&quot;&gt;tilde (&lt;code&gt;~&lt;/code&gt;)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcards&quot;&gt;Wildcards&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-tools_002c-sharing-job-slots&quot;&gt;tools, sharing job slots&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Job-Slots&quot;&gt;Job Slots&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-touch-_0028shell-command_0029&quot;&gt;&lt;code&gt;touch&lt;/code&gt; (shell command)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Examples&quot;&gt;Wildcard Examples&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-touch-_0028shell-command_0029-1&quot;&gt;&lt;code&gt;touch&lt;/code&gt; (shell command)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Empty-Targets&quot;&gt;Empty Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-touching-files&quot;&gt;touching files&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-traditional-directory-search-_0028GPATH_0029&quot;&gt;traditional directory search (GPATH)&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Search-Algorithm&quot;&gt;Search Algorithm&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-types-of-prerequisites&quot;&gt;types of prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Prerequisite-Types&quot;&gt;Prerequisite Types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-types_002c-conversion-of&quot;&gt;types, conversion of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Types&quot;&gt;Guile Types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-U&quot;&gt;U&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-undefined-variables_002c-warning-message&quot;&gt;undefined variables, warning message&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-undefining-variable&quot;&gt;undefining variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Undefine-Directive&quot;&gt;Undefine Directive&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-updating-archive-symbol-directories&quot;&gt;updating archive symbol directories&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Symbols&quot;&gt;Archive Symbols&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-updating-loaded-objects&quot;&gt;updating loaded objects&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Remaking-Loaded-Objects&quot;&gt;Remaking Loaded Objects&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-updating-makefiles&quot;&gt;updating makefiles&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Remaking-Makefiles&quot;&gt;Remaking Makefiles&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-user-defined-functions&quot;&gt;user defined functions&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Call-Function&quot;&gt;Call Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-V&quot;&gt;V&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-value&quot;&gt;value&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Using-Variables&quot;&gt;Using Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-value_002c-how-a-variable-gets-it&quot;&gt;value, how a variable gets it&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Values&quot;&gt;Values&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variable&quot;&gt;variable&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Using-Variables&quot;&gt;Using Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variable-definition&quot;&gt;variable definition&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Contents&quot;&gt;Makefile Contents&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variable-references-in-recipes&quot;&gt;variable references in recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables-in-Recipes&quot;&gt;Variables in Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables&quot;&gt;variables&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables-Simplify&quot;&gt;Variables Simplify&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-_0024-in-name&quot;&gt;variables, ‘&lt;samp&gt;$&lt;/samp&gt;’ in name&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Computed-Names&quot;&gt;Computed Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-and-implicit-rule&quot;&gt;variables, and implicit rule&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-appending-to&quot;&gt;variables, appending to&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Appending&quot;&gt;Appending&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-automatic&quot;&gt;variables, automatic&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-command-line&quot;&gt;variables, command line&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Overriding&quot;&gt;Overriding&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-command-line_002c-and-recursion&quot;&gt;variables, command line, and recursion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-computed-names&quot;&gt;variables, computed names&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Computed-Names&quot;&gt;Computed Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-conditional-assignment&quot;&gt;variables, conditional assignment&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-defining-verbatim&quot;&gt;variables, defining verbatim&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multi_002dLine&quot;&gt;Multi-Line&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-environment&quot;&gt;variables, environment&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-environment-1&quot;&gt;variables, environment&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Environment&quot;&gt;Environment&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-exporting&quot;&gt;variables, exporting&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-flavor-of&quot;&gt;variables, flavor of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavor-Function&quot;&gt;Flavor Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-flavors&quot;&gt;variables, flavors&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-how-they-get-their-values&quot;&gt;variables, how they get their values&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Values&quot;&gt;Values&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-how-to-reference&quot;&gt;variables, how to reference&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Reference&quot;&gt;Reference&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-loops-in-expansion&quot;&gt;variables, loops in expansion&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-modified-reference&quot;&gt;variables, modified reference&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Substitution-Refs&quot;&gt;Substitution Refs&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-multi_002dline&quot;&gt;variables, multi-line&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multi_002dLine&quot;&gt;Multi-Line&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-nested-references&quot;&gt;variables, nested references&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Computed-Names&quot;&gt;Computed Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-origin-of&quot;&gt;variables, origin of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Origin-Function&quot;&gt;Origin Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-overriding&quot;&gt;variables, overriding&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Override-Directive&quot;&gt;Override Directive&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-overriding-with-arguments&quot;&gt;variables, overriding with arguments&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Overriding&quot;&gt;Overriding&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-pattern_002dspecific&quot;&gt;variables, pattern-specific&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Pattern_002dspecific&quot;&gt;Pattern-specific&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-recursively-expanded&quot;&gt;variables, recursively expanded&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-setting&quot;&gt;variables, setting&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Setting&quot;&gt;Setting&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-simply-expanded&quot;&gt;variables, simply expanded&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-spaces-in-values&quot;&gt;variables, spaces in values&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-substituting-suffix-in&quot;&gt;variables, substituting suffix in&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Substitution-Refs&quot;&gt;Substitution Refs&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-substitution-reference&quot;&gt;variables, substitution reference&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Substitution-Refs&quot;&gt;Substitution Refs&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-target_002dspecific&quot;&gt;variables, target-specific&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Target_002dspecific&quot;&gt;Target-specific&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-unexpanded-value&quot;&gt;variables, unexpanded value&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Value-Function&quot;&gt;Value Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-variables_002c-warning-for-undefined&quot;&gt;variables, warning for undefined&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options-Summary&quot;&gt;Options Summary&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-varying-prerequisites&quot;&gt;varying prerequisites&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Pattern&quot;&gt;Static Pattern&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-verbatim-variable-definition&quot;&gt;verbatim variable definition&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multi_002dLine&quot;&gt;Multi-Line&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-vpath&quot;&gt;vpath&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Search&quot;&gt;Directory Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-VPATH_002c-and-implicit-rules&quot;&gt;&lt;code&gt;VPATH&lt;/code&gt;, and implicit rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit_002fSearch&quot;&gt;Implicit/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-VPATH_002c-and-link-libraries&quot;&gt;&lt;code&gt;VPATH&lt;/code&gt;, and link libraries&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Libraries/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-W&quot;&gt;W&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-warnings_002c-printing&quot;&gt;warnings, printing&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-weave&quot;&gt;&lt;code&gt;weave&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-weave-1&quot;&gt;&lt;code&gt;weave&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Web_002c-rule-to-run&quot;&gt;Web, rule to run&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-what-if&quot;&gt;what if&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Instead-of-Execution&quot;&gt;Instead of Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-whitespace_002c-in-variable-values&quot;&gt;whitespace, in variable values&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-whitespace_002c-stripping&quot;&gt;whitespace, stripping&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-wildcard&quot;&gt;wildcard&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcards&quot;&gt;Wildcards&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-wildcard-pitfalls&quot;&gt;wildcard pitfalls&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Pitfall&quot;&gt;Wildcard Pitfall&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-wildcard_002c-function&quot;&gt;wildcard, function&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-wildcard_002c-in-archive-member&quot;&gt;wildcard, in archive member&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Archive-Members&quot;&gt;Archive Members&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-wildcard_002c-in-include&quot;&gt;wildcard, in &lt;code&gt;include&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-wildcards-and-MS_002dDOS_002fMS_002dWindows-backslashes&quot;&gt;wildcards and MS-DOS/MS-Windows backslashes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Pitfall&quot;&gt;Wildcard Pitfall&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Windows_002c-choosing-a-shell-in&quot;&gt;Windows, choosing a shell in&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-word_002c-selecting-a&quot;&gt;word, selecting a&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-words_002c-extracting-first&quot;&gt;words, extracting first&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-words_002c-extracting-last&quot;&gt;words, extracting last&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-words_002c-filtering&quot;&gt;words, filtering&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-words_002c-filtering-out&quot;&gt;words, filtering out&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-words_002c-finding-number&quot;&gt;words, finding number&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-words_002c-iterating-over&quot;&gt;words, iterating over&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Foreach-Function&quot;&gt;Foreach Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-words_002c-joining-lists&quot;&gt;words, joining lists&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-words_002c-removing-duplicates&quot;&gt;words, removing duplicates&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-words_002c-selecting-lists-of&quot;&gt;words, selecting lists of&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-writing-recipes&quot;&gt;writing recipes&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recipes&quot;&gt;Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-writing-rules&quot;&gt;writing rules&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Rules&quot;&gt;Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-writing-to-a-file&quot;&gt;writing to a file&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Function&quot;&gt;File Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Concept-Index_cp_letter-Y&quot;&gt;Y&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-yacc-1&quot;&gt;&lt;code&gt;yacc&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-yacc-2&quot;&gt;&lt;code&gt;yacc&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-yacc&quot;&gt;&lt;code&gt;yacc&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Canned-Recipes&quot;&gt;Canned Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Yacc_002c-rule-to-run&quot;&gt;Yacc, rule to run&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th valign=&quot;top&quot;&gt;Jump to: &amp;nbsp; &lt;/th&gt;&lt;td&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-1&quot;&gt;&lt;b&gt;!&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-2&quot;&gt;&lt;b&gt;#&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-3&quot;&gt;&lt;b&gt;$&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-4&quot;&gt;&lt;b&gt;%&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-5&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-6&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-7&quot;&gt;&lt;b&gt;,&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-8&quot;&gt;&lt;b&gt;-&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-9&quot;&gt;&lt;b&gt;.&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-10&quot;&gt;&lt;b&gt;:&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-11&quot;&gt;&lt;b&gt;=&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-12&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-13&quot;&gt;&lt;b&gt;@&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-14&quot;&gt;&lt;b&gt;[&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-15&quot;&gt;&lt;b&gt;\&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-16&quot;&gt;&lt;b&gt;_&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_symbol-17&quot;&gt;&lt;b&gt;~&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-A&quot;&gt;&lt;b&gt;A&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-B&quot;&gt;&lt;b&gt;B&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-C&quot;&gt;&lt;b&gt;C&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-D&quot;&gt;&lt;b&gt;D&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-E&quot;&gt;&lt;b&gt;E&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-F&quot;&gt;&lt;b&gt;F&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-G&quot;&gt;&lt;b&gt;G&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-H&quot;&gt;&lt;b&gt;H&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-I&quot;&gt;&lt;b&gt;I&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-J&quot;&gt;&lt;b&gt;J&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-K&quot;&gt;&lt;b&gt;K&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-L&quot;&gt;&lt;b&gt;L&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-M&quot;&gt;&lt;b&gt;M&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-N&quot;&gt;&lt;b&gt;N&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-O&quot;&gt;&lt;b&gt;O&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-P&quot;&gt;&lt;b&gt;P&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-Q&quot;&gt;&lt;b&gt;Q&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-R&quot;&gt;&lt;b&gt;R&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-S&quot;&gt;&lt;b&gt;S&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-T&quot;&gt;&lt;b&gt;T&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-U&quot;&gt;&lt;b&gt;U&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-V&quot;&gt;&lt;b&gt;V&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-W&quot;&gt;&lt;b&gt;W&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Concept-Index_cp_letter-Y&quot;&gt;&lt;b&gt;Y&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;a name=&quot;Name-Index&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;Previous: &lt;a href=&quot;#Concept-Index&quot; accesskey=&quot;p&quot; rel=&quot;prev&quot;&gt;Concept Index&lt;/a&gt;, Up: &lt;a href=&quot;#Top&quot; accesskey=&quot;u&quot; rel=&quot;up&quot;&gt;Top&lt;/a&gt; &amp;nbsp; [&lt;a href=&quot;#SEC_Contents&quot; title=&quot;Table of contents&quot; rel=&quot;contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;#Concept-Index&quot; title=&quot;Index&quot; rel=&quot;index&quot;&gt;Index&lt;/a&gt;]&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;a name=&quot;Index-of-Functions_002c-Variables_002c-_0026-Directives&quot;&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 class=&quot;unnumbered&quot;&gt;Index of Functions, Variables, &amp;amp; Directives&lt;/h2&gt;

&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th valign=&quot;top&quot;&gt;Jump to: &amp;nbsp; &lt;/th&gt;&lt;td&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-1&quot;&gt;&lt;b&gt;$&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-2&quot;&gt;&lt;b&gt;%&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-3&quot;&gt;&lt;b&gt;&lt;em&gt;&lt;/em&gt;&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-4&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-5&quot;&gt;&lt;b&gt;-&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-6&quot;&gt;&lt;b&gt;.&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-7&quot;&gt;&lt;b&gt;/&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-8&quot;&gt;&lt;b&gt;&amp;lt;&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-9&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-10&quot;&gt;&lt;b&gt;@&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-11&quot;&gt;&lt;b&gt;^&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-12&quot;&gt;&lt;b&gt;|&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-A&quot;&gt;&lt;b&gt;A&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-B&quot;&gt;&lt;b&gt;B&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-C&quot;&gt;&lt;b&gt;C&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-D&quot;&gt;&lt;b&gt;D&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-E&quot;&gt;&lt;b&gt;E&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-F&quot;&gt;&lt;b&gt;F&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-G&quot;&gt;&lt;b&gt;G&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-I&quot;&gt;&lt;b&gt;I&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-J&quot;&gt;&lt;b&gt;J&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-L&quot;&gt;&lt;b&gt;L&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-M&quot;&gt;&lt;b&gt;M&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-N&quot;&gt;&lt;b&gt;N&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-O&quot;&gt;&lt;b&gt;O&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-P&quot;&gt;&lt;b&gt;P&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-R&quot;&gt;&lt;b&gt;R&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-S&quot;&gt;&lt;b&gt;S&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-T&quot;&gt;&lt;b&gt;T&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-U&quot;&gt;&lt;b&gt;U&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-V&quot;&gt;&lt;b&gt;V&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-W&quot;&gt;&lt;b&gt;W&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-Y&quot;&gt;&lt;b&gt;Y&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;table class=&quot;index-fn&quot; border=&quot;0&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;th align=&quot;left&quot;&gt;Index Entry&lt;/th&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;th align=&quot;left&quot;&gt; Section&lt;/th&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-1&quot;&gt;$&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0025&quot;&gt;&lt;code&gt;$%&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_0025D_0029&quot;&gt;&lt;code&gt;$(%D)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_0025F_0029&quot;&gt;&lt;code&gt;$(%F)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_002aD_0029&quot;&gt;&lt;code&gt;$(D)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_002aF_0029&quot;&gt;&lt;code&gt;$(&lt;em&gt;F)&lt;/em&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_002bD_0029&quot;&gt;&lt;code&gt;$(+D)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_002bF_0029&quot;&gt;&lt;code&gt;$(+F)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_003cD_0029&quot;&gt;&lt;code&gt;$(&amp;lt;D)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_003cF_0029&quot;&gt;&lt;code&gt;$(&amp;lt;F)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_003fD_0029&quot;&gt;&lt;code&gt;$(?D)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_003fF_0029&quot;&gt;&lt;code&gt;$(?F)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_0040D_0029&quot;&gt;&lt;code&gt;$(@D)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_0040F_0029&quot;&gt;&lt;code&gt;$(@F)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_005eD_0029&quot;&gt;&lt;code&gt;$(^D)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0028_005eF_0029&quot;&gt;&lt;code&gt;$(^F)&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_002a&quot;&gt;&lt;code&gt;$&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_002a_002c-and-static-pattern&quot;&gt;&lt;code&gt;$&lt;em&gt;&lt;span class=&quot;roman&quot;&gt;, and static pattern&lt;/span&gt;&lt;/em&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Static-Usage&quot;&gt;Static Usage&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_002b&quot;&gt;&lt;code&gt;$+&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_003c&quot;&gt;&lt;code&gt;$&amp;lt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_003f&quot;&gt;&lt;code&gt;$?&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_0040&quot;&gt;&lt;code&gt;$@&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_005e&quot;&gt;&lt;code&gt;$^&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0024_007c&quot;&gt;&lt;code&gt;$|&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-2&quot;&gt;%&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0025-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;% &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0025D-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;%D &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0025F-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;%F &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-3&quot;&gt;&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002a-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;&lt;em&gt; &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/em&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002a-_0028automatic-variable_0029_002c-unsupported-bizarre-usage&quot;&gt;&lt;code&gt; &lt;span class=&quot;roman&quot;&gt;(automatic variable), unsupported bizarre usage&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Missing&quot;&gt;Missing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002aD-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;&lt;em&gt;D &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/em&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002aF-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;F &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-4&quot;&gt;+&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002b-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;+ &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002bD-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;+D &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002bF-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;+F &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-5&quot;&gt;-&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002dload&quot;&gt;&lt;code&gt;-load&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#load-Directive&quot;&gt;load Directive&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-6&quot;&gt;.&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eDEFAULT&quot;&gt;&lt;code&gt;.DEFAULT&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eDEFAULT-1&quot;&gt;&lt;code&gt;.DEFAULT&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Last-Resort&quot;&gt;Last Resort&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eDEFAULT_002c-and-empty-recipes&quot;&gt;&lt;code&gt;.DEFAULT&lt;span class=&quot;roman&quot;&gt;, and empty recipes&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Empty-Recipes&quot;&gt;Empty Recipes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eDEFAULT_005fGOAL-_0028define-default-goal_0029&quot;&gt;&lt;code&gt;.DEFAULT_GOAL &lt;span class=&quot;roman&quot;&gt;(define default goal)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eDELETE_005fON_005fERROR&quot;&gt;&lt;code&gt;.DELETE_ON_ERROR&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eDELETE_005fON_005fERROR-1&quot;&gt;&lt;code&gt;.DELETE_ON_ERROR&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eEXPORT_005fALL_005fVARIABLES&quot;&gt;&lt;code&gt;.EXPORT_ALL_VARIABLES&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eEXPORT_005fALL_005fVARIABLES-1&quot;&gt;&lt;code&gt;.EXPORT_ALL_VARIABLES&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eFEATURES-_0028list-of-supported-features_0029&quot;&gt;&lt;code&gt;.FEATURES &lt;span class=&quot;roman&quot;&gt;(list of supported features)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eIGNORE&quot;&gt;&lt;code&gt;.IGNORE&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eIGNORE-1&quot;&gt;&lt;code&gt;.IGNORE&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Errors&quot;&gt;Errors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eINCLUDE_005fDIRS-_0028list-of-include-directories_0029&quot;&gt;&lt;code&gt;.INCLUDE_DIRS &lt;span class=&quot;roman&quot;&gt;(list of include directories)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eINTERMEDIATE&quot;&gt;&lt;code&gt;.INTERMEDIATE&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eLIBPATTERNS&quot;&gt;&lt;code&gt;.LIBPATTERNS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Libraries_002fSearch&quot;&gt;Libraries/Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eLOADED&quot;&gt;&lt;code&gt;.LOADED&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#load-Directive&quot;&gt;load Directive&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eLOW_005fRESOLUTION_005fTIME&quot;&gt;&lt;code&gt;.LOW_RESOLUTION_TIME&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eNOTPARALLEL&quot;&gt;&lt;code&gt;.NOTPARALLEL&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eONESHELL&quot;&gt;&lt;code&gt;.ONESHELL&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eONESHELL-1&quot;&gt;&lt;code&gt;.ONESHELL&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#One-Shell&quot;&gt;One Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ePHONY&quot;&gt;&lt;code&gt;.PHONY&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Phony-Targets&quot;&gt;Phony Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ePHONY-1&quot;&gt;&lt;code&gt;.PHONY&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ePOSIX&quot;&gt;&lt;code&gt;.POSIX&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ePOSIX-1&quot;&gt;&lt;code&gt;.POSIX&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ePRECIOUS&quot;&gt;&lt;code&gt;.PRECIOUS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002ePRECIOUS-1&quot;&gt;&lt;code&gt;.PRECIOUS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Interrupts&quot;&gt;Interrupts&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eRECIPEPREFIX-_0028change-the-recipe-prefix-character_0029&quot;&gt;&lt;code&gt;.RECIPEPREFIX &lt;span class=&quot;roman&quot;&gt;(change the recipe prefix character)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eSECONDARY&quot;&gt;&lt;code&gt;.SECONDARY&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eSECONDEXPANSION&quot;&gt;&lt;code&gt;.SECONDEXPANSION&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Secondary-Expansion&quot;&gt;Secondary Expansion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eSECONDEXPANSION-1&quot;&gt;&lt;code&gt;.SECONDEXPANSION&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eSHELLFLAGS&quot;&gt;&lt;code&gt;.SHELLFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eSHELLFLAGS-1&quot;&gt;&lt;code&gt;.SHELLFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eSHELLSTATUS&quot;&gt;&lt;code&gt;.SHELLSTATUS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Shell-Function&quot;&gt;Shell Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eSILENT&quot;&gt;&lt;code&gt;.SILENT&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eSILENT-1&quot;&gt;&lt;code&gt;.SILENT&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Echoing&quot;&gt;Echoing&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eSUFFIXES&quot;&gt;&lt;code&gt;.SUFFIXES&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Targets&quot;&gt;Special Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eSUFFIXES-1&quot;&gt;&lt;code&gt;.SUFFIXES&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Suffix-Rules&quot;&gt;Suffix Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002eVARIABLES-_0028list-of-variables_0029&quot;&gt;&lt;code&gt;.VARIABLES &lt;span class=&quot;roman&quot;&gt;(list of variables)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-7&quot;&gt;/&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002fusr_002fgnu_002finclude&quot;&gt;&lt;code&gt;/usr/gnu/include&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002fusr_002finclude&quot;&gt;&lt;code&gt;/usr/include&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_002fusr_002flocal_002finclude&quot;&gt;&lt;code&gt;/usr/local/include&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-8&quot;&gt;&amp;lt;&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003c-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;&amp;lt; &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003cD-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;&amp;lt;D &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003cF-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;&amp;lt;F &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-9&quot;&gt;?&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003f-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;? &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003fD-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;?D &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_003fF-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;?F &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-10&quot;&gt;@&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0040-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;@ &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0040D-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;@D &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_0040F-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;@F &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-11&quot;&gt;^&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_005e-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;^ &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_005eD-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;^D &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_005eF-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;^F &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_symbol-12&quot;&gt;|&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-_007c-_0028automatic-variable_0029&quot;&gt;&lt;code&gt;| &lt;span class=&quot;roman&quot;&gt;(automatic variable)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Automatic-Variables&quot;&gt;Automatic Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-A&quot;&gt;A&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-abspath-1&quot;&gt;&lt;code&gt;abspath&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-addprefix&quot;&gt;&lt;code&gt;addprefix&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-addsuffix&quot;&gt;&lt;code&gt;addsuffix&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditional-Functions&quot;&gt;Conditional Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-AR&quot;&gt;&lt;code&gt;AR&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ARFLAGS&quot;&gt;&lt;code&gt;ARFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-AS&quot;&gt;&lt;code&gt;AS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ASFLAGS&quot;&gt;&lt;code&gt;ASFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-B&quot;&gt;B&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-basename-1&quot;&gt;&lt;code&gt;basename&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-bindir&quot;&gt;&lt;code&gt;bindir&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Variables&quot;&gt;Directory Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-C&quot;&gt;C&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-call&quot;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Call-Function&quot;&gt;Call Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-CC&quot;&gt;&lt;code&gt;CC&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-CFLAGS&quot;&gt;&lt;code&gt;CFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-CO&quot;&gt;&lt;code&gt;CO&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-COFLAGS&quot;&gt;&lt;code&gt;COFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-COMSPEC&quot;&gt;&lt;code&gt;COMSPEC&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-CPP&quot;&gt;&lt;code&gt;CPP&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-CPPFLAGS&quot;&gt;&lt;code&gt;CPPFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-CTANGLE&quot;&gt;&lt;code&gt;CTANGLE&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-CURDIR&quot;&gt;&lt;code&gt;&lt;code&gt;CURDIR&lt;/code&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Recursion&quot;&gt;Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-CWEAVE&quot;&gt;&lt;code&gt;CWEAVE&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-CXX&quot;&gt;&lt;code&gt;CXX&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-CXXFLAGS&quot;&gt;&lt;code&gt;CXXFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-D&quot;&gt;D&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-define&quot;&gt;&lt;code&gt;define&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multi_002dLine&quot;&gt;Multi-Line&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-DESTDIR&quot;&gt;&lt;code&gt;DESTDIR&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#DESTDIR&quot;&gt;DESTDIR&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-dir&quot;&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-E&quot;&gt;E&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-else&quot;&gt;&lt;code&gt;else&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditional-Syntax&quot;&gt;Conditional Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-endef&quot;&gt;&lt;code&gt;endef&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multi_002dLine&quot;&gt;Multi-Line&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-endif&quot;&gt;&lt;code&gt;endif&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditional-Syntax&quot;&gt;Conditional Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Eval-Function&quot;&gt;Eval Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-exec_005fprefix&quot;&gt;&lt;code&gt;exec_prefix&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Variables&quot;&gt;Directory Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-F&quot;&gt;F&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-FC&quot;&gt;&lt;code&gt;FC&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-FFLAGS&quot;&gt;&lt;code&gt;FFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-file&quot;&gt;&lt;code&gt;file&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Function&quot;&gt;File Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-filter_002dout&quot;&gt;&lt;code&gt;filter-out&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-findstring&quot;&gt;&lt;code&gt;findstring&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-firstword&quot;&gt;&lt;code&gt;firstword&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-flavor&quot;&gt;&lt;code&gt;flavor&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavor-Function&quot;&gt;Flavor Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-foreach&quot;&gt;&lt;code&gt;foreach&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Foreach-Function&quot;&gt;Foreach Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-G&quot;&gt;G&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-GET&quot;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-GFLAGS&quot;&gt;&lt;code&gt;GFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-gmk_002deval&quot;&gt;&lt;code&gt;gmk-eval&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Interface&quot;&gt;Guile Interface&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-gmk_002dexpand&quot;&gt;&lt;code&gt;gmk-expand&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Interface&quot;&gt;Guile Interface&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-gmk_005fadd_005ffunction&quot;&gt;&lt;code&gt;gmk_add_function&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-API&quot;&gt;Loaded Object API&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-gmk_005falloc&quot;&gt;&lt;code&gt;gmk_alloc&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-API&quot;&gt;Loaded Object API&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-gmk_005feval&quot;&gt;&lt;code&gt;gmk_eval&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-API&quot;&gt;Loaded Object API&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-gmk_005fexpand&quot;&gt;&lt;code&gt;gmk_expand&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-API&quot;&gt;Loaded Object API&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-gmk_005ffree&quot;&gt;&lt;code&gt;gmk_free&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-API&quot;&gt;Loaded Object API&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-gmk_005ffunc_005fptr&quot;&gt;&lt;code&gt;gmk_func_ptr&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Loaded-Object-API&quot;&gt;Loaded Object API&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-GNUmakefile&quot;&gt;&lt;code&gt;GNUmakefile&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-GPATH&quot;&gt;&lt;code&gt;GPATH&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Search-Algorithm&quot;&gt;Search Algorithm&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-guile&quot;&gt;&lt;code&gt;guile&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Guile-Function&quot;&gt;Guile Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-I&quot;&gt;I&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditional-Functions&quot;&gt;Conditional Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-if-1&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditional-Functions&quot;&gt;Conditional Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ifdef&quot;&gt;&lt;code&gt;ifdef&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditional-Syntax&quot;&gt;Conditional Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ifeq&quot;&gt;&lt;code&gt;ifeq&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditional-Syntax&quot;&gt;Conditional Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ifndef&quot;&gt;&lt;code&gt;ifndef&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditional-Syntax&quot;&gt;Conditional Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-ifneq&quot;&gt;&lt;code&gt;ifneq&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditional-Syntax&quot;&gt;Conditional Syntax&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Include&quot;&gt;Include&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-info&quot;&gt;&lt;code&gt;info&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-J&quot;&gt;J&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-L&quot;&gt;L&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-lastword&quot;&gt;&lt;code&gt;lastword&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-LDFLAGS&quot;&gt;&lt;code&gt;LDFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-LDLIBS&quot;&gt;&lt;code&gt;LDLIBS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-LEX&quot;&gt;&lt;code&gt;LEX&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-LFLAGS&quot;&gt;&lt;code&gt;LFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-libexecdir&quot;&gt;&lt;code&gt;libexecdir&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Variables&quot;&gt;Directory Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-LINT&quot;&gt;&lt;code&gt;LINT&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-LINTFLAGS&quot;&gt;&lt;code&gt;LINTFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#load-Directive&quot;&gt;load Directive&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-LOADLIBES&quot;&gt;&lt;code&gt;LOADLIBES&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-M&quot;&gt;M&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-M2C&quot;&gt;&lt;code&gt;M2C&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKE&quot;&gt;&lt;code&gt;MAKE&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#MAKE-Variable&quot;&gt;MAKE Variable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKE-1&quot;&gt;&lt;code&gt;MAKE&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKECMDGOALS&quot;&gt;&lt;code&gt;MAKECMDGOALS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Goals&quot;&gt;Goals&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-Makefile&quot;&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-makefile-1&quot;&gt;&lt;code&gt;makefile&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Makefile-Names&quot;&gt;Makefile Names&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKEFILES&quot;&gt;&lt;code&gt;MAKEFILES&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#MAKEFILES-Variable&quot;&gt;MAKEFILES Variable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKEFILES-1&quot;&gt;&lt;code&gt;MAKEFILES&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKEFILE_005fLIST-_0028list-of-parsed-makefiles_0029&quot;&gt;&lt;code&gt;MAKEFILE_LIST &lt;span class=&quot;roman&quot;&gt;(list of parsed makefiles)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKEFLAGS&quot;&gt;&lt;code&gt;MAKEFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKEINFO&quot;&gt;&lt;code&gt;MAKEINFO&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKELEVEL&quot;&gt;&lt;code&gt;MAKELEVEL&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKELEVEL-1&quot;&gt;&lt;code&gt;MAKELEVEL&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Flavors&quot;&gt;Flavors&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKEOVERRIDES&quot;&gt;&lt;code&gt;MAKEOVERRIDES&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKESHELL-_0028MS_002dDOS-alternative-to-SHELL_0029&quot;&gt;&lt;code&gt;&lt;code&gt;MAKESHELL&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(MS-DOS alternative to &lt;code&gt;SHELL&lt;/code&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKE_005fHOST&quot;&gt;&lt;code&gt;MAKE_HOST&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Quick-Reference&quot;&gt;Quick Reference&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKE_005fRESTARTS-_0028number-of-times-make-has-restarted_0029&quot;&gt;&lt;code&gt;MAKE_RESTARTS &lt;span class=&quot;roman&quot;&gt;(number of times &lt;code&gt;make&lt;/code&gt; has restarted)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKE_005fTERMERR-_0028whether-stderr-is-a-terminal_0029&quot;&gt;&lt;code&gt;MAKE_TERMERR &lt;span class=&quot;roman&quot;&gt;(whether stderr is a terminal)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKE_005fTERMOUT-_0028whether-stdout-is-a-terminal_0029&quot;&gt;&lt;code&gt;MAKE_TERMOUT &lt;span class=&quot;roman&quot;&gt;(whether stdout is a terminal)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Special-Variables&quot;&gt;Special Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MAKE_005fVERSION&quot;&gt;&lt;code&gt;MAKE_VERSION&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Quick-Reference&quot;&gt;Quick Reference&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-MFLAGS&quot;&gt;&lt;code&gt;MFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Options_002fRecursion&quot;&gt;Options/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-N&quot;&gt;N&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-notdir&quot;&gt;&lt;code&gt;notdir&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-O&quot;&gt;O&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Conditional-Functions&quot;&gt;Conditional Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-origin&quot;&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Origin-Function&quot;&gt;Origin Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-OUTPUT_005fOPTION&quot;&gt;&lt;code&gt;OUTPUT_OPTION&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Catalogue-of-Rules&quot;&gt;Catalogue of Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-override&quot;&gt;&lt;code&gt;override&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Override-Directive&quot;&gt;Override Directive&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-P&quot;&gt;P&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-patsubst&quot;&gt;&lt;code&gt;patsubst&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Substitution-Refs&quot;&gt;Substitution Refs&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-patsubst-1&quot;&gt;&lt;code&gt;patsubst&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-PC&quot;&gt;&lt;code&gt;PC&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-PFLAGS&quot;&gt;&lt;code&gt;PFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-prefix&quot;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Variables&quot;&gt;Directory Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-private&quot;&gt;&lt;code&gt;private&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Suppressing-Inheritance&quot;&gt;Suppressing Inheritance&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-R&quot;&gt;R&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-realpath-1&quot;&gt;&lt;code&gt;realpath&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-RFLAGS&quot;&gt;&lt;code&gt;RFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-RM&quot;&gt;&lt;code&gt;RM&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-S&quot;&gt;S&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-sbindir&quot;&gt;&lt;code&gt;sbindir&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Variables&quot;&gt;Directory Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-SHELL&quot;&gt;&lt;code&gt;SHELL&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-SHELL-1&quot;&gt;&lt;code&gt;SHELL&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Choosing-the-Shell&quot;&gt;Choosing the Shell&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Shell-Function&quot;&gt;Shell Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-SHELL-_0028recipe-execution_0029&quot;&gt;&lt;code&gt;&lt;code&gt;SHELL&lt;/code&gt; &lt;span class=&quot;roman&quot;&gt;(recipe execution)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Execution&quot;&gt;Execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-sort&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-strip&quot;&gt;&lt;code&gt;strip&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-subst&quot;&gt;&lt;code&gt;subst&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Multiple-Targets&quot;&gt;Multiple Targets&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-subst-1&quot;&gt;&lt;code&gt;subst&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-suffix&quot;&gt;&lt;code&gt;suffix&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-SUFFIXES&quot;&gt;&lt;code&gt;SUFFIXES&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Suffix-Rules&quot;&gt;Suffix Rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-T&quot;&gt;T&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-TANGLE&quot;&gt;&lt;code&gt;TANGLE&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-TEX&quot;&gt;&lt;code&gt;TEX&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-TEXI2DVI&quot;&gt;&lt;code&gt;TEXI2DVI&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-U&quot;&gt;U&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-undefine&quot;&gt;&lt;code&gt;undefine&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Undefine-Directive&quot;&gt;Undefine Directive&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-unexport&quot;&gt;&lt;code&gt;unexport&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Variables_002fRecursion&quot;&gt;Variables/Recursion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-V&quot;&gt;V&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-value-1&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Value-Function&quot;&gt;Value Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-VPATH&quot;&gt;&lt;code&gt;VPATH&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Search&quot;&gt;Directory Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-VPATH-1&quot;&gt;&lt;code&gt;VPATH&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#General-Search&quot;&gt;General Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-vpath-1&quot;&gt;&lt;code&gt;vpath&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Directory-Search&quot;&gt;Directory Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-vpath-2&quot;&gt;&lt;code&gt;vpath&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Selective-Search&quot;&gt;Selective Search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-W&quot;&gt;W&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-warning&quot;&gt;&lt;code&gt;warning&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Make-Control-Functions&quot;&gt;Make Control Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-WEAVE&quot;&gt;&lt;code&gt;WEAVE&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-wildcard-1&quot;&gt;&lt;code&gt;wildcard&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Wildcard-Function&quot;&gt;Wildcard Function&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-wildcard-2&quot;&gt;&lt;code&gt;wildcard&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#File-Name-Functions&quot;&gt;File Name Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-word&quot;&gt;&lt;code&gt;word&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-wordlist&quot;&gt;&lt;code&gt;wordlist&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-words&quot;&gt;&lt;code&gt;words&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Text-Functions&quot;&gt;Text Functions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;th&gt;&lt;a name=&quot;Name-Index_fn_letter-Y&quot;&gt;Y&lt;/a&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-YACC&quot;&gt;&lt;code&gt;YACC&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#index-YFLAGS&quot;&gt;&lt;code&gt;YFLAGS&lt;/code&gt;&lt;/a&gt;:&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;a href=&quot;#Implicit-Variables&quot;&gt;Implicit Variables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt; &lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th valign=&quot;top&quot;&gt;Jump to: &amp;nbsp; &lt;/th&gt;&lt;td&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-1&quot;&gt;&lt;b&gt;$&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-2&quot;&gt;&lt;b&gt;%&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-3&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-4&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-5&quot;&gt;&lt;b&gt;-&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-6&quot;&gt;&lt;b&gt;.&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-7&quot;&gt;&lt;b&gt;/&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-8&quot;&gt;&lt;b&gt;&amp;lt;&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-9&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-10&quot;&gt;&lt;b&gt;@&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-11&quot;&gt;&lt;b&gt;^&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_symbol-12&quot;&gt;&lt;b&gt;|&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-A&quot;&gt;&lt;b&gt;A&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-B&quot;&gt;&lt;b&gt;B&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-C&quot;&gt;&lt;b&gt;C&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-D&quot;&gt;&lt;b&gt;D&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-E&quot;&gt;&lt;b&gt;E&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-F&quot;&gt;&lt;b&gt;F&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-G&quot;&gt;&lt;b&gt;G&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-I&quot;&gt;&lt;b&gt;I&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-J&quot;&gt;&lt;b&gt;J&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-L&quot;&gt;&lt;b&gt;L&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-M&quot;&gt;&lt;b&gt;M&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-N&quot;&gt;&lt;b&gt;N&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-O&quot;&gt;&lt;b&gt;O&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-P&quot;&gt;&lt;b&gt;P&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-R&quot;&gt;&lt;b&gt;R&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-S&quot;&gt;&lt;b&gt;S&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-T&quot;&gt;&lt;b&gt;T&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-U&quot;&gt;&lt;b&gt;U&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-V&quot;&gt;&lt;b&gt;V&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-W&quot;&gt;&lt;b&gt;W&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;a class=&quot;summary-letter&quot; href=&quot;#Name-Index_fn_letter-Y&quot;&gt;&lt;b&gt;Y&lt;/b&gt;&lt;/a&gt;&lt;br&gt; &amp;nbsp;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;div class=&quot;footnote&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h4 class=&quot;footnotes-heading&quot;&gt;Footnotes&lt;/h4&gt;

&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;FOOT1&quot; href=&quot;#DOCF1&quot;&gt;(1)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;GNU Make compiled for MS-DOS and MS-Windows behaves as if&lt;br&gt;&lt;var&gt;prefix&lt;/var&gt; has been defined to be the root of the DJGPP tree&lt;br&gt;hierarchy.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;FOOT2&quot; href=&quot;#DOCF2&quot;&gt;(2)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;On&lt;br&gt;MS-DOS, the value of current working directory is &lt;strong&gt;global&lt;/strong&gt;, so&lt;br&gt;changing it &lt;em&gt;will&lt;/em&gt; affect the following recipe lines on those&lt;br&gt;systems.&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;div class=&quot;shortcontents&quot;&gt;&lt;br&gt;&lt;ul class=&quot;no-bullet&quot;&gt;&lt;br&gt;&lt;li&gt;&lt;a name=&quot;stoc-Overview-of-make&quot; href=&quot;#toc-Overview-of-make&quot;&gt;1 Overview of &lt;cod
    
    </summary>
    
    
      <category term="linux" scheme="http://wangdongen.cn/tags/linux/"/>
    
      <category term="makefile" scheme="http://wangdongen.cn/tags/makefile/"/>
    
      <category term="c++" scheme="http://wangdongen.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>UIL之DiskLruCache 源码分析</title>
    <link href="http://wangdongen.cn/2016/06/29/DiskLruCache/"/>
    <id>http://wangdongen.cn/2016/06/29/DiskLruCache/</id>
    <published>2016-06-29T13:51:31.000Z</published>
    <updated>2016-06-29T15:43:31.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;LRU是Least-Recently-Used-近期最少使用算法。&quot;&gt;&lt;a href=&quot;#LRU是Least-Recently-Used-近期最少使用算法。&quot; class=&quot;headerlink&quot; title=&quot;LRU是Least Recently Used 近期最少使用算法。&quot;&gt;&lt;/a&gt;LRU是Least Recently Used 近期最少使用算法。&lt;/h2&gt;&lt;p&gt;内存管理的一种页面置换算法，对于在内存中但又不用的数据块（内存块）叫做LRU，操作系统会根据哪些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。&lt;br&gt;    什么是LRU算法？ LRU是Least Recently Used的缩写，即最近最少使用，常用于页面置换算法，是为虚拟页式存储管理服务的。&lt;br&gt;关于操作系统的内存管理，如何节省利用容量不大的内存为最多的进程提供资源，一直是研究的重要方向。而内存的虚拟存储管理，是现在最通用，最成功的方式—— 在内存有限的情况下，扩展一部分外存作为虚拟内存，真正的内存只存储当前运行时所用得到信息。这无疑极大地扩充了内存的功能，极大地提高了计算机的并发度。虚拟页式存储管理，则是将进程所需空间划分为多个页面，内存中只存放当前所需页面，其余页面放入外存的管理方式。&lt;br&gt;然而，有利就有弊，虚拟页式存储管理减少了进程所需的内存空间，却也带来了运行时间变长这一缺点：进程运行过程中，不可避免地要把在外存中存放的一些信息和内存中已有的进行交换，由于外存的低速，这一步骤所花费的时间不可忽略。因而，采取尽量好的算法以减少读取外存的次数，也是相当有意义的事情。&lt;/p&gt;
&lt;h6 id=&quot;以上摘抄自百度百科&quot;&gt;&lt;a href=&quot;#以上摘抄自百度百科&quot; class=&quot;headerlink&quot; title=&quot;以上摘抄自百度百科&quot;&gt;&lt;/a&gt;以上摘抄自百度百科&lt;/h6&gt;&lt;hr&gt;
&lt;h2 id=&quot;LruDiskCache在android的应用&quot;&gt;&lt;a href=&quot;#LruDiskCache在android的应用&quot; class=&quot;headerlink&quot; title=&quot;LruDiskCache在android的应用&quot;&gt;&lt;/a&gt;LruDiskCache在android的应用&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;通过查看universalimageloader源代码分析DiskLruCache。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;下面是给出的DiskLruCache算法的注释：
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * This cache uses a journal file named &quot;journal&quot;. A typical journal file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * looks like this:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     libcore.io.DiskLruCache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     CLEAN 3400330d1dfc7f3f7f4b8d4d803dfcf6 832 21054&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     DIRTY 335c4c6028171cfddfbaae1a9c313c52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     CLEAN 335c4c6028171cfddfbaae1a9c313c52 3934 2342&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     REMOVE 335c4c6028171cfddfbaae1a9c313c52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     DIRTY 1ab96a171faeeee38496d8b330771a7a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     CLEAN 1ab96a171faeeee38496d8b330771a7a 1600 234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     READ 335c4c6028171cfddfbaae1a9c313c52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     READ 3400330d1dfc7f3f7f4b8d4d803dfcf6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The first five lines of the journal form its header. They are the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * constant string &quot;libcore.io.DiskLruCache&quot;, the disk cache&#39;s version,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * the application&#39;s version, the value count, and a blank line.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Each of the subsequent lines in the file is a record of the state of a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * cache entry. Each line contains space-separated values: a state, a key,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * and optional state-specific values.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   o DIRTY lines track that an entry is actively being created or updated.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     Every successful DIRTY action should be followed by a CLEAN or REMOVE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     action. DIRTY lines without a matching CLEAN or REMOVE indicate that&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     temporary files may need to be deleted.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   o CLEAN lines track a cache entry that has been successfully published&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     and may be read. A publish line is followed by the lengths of each of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     its values.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   o READ lines track accesses for LRU.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   o REMOVE lines track entries that have been deleted.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The journal file is appended to as cache operations occur. The journal may&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * occasionally be compacted by dropping redundant lines. A temporary file named&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &quot;journal.tmp&quot; will be used during compaction; that file should be deleted if&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * it exists when the cache is opened.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;缓存是存放在一个journal的文件里面进行对文件的管理（ &lt;code&gt;DIRTY、CLEAN、REMOVE、READ&lt;/code&gt; )格式可以参考上边的注释，说的很清楚。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DIRTY一行代表一个新的文件就要创建或更新,每一个成功的DIRTY创建完之后，都应该跟着一个CLEAN或者REMOVE，如果后面没有跟他们其中的一个，预示着这个文件需要删除。调用 &lt;code&gt;edit（String key, long expectedSequenceNumber）&lt;/code&gt; 会写入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CLEAN行说明该缓存文件已经正常缓存，用户可以读取了，后面跟随着文件的length，当调用 &lt;code&gt;completeEdit（Editor editor, boolean success）&lt;/code&gt; 并且存储成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;REMOVE说明文件已经被删除掉了，调用 &lt;code&gt;remove（String key)&lt;/code&gt; 方法或者存储失败的时候。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;READ说明文件已经被读取了，需调用 &lt;code&gt;get（String key）&lt;/code&gt; 方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;读取journer文件的方法如下：
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readJournal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	StrictLineReader reader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StrictLineReader(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(journalFile), Util.US_ASCII);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String magic = reader.readLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String version = reader.readLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String appVersionString = reader.readLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String valueCountString = reader.readLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String blank = reader.readLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!MAGIC.equals(magic)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				|| !VERSION_1.equals(version)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				|| !Integer.toString(appVersion).equals(appVersionString)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				|| !Integer.toString(valueCount).equals(valueCountString)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				|| !&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.equals(blank)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;string&quot;&gt;&quot;unexpected journal header: [&quot;&lt;/span&gt; + magic + &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; + version + &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					+ valueCountString + &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; + blank + &lt;span class=&quot;string&quot;&gt;&quot;]&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lineCount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				readJournalLine(reader.readLine());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				lineCount++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (EOFException endOfJournal) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		redundantOpCount = lineCount - lruEntries.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Util.closeQuietly(reader);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;内部存储单元 Entry&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;内部通过一个有序的LinkedHashMap保存lruEntries,Entry内部存储currentEditor进行对文件的处理。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Entry&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** Lengths of this entry&#39;s files. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[] lengths;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** True if this entry has ever been published. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; readable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** The ongoing edit or null if this entry is not being edited. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Editor currentEditor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** The sequence number of the most recently committed edit to this entry. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; sequenceNumber;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.key = key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lengths = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[valueCount];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Edits the values for an entry. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Editor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Entry entry;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[] written;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; hasErrors;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; committed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Editor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Entry entry)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.entry = entry;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.written = (entry.readable) ? &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[valueCount];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Returns an unbuffered input stream to read the last committed value,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * or null if no value has been committed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; InputStream &lt;span class=&quot;title&quot;&gt;newInputStream&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (DiskLruCache.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (entry.currentEditor != &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!entry.readable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(entry.getCleanFile(index));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Returns the last committed value as a string, or null if no value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * has been committed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		InputStream in = newInputStream(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; in != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? inputStreamToString(in) : &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Returns a new unbuffered output stream to write the value at&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; index&amp;#125;. If the underlying output stream encounters errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * when writing to the filesystem, this edit will be aborted when&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #commit&amp;#125; is called. The returned output stream does not throw&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * IOExceptions.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; OutputStream &lt;span class=&quot;title&quot;&gt;newOutputStream&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (DiskLruCache.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (entry.currentEditor != &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!entry.readable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				written[index] = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			File dirtyFile = entry.getDirtyFile(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			FileOutputStream outputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				outputStream = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileOutputStream(dirtyFile);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// Attempt to recreate the cache directory.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				directory.mkdirs();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					outputStream = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileOutputStream(dirtyFile);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;comment&quot;&gt;// We are unable to recover. Silently eat the writes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NULL_OUTPUT_STREAM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FaultHidingOutputStream(outputStream);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** Sets the value at &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; index&amp;#125; to &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; value&amp;#125;. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index, String value)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Writer writer = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			writer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OutputStreamWriter(newOutputStream(index), Util.UTF_8);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			writer.write(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Util.closeQuietly(writer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Commits this edit so it is visible to readers.  This releases the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * edit lock so another edit may be started on the same key.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasErrors) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			completeEdit(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			remove(entry.key); &lt;span class=&quot;comment&quot;&gt;// The previous entry is stale.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			completeEdit(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		committed = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Aborts this edit. This releases the edit lock so another edit may be&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * started on the same key.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		completeEdit(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;abortUnlessCommitted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!committed) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				abort();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException ignored) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FaultHidingOutputStream&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FilterOutputStream&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FaultHidingOutputStream&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(OutputStream out)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(out);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; oneByte)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				out.write(oneByte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				hasErrors = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] buffer, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; offset, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				out.write(buffer, offset, length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				hasErrors = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				out.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				hasErrors = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				out.flush();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				hasErrors = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Snapshot主要是负责文件的获取内容&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** A snapshot of the values for an entry. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Snapshot&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Closeable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; sequenceNumber;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; File[] files;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; InputStream[] ins;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[] lengths;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Snapshot&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String key, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; sequenceNumber, File[] files, InputStream[] ins, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[] lengths)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.key = key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sequenceNumber = sequenceNumber;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.files = files;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ins = ins;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lengths = lengths;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Returns an editor for this snapshot&#39;s entry, or null if either the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * entry has changed since this snapshot was created or if another edit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * is in progress.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Editor &lt;span class=&quot;title&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DiskLruCache.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.edit(key, sequenceNumber);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** Returns file with the value for &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; index&amp;#125;. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; File &lt;span class=&quot;title&quot;&gt;getFile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; files[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** Returns the unbuffered stream with the value for &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; index&amp;#125;. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; InputStream &lt;span class=&quot;title&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ins[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** Returns the string value for &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; index&amp;#125;. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inputStreamToString(getInputStream(index));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** Returns the byte length of the value for &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; index&amp;#125;. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getLength&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lengths[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (InputStream in : ins) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Util.closeQuietly(in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;那看我们如何应用DiskLruCache&quot;&gt;&lt;a href=&quot;#那看我们如何应用DiskLruCache&quot; class=&quot;headerlink&quot; title=&quot;那看我们如何应用DiskLruCache&quot;&gt;&lt;/a&gt;那看我们如何应用DiskLruCache&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;先看 LruDiskCache这个类很简单的实现 DiskCache 接口。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Interface for disk cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; Sergey Tarasevich (nostra13[at]gmail[dot]com)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@since&lt;/span&gt; 1.9.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DiskCache&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Returns root directory of disk cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; Root directory of disk cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;File &lt;span class=&quot;title&quot;&gt;getDirectory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Returns file of cached image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; imageUri Original image URI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; File of cached image or &amp;lt;b&amp;gt;null&amp;lt;/b&amp;gt; if image wasn&#39;t cached&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;File &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Saves image stream in disk cache.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Incoming image stream shouldn&#39;t be closed in this method.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; imageUri    Original image URI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; imageStream Input stream of image (shouldn&#39;t be closed in this method)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; listener    Listener for saving progress, can be ignored if you don&#39;t use&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 *                    &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@linkplain&lt;/span&gt; com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 *                    progress listener&amp;#125; in ImageLoader calls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; &amp;lt;b&amp;gt;true&amp;lt;/b&amp;gt; - if image was saved successfully; &amp;lt;b&amp;gt;false&amp;lt;/b&amp;gt; - if image wasn&#39;t saved in disk cache.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; java.io.IOException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri, InputStream imageStream, IoUtils.CopyListener listener)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Saves image bitmap in disk cache.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; imageUri Original image URI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; bitmap   Image bitmap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; &amp;lt;b&amp;gt;true&amp;lt;/b&amp;gt; - if bitmap was saved successfully; &amp;lt;b&amp;gt;false&amp;lt;/b&amp;gt; - if bitmap wasn&#39;t saved in disk cache.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; IOException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri, Bitmap bitmap)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Removes image file associated with incoming URI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; imageUri Image URI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; &amp;lt;b&amp;gt;true&amp;lt;/b&amp;gt; - if image file is deleted successfully; &amp;lt;b&amp;gt;false&amp;lt;/b&amp;gt; - if image file doesn&#39;t exist for&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * incoming URI or image file can&#39;t be deleted.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** Closes disk cache, releases resources. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** Clears disk cache. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;具体实现该接口代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;通过get，save，remove 对缓存文件进行读写。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LruDiskCache&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DiskCache&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; File &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DiskLruCache.Snapshot snapshot = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			snapshot = cache.get(getKey(imageUri));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; snapshot == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; : snapshot.getFile(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			L.e(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (snapshot != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				snapshot.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri, InputStream imageStream, IoUtils.CopyListener listener)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DiskLruCache.Editor editor = cache.edit(getKey(imageUri));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (editor == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		OutputStream os = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedOutputStream(editor.newOutputStream(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), bufferSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; copied = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			copied = IoUtils.copyStream(imageStream, os, listener, bufferSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			IoUtils.closeSilently(os);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (copied) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				editor.commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				editor.abort();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; copied;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri, Bitmap bitmap)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DiskLruCache.Editor editor = cache.edit(getKey(imageUri));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (editor == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		OutputStream os = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedOutputStream(editor.newOutputStream(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), bufferSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; savedSuccessfully = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			savedSuccessfully = bitmap.compress(compressFormat, compressQuality, os);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			IoUtils.closeSilently(os);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (savedSuccessfully) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			editor.commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			editor.abort();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; savedSuccessfully;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cache.remove(getKey(imageUri));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			L.e(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;当通过get方法获取缓存文件时，会判断journal是否重建。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * We only rebuild the journal when it will halve the size of the journal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * and eliminate at least 2000 ops.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;journalRebuildRequired&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; redundantOpCompactThreshold = &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; redundantOpCount &amp;gt;= redundantOpCompactThreshold &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;amp;&amp;amp; redundantOpCount &amp;gt;= lruEntries.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;如果需要重建会调用下面的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Creates a new journal that omits redundant information. This replaces the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * current journal if it exists.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rebuildJournal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (journalWriter != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		journalWriter.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Writer writer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedWriter(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OutputStreamWriter(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileOutputStream(journalFileTmp), Util.US_ASCII));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		writer.write(MAGIC);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		writer.write(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		writer.write(VERSION_1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		writer.write(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		writer.write(Integer.toString(appVersion));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		writer.write(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		writer.write(Integer.toString(valueCount));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		writer.write(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		writer.write(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Entry entry : lruEntries.values()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (entry.currentEditor != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				writer.write(DIRTY + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + entry.key + &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				writer.write(CLEAN + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + entry.key + entry.getLengths() + &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		writer.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (journalFile.exists()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		renameTo(journalFile, journalFileBackup, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	renameTo(journalFileTmp, journalFile, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	journalFileBackup.delete();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	journalWriter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedWriter(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OutputStreamWriter(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileOutputStream(journalFile, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;), Util.US_ASCII));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;而且还会通过size和fileCount对文件进行清理 &lt;code&gt;trimToSize（）&lt;/code&gt; and &lt;code&gt;trimToFileCount（）&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;trimToSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (size &amp;gt; maxSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Map.Entry&amp;lt;String, Entry&amp;gt; toEvict = lruEntries.entrySet().iterator().next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		remove(toEvict.getKey());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;trimToFileCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (fileCount &amp;gt; maxFileCount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Map.Entry&amp;lt;String, Entry&amp;gt; toEvict = lruEntries.entrySet().iterator().next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		remove(toEvict.getKey());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;这样universalimageloader的DiskLruCache分析到这-有什么不懂的可以联系我&quot;&gt;&lt;a href=&quot;#这样universalimageloader的DiskLruCache分析到这-有什么不懂的可以联系我&quot; class=&quot;headerlink&quot; title=&quot;这样universalimageloader的DiskLruCache分析到这,有什么不懂的可以联系我&quot;&gt;&lt;/a&gt;这样universalimageloader的DiskLruCache分析到这,有什么不懂的可以&lt;a href=&quot;/about&quot;&gt;联系我&lt;/a&gt;&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LRU是Least-Recently-Used-近期最少使用算法。&quot;&gt;&lt;a href=&quot;#LRU是Least-Recently-Used-近期最少使用算法。&quot; class=&quot;headerlink&quot; title=&quot;LRU是Least Recently Used 近期
    
    </summary>
    
    
      <category term="cache" scheme="http://wangdongen.cn/tags/cache/"/>
    
      <category term="LruCache" scheme="http://wangdongen.cn/tags/LruCache/"/>
    
  </entry>
  
  <entry>
    <title>Java 如何有效地避免OOM：善于利用软引用和弱引用</title>
    <link href="http://wangdongen.cn/2016/06/21/use-SoftReference-and-WeakReference/"/>
    <id>http://wangdongen.cn/2016/06/21/use-SoftReference-and-WeakReference/</id>
    <published>2016-06-21T10:08:35.000Z</published>
    <updated>2016-06-22T08:19:23.000Z</updated>
    
    <content type="html">&lt;p&gt;　　想必很多朋友对OOM（OutOfMemory）这个错误不会陌生，而当遇到这种错误如何有效地解决这个问题呢？今天我们就来说一下如何利用软引用和弱引用来有效地解决程序中出现的OOM问题。下面是本文的目录大纲：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一.了解 强引用、软引用、弱引用、虚引用的概念&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二.进一步理解软引用和弱引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;三.如何利用软引用和弱引用解决OOM问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一-了解-强引用、软引用、弱引用、虚引用的概念&quot;&gt;&lt;a href=&quot;#一-了解-强引用、软引用、弱引用、虚引用的概念&quot; class=&quot;headerlink&quot; title=&quot;一.了解 强引用、软引用、弱引用、虚引用的概念&quot;&gt;&lt;/a&gt;&lt;em&gt;一.了解 强引用、软引用、弱引用、虚引用的概念&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;　　在Java中，虽然不需要程序员手动去管理对象的生命周期，但是如果希望某些对象具备一定的生命周期的话（比如内存不足时JVM就会自动回收某些对象从而避免OutOfMemory的错误）就需要用到软引用和弱引用了。&lt;/p&gt;
&lt;p&gt;　　从Java SE2开始，就提供了四种类型的引用：强引用、软引用、弱引用和虚引用。Java中提供这四种引用类型主要有两个目的：第一是可以让程序员通过代码的方式决定某些对象的生命周期；第二是有利于JVM进行垃圾回收。下面来阐述一下这四种类型引用的概念：&lt;/p&gt;
&lt;h3 id=&quot;1-强引用（StrongReference）&quot;&gt;&lt;a href=&quot;#1-强引用（StrongReference）&quot; class=&quot;headerlink&quot; title=&quot;1.强引用（StrongReference）&quot;&gt;&lt;/a&gt;1.强引用（StrongReference）&lt;/h3&gt;&lt;p&gt;　　强引用就是指在程序代码之中普遍存在的，比如下面这段代码中的object和str都是强引用：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Object object = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Object();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str = &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;　　只要某个对象有强引用与之关联，JVM必定不会回收这个对象，即使在内存不足的情况下，JVM宁愿抛出OutOfMemory错误也不会回收这种对象。比如下面这段代码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Main().fun1();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fun1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Object object = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Object();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Object[] objArr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Object[&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　当运行至Object[] objArr = new Object[1000];这句时，如果内存不足，JVM会抛出OOM错误也不会回收object指向的对象。不过要注意的是，当fun1运行完之后，object和objArr都已经不存在了，所以它们指向的对象都会被JVM回收。&lt;/p&gt;
&lt;p&gt;   如果想中断强引用和某个对象之间的关联，可以显示地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象。&lt;/p&gt;
&lt;p&gt;　　比如Vector类的clear方法中就是通过将引用赋值为null来实现清理工作的：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Removes the element at the specified position in this Vector.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Shifts any subsequent elements to the left (subtracts one from their&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * indices).  Returns the element that was removed from the Vector.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; ArrayIndexOutOfBoundsException if the index is out of range&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *         (&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; index &amp;lt; 0 || index &amp;gt;= size()&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; index the index of the element to be removed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; element that was removed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@since&lt;/span&gt; 1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; E &lt;span class=&quot;title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    modCount++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (index &amp;gt;= elementCount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayIndexOutOfBoundsException(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Object oldValue = elementData[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numMoved = elementCount - index - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (numMoved &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.arraycopy(elementData, index+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, elementData, index,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 numMoved);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    elementData[--elementCount] = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// Let gc do its work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (E)oldValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-软引用（SoftReference）&quot;&gt;&lt;a href=&quot;#2-软引用（SoftReference）&quot; class=&quot;headerlink&quot; title=&quot;2.软引用（SoftReference）&quot;&gt;&lt;/a&gt;2.软引用（SoftReference）&lt;/h3&gt;&lt;p&gt;　　软引用是用来描述一些有用但并不是必需的对象，在Java中用java.lang.ref.SoftReference类来表示。对于软引用关联着的对象，只有在内存不足的时候JVM才会回收该对象。因此，这一点可以很好地用来解决OOM的问题，并且这个特性很适合用来实现缓存：比如网页缓存、图片缓存等。&lt;/p&gt;
&lt;p&gt;　　软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被JVM回收，这个软引用就会被加入到与之关联的引用队列中。下面是一个使用示例：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.ref.SoftReference;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SoftReference&amp;lt;String&amp;gt; sr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SoftReference&amp;lt;String&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(sr.get());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-弱引用（WeakReference）&quot;&gt;&lt;a href=&quot;#3-弱引用（WeakReference）&quot; class=&quot;headerlink&quot; title=&quot;3.弱引用（WeakReference）&quot;&gt;&lt;/a&gt;3.弱引用（WeakReference）&lt;/h3&gt;&lt;p&gt;　　弱引用也是用来描述非必需对象的，当JVM进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象。在java中，用java.lang.ref.WeakReference类来表示。下面是使用示例：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.ref.WeakReference;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        WeakReference&amp;lt;String&amp;gt; sr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WeakReference&amp;lt;String&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(sr.get());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.gc();                &lt;span class=&quot;comment&quot;&gt;//通知JVM的gc进行垃圾回收&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(sr.get());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出结果为：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　第二个输出结果是null，这说明只要JVM进行垃圾回收，被弱引用关联的对象必定会被回收掉。不过要注意的是，这里所说的被弱引用关联的对象是指只有弱引用与之关联，如果存在强引用同时与之关联，则进行垃圾回收时也不会回收该对象（软引用也是如此）。&lt;/p&gt;
&lt;p&gt;　　弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被JVM回收，这个软引用就会被加入到与之关联的引用队列中。&lt;/p&gt;
&lt;h3 id=&quot;4-虚引用（PhantomReference）&quot;&gt;&lt;a href=&quot;#4-虚引用（PhantomReference）&quot; class=&quot;headerlink&quot; title=&quot;4.虚引用（PhantomReference）&quot;&gt;&lt;/a&gt;4.虚引用（PhantomReference）&lt;/h3&gt;&lt;p&gt;　　虚引用和前面的软引用、弱引用不同，它并不影响对象的生命周期。在java中用java.lang.ref.PhantomReference类表示。如果一个对象与虚引用关联，则跟没有引用与之关联一样，在任何时候都可能被垃圾回收器回收。&lt;/p&gt;
&lt;p&gt;　　要注意的是，虚引用必须和引用队列关联使用，当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会把这个虚引用加入到与之 关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.ref.PhantomReference;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.ref.ReferenceQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ReferenceQueue&amp;lt;String&amp;gt; queue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReferenceQueue&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PhantomReference&amp;lt;String&amp;gt; pr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PhantomReference&amp;lt;String&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;), queue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(pr.get());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;二-进一步理解软引用和弱引用&quot;&gt;&lt;a href=&quot;#二-进一步理解软引用和弱引用&quot; class=&quot;headerlink&quot; title=&quot;二.进一步理解软引用和弱引用&quot;&gt;&lt;/a&gt;&lt;em&gt;二.进一步理解软引用和弱引用&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;　　对于强引用，我们平时在编写代码时经常会用到。而对于其他三种类型的引用，使用得最多的就是软引用和弱引用，这2种既有相似之处又有区别。它们都是用来描述非必需对象的，但是被软引用关联的对象只有在内存不足时才会被回收，而被弱引用关联的对象在JVM进行垃圾回收时总会被回收。&lt;/p&gt;
&lt;p&gt;　　在SoftReference类中，有三个方法，两个构造方法和一个get方法（WekReference类似）：&lt;/p&gt;
&lt;p&gt;　　两个构造方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SoftReference&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T referent)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(referent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.timestamp = clock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SoftReference&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T referent, ReferenceQueue&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T&amp;gt; q)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(referent, q);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.timestamp = clock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;get方法用来获取与软引用关联的对象的引用，如果该对象被回收了，则返回null。&lt;/p&gt;
&lt;p&gt; 　　在使用软引用和弱引用的时候，我们可以显示地通过System.gc()来通知JVM进行垃圾回收，但是要注意的是，虽然发出了通知，JVM不一定会立刻执行，也就是说这句是无法确保此时JVM一定会进行垃圾回收的。&lt;/p&gt;
&lt;h2 id=&quot;三-如何利用软引用和弱引用解决OOM问题&quot;&gt;&lt;a href=&quot;#三-如何利用软引用和弱引用解决OOM问题&quot; class=&quot;headerlink&quot; title=&quot;三.如何利用软引用和弱引用解决OOM问题&quot;&gt;&lt;/a&gt;&lt;em&gt;三.如何利用软引用和弱引用解决OOM问题&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;　　前面讲了关于软引用和弱引用相关的基础知识，那么到底如何利用它们来优化程序性能，从而避免OOM的问题呢？&lt;/p&gt;
&lt;p&gt;　　下面举个例子，假如有一个应用需要读取大量的本地图片，如果每次读取图片都从硬盘读取，则会严重影响性能，但是如果全部加载到内存当中，又有可能造成内存溢出，此时使用软引用可以解决这个问题。&lt;/p&gt;
&lt;p&gt;　　设计思路是：用一个HashMap来保存图片的路径 和 相应图片对象关联的软引用之间的映射关系，在内存不足时，JVM会自动回收这些缓存图片对象所占用的空间，从而有效地避免了OOM的问题。在Android开发中对于大量图片下载会经常用到。&lt;/p&gt;
&lt;p&gt;　　下面这段代码是摘自博客：&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://blog.csdn.net/arui319/article/details/8489451&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/arui319/article/details/8489451&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, SoftReference&amp;lt;Bitmap&amp;gt;&amp;gt; imageCache = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, SoftReference&amp;lt;Bitmap&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addBitmapToCache&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String path)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 强引用的Bitmap对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Bitmap bitmap = BitmapFactory.decodeFile(path);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 软引用的Bitmap对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SoftReference&amp;lt;Bitmap&amp;gt; softBitmap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SoftReference&amp;lt;Bitmap&amp;gt;(bitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 添加该对象到Map中使其缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        imageCache.put(path, softBitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Bitmap &lt;span class=&quot;title&quot;&gt;getBitmapByPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String path)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 从缓存中取软引用的Bitmap对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SoftReference&amp;lt;Bitmap&amp;gt; softBitmap = imageCache.get(path);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 判断是否存在软引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (softBitmap == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 取出Bitmap对象，如果由于内存不足Bitmap被回收，将取得空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Bitmap bitmap = softBitmap.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bitmap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;　　当然这里我们把缓存替换策略交给了JVM去执行，这是一种比较简单的处理方法。复杂一点的缓存，我们可以自己单独设计一个类，这里面就涉及到缓存策略的问题了，具体可以参考之前的一篇博文：《&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/p/3749259.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;缓存算法（页面置换算法）-FIFO、LFU、LRU&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;转自 &lt;a href=&quot;http://www.cnblogs.com/dolphin0520/p/3784171.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/dolphin0520/p/3784171.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;p&gt;《深入理解JVM虚拟机》&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/arui319/article/details/8489451&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/arui319/article/details/8489451&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zsuguangh/article/details/6429592&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/zsuguangh/article/details/6429592&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mobile.51cto.com/abased-406998.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mobile.51cto.com/abased-406998.htm&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　想必很多朋友对OOM（OutOfMemory）这个错误不会陌生，而当遇到这种错误如何有效地解决这个问题呢？今天我们就来说一下如何利用软引用和弱引用来有效地解决程序中出现的OOM问题。下面是本文的目录大纲：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一.了解 强引用、软引用、弱引用
    
    </summary>
    
    
      <category term="java" scheme="http://wangdongen.cn/tags/java/"/>
    
      <category term="memory" scheme="http://wangdongen.cn/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>图片框架系列（一）UIL介绍篇</title>
    <link href="http://wangdongen.cn/2016/06/19/UniversalImageLoader/"/>
    <id>http://wangdongen.cn/2016/06/19/UniversalImageLoader/</id>
    <published>2016-06-19T02:16:51.000Z</published>
    <updated>2016-06-19T02:41:40.000Z</updated>
    
    <content type="html">&lt;p&gt;Android library &lt;strong&gt;&lt;a href=&quot;https://www.gitrep.com/search?utf8=✓&amp;amp;omni_search=&amp;amp;public_tags%5B%5D=android&amp;amp;description=&amp;amp;search=true&amp;amp;sort=star_count&amp;amp;commit=Search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#1&lt;/a&gt;&lt;/strong&gt; on GitHub.&lt;br&gt;UIL aims to provide a powerful, flexible and highly customizable instrument for image loading, caching and displaying. It provides a lot of configuration options and good control over the image loading and caching process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/UniversalImageLoader.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Project-News&quot;&gt;&lt;a href=&quot;#Project-News&quot; class=&quot;headerlink&quot; title=&quot;Project News&quot;&gt;&lt;/a&gt;Project News&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Really have no time for development… so I stop project maintaining since Nov 27 :(&lt;/li&gt;
&lt;li&gt;UIL [27.11.2011 - 27.11.2015]&lt;/li&gt;
&lt;li&gt;Thanks to all developers for your support :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Features&quot;&gt;&lt;a href=&quot;#Features&quot; class=&quot;headerlink&quot; title=&quot;Features&quot;&gt;&lt;/a&gt;Features&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Multithread image loading (async or sync)&lt;/li&gt;
&lt;li&gt;Wide customization of ImageLoader’s configuration (thread executors, downloader, decoder, memory and disk cache, display image options, etc.)&lt;/li&gt;
&lt;li&gt;Many customization options for every display image call (stub images, caching switch, decoding options, Bitmap processing and displaying, etc.)&lt;/li&gt;
&lt;li&gt;Image caching in memory and/or on disk (device’s file system or SD card)&lt;/li&gt;
&lt;li&gt;Listening loading process (including downloading progress)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android 2.0+ support&lt;/p&gt;
&lt;h2 id=&quot;Downloads&quot;&gt;&lt;a href=&quot;#Downloads&quot; class=&quot;headerlink&quot; title=&quot;Downloads&quot;&gt;&lt;/a&gt;Downloads&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/downloads/universal-image-loader-1.9.5.jar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;universal-image-loader-1.9.5.jar&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Documentation&quot;&gt;&lt;a href=&quot;#Documentation&quot; class=&quot;headerlink&quot; title=&quot;Documentation&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Documentation&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/wiki/Quick-Setup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quick Setup&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/wiki/Configuration&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/wiki/Display-Options&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Display Options&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/wiki/Useful-Info&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Useful Info&lt;/a&gt; - Read it before asking a question&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/wiki/User-Support&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;User Support&lt;/a&gt; - Read it before creating new issue&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/tree/master/sample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sample project&lt;/a&gt; - Learn it to understand the right way of library usage&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/blob/master/CHANGELOG.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChangeLog&lt;/a&gt; - Info about API changes is here&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;&lt;h3 id=&quot;Acceptable-URIs-examples&quot;&gt;&lt;a href=&quot;#Acceptable-URIs-examples&quot; class=&quot;headerlink&quot; title=&quot;Acceptable URIs examples&quot;&gt;&lt;/a&gt;Acceptable URIs examples&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;http://site.com/image.png&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// from Web&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;file:///mnt/sdcard/image.png&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// from SD card&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;file:///mnt/sdcard/video.mp4&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// from SD card (video thumbnail)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;content://media/external/images/media/13&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// from content provider&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;content://media/external/video/media/13&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// from content provider (video thumbnail)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;assets://image.png&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// from assets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;drawable://&quot;&lt;/span&gt; + R.drawable.img &lt;span class=&quot;comment&quot;&gt;// from drawables (non-9patch images)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Use &lt;code&gt;drawable://&lt;/code&gt; only if you really need it! Always &lt;strong&gt;consider the native way&lt;/strong&gt; to load drawables - &lt;code&gt;ImageView.setImageResource(...)&lt;/code&gt; instead of using of &lt;code&gt;ImageLoader&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Simple&quot;&gt;&lt;a href=&quot;#Simple&quot; class=&quot;headerlink&quot; title=&quot;Simple&quot;&gt;&lt;/a&gt;Simple&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ImageLoader imageLoader = ImageLoader.getInstance(); &lt;span class=&quot;comment&quot;&gt;// Get singleton instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Load image, decode it to Bitmap and display Bitmap in ImageView (or any other view &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	which implements ImageAware interface)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imageLoader.displayImage(imageUri, imageView);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Load image, decode it to Bitmap and return Bitmap to callback&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imageLoader.loadImage(imageUri, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleImageLoadingListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLoadingComplete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri, View view, Bitmap loadedImage)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Do whatever you want with Bitmap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Load image, decode it to Bitmap and return Bitmap synchronously&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bitmap bmp = imageLoader.loadImageSync(imageUri);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Complete&quot;&gt;&lt;a href=&quot;#Complete&quot; class=&quot;headerlink&quot; title=&quot;Complete&quot;&gt;&lt;/a&gt;Complete&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Load image, decode it to Bitmap and display Bitmap in ImageView (or any other view &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	which implements ImageAware interface)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imageLoader.displayImage(imageUri, imageView, options, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ImageLoadingListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLoadingStarted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri, View view)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLoadingFailed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri, View view, FailReason failReason)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLoadingComplete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri, View view, Bitmap loadedImage)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLoadingCancelled&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri, View view)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ImageLoadingProgressListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onProgressUpdate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri, View view, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; current, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; total)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Load image, decode it to Bitmap and return Bitmap to callback&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ImageSize targetSize = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ImageSize(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// result Bitmap will be fit to this size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imageLoader.loadImage(imageUri, targetSize, options, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleImageLoadingListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLoadingComplete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String imageUri, View view, Bitmap loadedImage)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Do whatever you want with Bitmap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Load image, decode it to Bitmap and return Bitmap synchronously&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ImageSize targetSize = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ImageSize(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// result Bitmap will be fit to this size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bitmap bmp = imageLoader.loadImageSync(imageUri, targetSize, options);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Load-amp-Display-Task-Flow&quot;&gt;&lt;a href=&quot;#Load-amp-Display-Task-Flow&quot; class=&quot;headerlink&quot; title=&quot;Load &amp;amp; Display Task Flow&quot;&gt;&lt;/a&gt;Load &amp;amp; Display Task Flow&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/wiki/UIL_Flow.png&quot; alt=&quot;Task Flow&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Applications-using-Universal-Image-Loader&quot;&gt;&lt;a href=&quot;#Applications-using-Universal-Image-Loader&quot; class=&quot;headerlink&quot; title=&quot;Applications using Universal Image Loader&quot;&gt;&lt;/a&gt;Applications using Universal Image Loader&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.dbapp.android.mediahouse&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MediaHouse, UPnP/DLNA Browser&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.vernazza.androidfuel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Prezzi Benzina (AndroidFuel)&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.jrummy.liberty.toolbox&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROM Toolbox Lite&lt;/a&gt;&lt;/strong&gt;, &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.jrummy.liberty.toolboxpro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pro&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.astro.stadium.activities&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stadium Astro&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.sencha.test&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chef Astro&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.sporee.android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sporee - Live Soccer Scores&lt;/a&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.baseapp.eyeem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EyeEm - Photo Filter Camera&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.topface.topface&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Topface - meeting is easy&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.andrewshu.android.reddit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reddit is fun&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.pixelcrater.Diaro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Diaro - personal diary&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.meetup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Meetup&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.vingle.android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vingle - Magazines by Fans&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.maxxt.animeradio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anime Music Radio&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.companionfree.WLThemeViewer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WidgetLocker Theme Viewer&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.luckydroid.tumblelog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ShortBlogger for Tumblr&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.vuzz.snapdish&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SnapDish Food Camera&lt;/a&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=tv.twitch.android.viewer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Twitch&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.tozelabs.tvshowtime&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TVShow Time, TV show guide&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.ministrycentered.PlanningCenter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Planning Center Services&lt;/a&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.ui.LapseIt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lapse It&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.mycloudplayers.mycloudplayer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My Cloud Player for SoundCloud&lt;/a&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.schematiclabs.soundtracking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SoundTracking&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.looplr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LoopLR Social Video&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=hu.sanomamedia.hir24&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hír24&lt;/a&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=de.is24.android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Immobilien Scout24&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=de.lieferheld.android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lieferheld - Pizza Pasta Sushi&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.ivicode.loocator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Loocator: free sex datings&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.mediahubs.www&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;벨팡-개편 이벤트,컬러링,벨소리,무료,최신가요,링투유&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.tuxera.streambels&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Streambels AirPlay/DLNA Player&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=shipmate.carnival&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ship Mate - All Cruise Lines&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.mobile_infographics_tools.mydrive&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Disk &amp;amp; Storage Analyzer&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=qsbk.app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;糗事百科&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.vladyud.balance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Balance BY&lt;/a&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=br.com.verde.alarme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anti Theft Alarm - Security&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.android.DroidLiveLite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XiiaLive™ - Internet Radio&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.bandsintown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bandsintown Concerts&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=jp.fuukiemonster.webmemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Save As Web Archive&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.newidea.mcpestore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MCPE STORE -Download MCPE file&lt;/a&gt; | &lt;strong&gt;&lt;a href=&quot;http://aiotoolbox.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;All-In-One Toolbox (29 Tools)&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=net.zaim.android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zaim&lt;/a&gt; | &lt;strong&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.digitalchemy.calculator.freedecimal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Calculator Plus Free&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.truecaller.phoneapp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Truedialer by Truecaller&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.snoggdoggler.android.applications.doggcatcher.v1_0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DoggCatcher Podcast Player&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=ua.com.streamsoft.pingtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PingTools Network Utilities&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=edu.bsu.android.apps.traveler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Traveler&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.minube.app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;minube: travel photo album&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=goko.ws2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wear Store for Wear Apps&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=goko.gcs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cast Store for Chromecast Apps&lt;/a&gt; | &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.webmoney.my&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebMoney Keeper&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Donation&quot;&gt;&lt;a href=&quot;#Donation&quot; class=&quot;headerlink&quot; title=&quot;Donation&quot;&gt;&lt;/a&gt;Donation&lt;/h2&gt;&lt;p&gt;You can support the project and thank the author for his hard work :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pledgie.com/campaigns/19144&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img alt=&quot;Click here to lend your support to: Universal Image Loader for Android and make a donation at pledgie.com !&quot; src=&quot;https://pledgie.com/campaigns/19144.png?skin_name=chrome&quot; border=&quot;0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://flattr.com/thing/1110177/nostra13Android-Universal-Image-Loader-on-GitHub&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://api.flattr.com/button/flattr-badge-large.png&quot; alt=&quot;Flattr this&quot; title=&quot;Flattr this&quot; border=&quot;0&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PayPal&lt;/strong&gt; - nostra.uil[at]gmail[dot]com&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Alternative-libraries&quot;&gt;&lt;a href=&quot;#Alternative-libraries&quot; class=&quot;headerlink&quot; title=&quot;Alternative libraries&quot;&gt;&lt;/a&gt;Alternative libraries&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/android-query/wiki/ImageLoading&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidQuery : ImageLoading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://droidparts.org/image_fetcher.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DroidParts : ImageFetcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/fresco&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fresco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bumptech/glide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Glide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/square/picasso&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Picasso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/koush/UrlImageViewHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UrlImageViewHelper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/volley/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Volley : ImageLoader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;License&quot;&gt;&lt;a href=&quot;#License&quot; class=&quot;headerlink&quot; title=&quot;License&quot;&gt;&lt;/a&gt;License&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Copyright 2011-2015 Sergey Tarasevich

Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Android library &lt;strong&gt;&lt;a href=&quot;https://www.gitrep.com/search?utf8=✓&amp;amp;omni_search=&amp;amp;public_tags%5B%5D=android&amp;amp;description=&amp;amp
    
    </summary>
    
    
      <category term="Android" scheme="http://wangdongen.cn/tags/Android/"/>
    
      <category term="图片框架" scheme="http://wangdongen.cn/tags/%E5%9B%BE%E7%89%87%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vim入门基础</title>
    <link href="http://wangdongen.cn/2016/06/15/vim%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
    <id>http://wangdongen.cn/2016/06/15/vim入门基础/</id>
    <published>2016-06-15T07:39:10.000Z</published>
    <updated>2016-06-15T07:46:22.000Z</updated>
    
    <content type="html">&lt;p&gt;文章转自&lt;a href=&quot;http://www.jianshu.com/p/bcbe916f97e1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;甲鱼 Vim入门基础&lt;/a&gt;,如需删除，联系本人删除，谢谢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images.cnitblog.com/blog/379772/201306/14142737-eaf681b3f8d04c5085d0c6efdd85684f.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;图片来自： &lt;a href=&quot;http://www.cnblogs.com/zhangsf/archive/2013/06/13/3134409.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/zhangsf/archive/2013/06/13/3134409.html&lt;/a&gt;`&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公司新员工学习有用到，Vim官网的手册又太大而全，而网上各方资料要么不全面，要么不够基础。在网上搜集各方资料，按照自己的框架整理一份Vim入门基础教程，分享出来。特点是偏向基础，但对入门者来说足够全面，而且结构框架清晰。&lt;br&gt;另外，参考资料众多，没有一一标出来，如果作者看到，请联系我确认一下是否参考了你的资料，我会在文中标注出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;Vim（Vi[Improved]）编辑器是功能强大的跨平台文本文件编辑工具，继承自Unix系统的Vi编辑器，支持Linux/Mac OS X/Windows系统，利用它可以建立、修改文本文件。进入Vim编辑程序，可以在终端输入下面的命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$vim [filename]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;filename&lt;/code&gt;是要编辑器的文件的路径名。如果文件不存在，它将为你建立一个新文件。Vim编辑程序有三种操作模式，分别称为 &lt;strong&gt;编辑模式&lt;/strong&gt;、&lt;strong&gt;插入模式&lt;/strong&gt; 和 &lt;strong&gt;命令模式&lt;/strong&gt;，当运行Vim时，首先进入编辑模式。&lt;/p&gt;
&lt;h2 id=&quot;2-编辑模式&quot;&gt;&lt;a href=&quot;#2-编辑模式&quot; class=&quot;headerlink&quot; title=&quot;2. 编辑模式&quot;&gt;&lt;/a&gt;2. 编辑模式&lt;/h2&gt;&lt;p&gt;Vim编辑方式的主要用途是在被编辑的文件中移动光标的位置。一旦光标移到到所要的位置，就可以进行剪切和粘贴正文块，删除正文和插入新的正文。当完成所有的编辑工作后，需要保存编辑器结果，退出编辑程序回到终端，可以发出&lt;code&gt;ZZ&lt;/code&gt;命令，连续按两次大写的&lt;code&gt;Z&lt;/code&gt;键。&lt;/p&gt;
&lt;h3 id=&quot;2-1-跳转&quot;&gt;&lt;a href=&quot;#2-1-跳转&quot; class=&quot;headerlink&quot; title=&quot;2.1 跳转&quot;&gt;&lt;/a&gt;2.1 跳转&lt;/h3&gt;&lt;p&gt;如果键盘上有上、下、左、右箭头的导航键，就由这些键来完成光标的移动。另外，可以用下面的键完成同样的 &lt;strong&gt;按字符移动&lt;/strong&gt; 功能：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;k                上移；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;j                下移；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h                左移；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l                右移。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面这４个键将光标位置每次移动一行或一个 &lt;strong&gt;字符&lt;/strong&gt; 。Vim还提供稍大范围移动光标的命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ctrl+f        在文件中前移一页（相当于 page down）；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctrl+b        在文件中后移一页（相当于 page up）；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更大范围的移动：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*          当光标停留在一个单词上，* 键会在文件内搜索该单词，并跳转到下一处；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#          当光标停留在一个单词上，# 在文件内搜索该单词，并跳转到上一处；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(/)        移动到 前/后 句 的开始；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;/&amp;#125;        跳转到 当前/下一个 段落 的开始。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;g_         到本行最后一个不是 blank 字符的位置。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fa         到下一个为 a 的字符处，你也可以fs到下一个为s的字符。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t,         到逗号前的第一个字符。逗号可以变成其它字符。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3fa        在当前行查找第三个出现的 a。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F/T        和 f 和 t 一样，只不过是相反方向;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gg         将光标定位到文件第一行起始位置；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;G          将光标定位到文件最后一行起始位置；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NG或Ngg    将光标定位到第 N 行的起始位置。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在屏幕中找到需要的 &lt;strong&gt;一页&lt;/strong&gt; 时，可以用下面的命令快速移动光标：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;H                将光标移到屏幕上的起始行（或最上行）；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M                将光标移到屏幕中间；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L                将光标移到屏幕最后一行。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样需要注意字母的大小写。&lt;code&gt;H&lt;/code&gt; 和 &lt;code&gt;L&lt;/code&gt; 命令还可以加数字。如 &lt;code&gt;2H&lt;/code&gt; 表示将光标移到屏幕的第２行，&lt;code&gt;3L&lt;/code&gt; 表示将光标移到屏幕的倒数第3行。&lt;br&gt;当将光标移到所要的行是，&lt;strong&gt;行内移动&lt;/strong&gt; 光标可以用下面的命令来实现：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;w                右移光标到下一个字的开头；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e                右移光标到一个字的末尾；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b                左移光标到前一个字的开头；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0                数字０，左移光标到本行的开始；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$                右移光标，到本行的末尾；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^                移动光标，到本行的第一个非空字符。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-2-搜索匹配&quot;&gt;&lt;a href=&quot;#2-2-搜索匹配&quot; class=&quot;headerlink&quot; title=&quot;2.2 搜索匹配&quot;&gt;&lt;/a&gt;2.2 搜索匹配&lt;/h3&gt;&lt;p&gt;和许多先进的编辑器一样，Vim 提供了强大的字符串搜索功能。要查找文件中指定字或短语出现的位置，可以用Vim直接进行搜索，而不必以手工方式进行。搜索方法是：键入字符 &lt;code&gt;/&lt;/code&gt; ，后面跟以要搜索的字符串，然后按回车键。编辑程序执行正向搜索（即朝文件末尾方向），并在找到指定字符串后，将光标停到该字符串的开头；键入 &lt;code&gt;n&lt;/code&gt; 命令可以继续执行搜索，找出这一字符串下次出现的位置。用字符 &lt;code&gt;?&lt;/code&gt; 取代 &lt;code&gt;/&lt;/code&gt; ，可以实现反向搜索（朝文件开头方向）。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/str1                正向搜索字符串 str1；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n                    继续搜索，找出 str1 字符串下次出现的位置；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;N                    继续搜索，找出 str1 字符串上一次出现的位置；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?str2                反向搜索字符串 str2 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无论搜索方向如何，当到达文件末尾或开头时，搜索工作会循环到文件的另一端并继续执行。&lt;br&gt;Vim中执行搜索匹配最强大的地方是结合 &lt;strong&gt;正则表达式&lt;/strong&gt; 来搜索，后续将会介绍。&lt;/p&gt;
&lt;h3 id=&quot;2-3-替换和删除&quot;&gt;&lt;a href=&quot;#2-3-替换和删除&quot; class=&quot;headerlink&quot; title=&quot;2.3 替换和删除&quot;&gt;&lt;/a&gt;2.3 替换和删除&lt;/h3&gt;&lt;p&gt;Vim常规的删除命令是 &lt;code&gt;d&lt;/code&gt;、 &lt;code&gt;x&lt;/code&gt; (前者删除 &lt;code&gt;行&lt;/code&gt; ，后者删除 &lt;code&gt;字符&lt;/code&gt; ),结合Vim的其他特性可以实现基础的删除功能。将光标定位于文件内指定位置后，可以用其他字符来替换光标所指向的字符，或从当前光标位置删除一个或多个字符或一行、多行。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rc                 用 c 替换光标所指向的当前字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nrc                用 c 替换光标所指向的前 n 个字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5rA                用 A 替换光标所指向的前 5 个字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x                  删除光标所指向的当前字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nx                 删除光标所指向的前 n 个字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3x                 删除光标所指向的前 3 个字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dw                 删除光标右侧的字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ndw                删除光标右侧的 n 个字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3dw                删除光标右侧的 3 个字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db                 删除光标左侧的字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ndb                删除光标左侧的 n 个字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5db                删除光标左侧的 5 个字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dd                 删除光标所在行，并去除空隙；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ndd                删除（剪切） n 行内容，并去除空隙；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3dd                删除（剪切） 3 行内容，并去除空隙；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其他常用的删除命令有：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;d$                从当前光标起删除字符直到行的结束；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d0                从当前光标起删除字符直到行的开始；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;J                 删除本行的回车符（CR），并和下一行合并。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Vim常规的替换命令有 &lt;code&gt;c&lt;/code&gt; 和 &lt;code&gt;s&lt;/code&gt; ，结合Vim的其他特性可以实现基础的替换功能，不过替换命令执行以后，通常会由 &lt;strong&gt;编辑模式&lt;/strong&gt; 进入 &lt;strong&gt;插入模式&lt;/strong&gt; ：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s                用输入的正文替换光标所指向的字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S                删除当前行，并进入编辑模式；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ns               用输入的正文替换光标右侧 n 个字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nS               删除当前行在内的 n 行，并进入编辑模式；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cw               用输入的正文替换光标右侧的字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cW               用输入的正文替换从光标到行尾的所有字符（同 c$ )；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ncw              用输入的正文替换光标右侧的 n 个字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cb               用输入的正文替换光标左侧的字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ncb              用输入的正文替换光标左侧的 n 个字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd               用输入的正文替换光标的所在行；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ncd              用输入的正文替换光标下面的 n 行；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c$               用输入的正文替换从光标开始到本行末尾的所有字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c0               用输入的正文替换从本行开头到光标的所有字符。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-4-复制粘贴&quot;&gt;&lt;a href=&quot;#2-4-复制粘贴&quot; class=&quot;headerlink&quot; title=&quot;2.4 复制粘贴&quot;&gt;&lt;/a&gt;2.4 复制粘贴&lt;/h3&gt;&lt;p&gt;从正文中删除的内容（如字符、字或行）并没有真正丢失，而是被剪切并复制到了一个内存缓冲区中。用户可将其粘贴到正文中的指定位置。完成这一操作的命令是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p               小写字母 p，将缓冲区的内容粘贴到光标的后面；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P               大写字母 P，将缓冲区的内容粘贴到光标的前面。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果缓冲区的内容是字符或字，直接粘贴在光标的前面或后面；如果缓冲区的内容为整行正文，执行上述粘贴命令将会粘贴在当前光标所在行的上一行或下一行。&lt;br&gt;注意上述两个命令中字母的大小写。Vim 编辑器经常以一对大、小写字母（如 &lt;code&gt;p&lt;/code&gt; 和 &lt;code&gt;P&lt;/code&gt;）来提供一对相似的功能。通常，小写命令在光标的后面进行操作，大写命令在光标的前面进行操作。&lt;/p&gt;
&lt;p&gt;有时需要复制一段正文到新位置，同时保留原有位置的内容。这种情况下，首先应当把指定内容复制（而不是剪切）到内存缓冲区。完成这一操作的命令是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yy              复制当前行到内存缓冲区；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nyy             复制 n 行内容到内存缓冲区；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5yy             复制 5 行内容到内存缓冲区；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;“+y             复制 1 行到操作系统的粘贴板；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;“+nyy           复制 n 行到操作系统的粘贴板。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-5-撤销和重复&quot;&gt;&lt;a href=&quot;#2-5-撤销和重复&quot; class=&quot;headerlink&quot; title=&quot;2.5 撤销和重复&quot;&gt;&lt;/a&gt;2.5 撤销和重复&lt;/h3&gt;&lt;p&gt;在编辑文档的过程中，为消除某个错误的编辑命令造成的后果，可以用撤消命令。另外，如果用户希望在新的光标位置重复前面执行过的编辑命令，可用重复命令。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;u               撤消前一条命令的结果；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.               重复最后一条修改正文的命令。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-插入模式&quot;&gt;&lt;a href=&quot;#3-插入模式&quot; class=&quot;headerlink&quot; title=&quot;3. 插入模式&quot;&gt;&lt;/a&gt;3. 插入模式&lt;/h2&gt;&lt;h3 id=&quot;3-1-进入插入模式&quot;&gt;&lt;a href=&quot;#3-1-进入插入模式&quot; class=&quot;headerlink&quot; title=&quot;3.1 进入插入模式&quot;&gt;&lt;/a&gt;3.1 进入插入模式&lt;/h3&gt;&lt;p&gt;在编辑模式下正确定位光标之后，可用以下命令切换到插入模式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;i            在光标左侧插入正文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a            在光标右侧插入正文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;o            在光标所在行的下一行增添新行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;O            在光标所在行的上一行增添新行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I            在光标所在行的开头插入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A            在光标所在行的末尾插入&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-2-退出插入模式&quot;&gt;&lt;a href=&quot;#3-2-退出插入模式&quot; class=&quot;headerlink&quot; title=&quot;3.2 退出插入模式&quot;&gt;&lt;/a&gt;3.2 退出插入模式&lt;/h3&gt;&lt;p&gt;退出插入模式的方法是，按 &lt;code&gt;ESC&lt;/code&gt; 键或组合键 &lt;code&gt;Ctrl+[&lt;/code&gt; ，退出插入模式之后，将会进入编辑模式 。&lt;/p&gt;
&lt;h2 id=&quot;4-命令模式&quot;&gt;&lt;a href=&quot;#4-命令模式&quot; class=&quot;headerlink&quot; title=&quot;4. 命令模式&quot;&gt;&lt;/a&gt;4. 命令模式&lt;/h2&gt;&lt;p&gt;在Vim的命令模式下，可以使用复杂的命令。在编辑模式下键入 &lt;code&gt;:&lt;/code&gt; ，光标就跳到屏幕最后一行，并在那里显示冒号，此时已进入命令模式。命令模式又称 &lt;strong&gt;末行模式&lt;/strong&gt; ，用户输入的内容均显示在屏幕的最后一行，按回车键，Vim 执行命令。&lt;/p&gt;
&lt;h3 id=&quot;4-1-打开、保存、退出&quot;&gt;&lt;a href=&quot;#4-1-打开、保存、退出&quot; class=&quot;headerlink&quot; title=&quot;4.1 打开、保存、退出&quot;&gt;&lt;/a&gt;4.1 打开、保存、退出&lt;/h3&gt;&lt;p&gt;在已经启动的Vim中打开一个文件需要用 &lt;strong&gt;&lt;code&gt;:e&lt;/code&gt;&lt;/strong&gt; 命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:e path_to_file/filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;保存当前编辑的文件需要用 &lt;strong&gt;&lt;code&gt;:w&lt;/code&gt;&lt;/strong&gt; 命令（单词 &lt;code&gt;write&lt;/code&gt; 的缩写）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:w&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将当前文件另存为 &lt;code&gt;file_temp&lt;/code&gt; 则：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:w file_temp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在编辑模式下可以用 &lt;code&gt;ZZ&lt;/code&gt; 命令退出Vim编辑程序，该命令保存对正文所作的修改，覆盖原始文件。如果只需要退出编辑程序，而不打算保存编辑的内容，可用下面的命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;: q                在未作修改的情况下退出；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;: q!               放弃所有修改，退出编辑程序。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;保存并退出则可以讲两条命令结合起来使用（注意命令顺序，先保存，后退出）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:wq&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-2-行号与文件&quot;&gt;&lt;a href=&quot;#4-2-行号与文件&quot; class=&quot;headerlink&quot; title=&quot;4.2 行号与文件&quot;&gt;&lt;/a&gt;4.2 行号与文件&lt;/h3&gt;&lt;p&gt;编辑中的每一行正文都有自己的行号，用下列命令可以移动光标到指定行（效果与 &lt;strong&gt;编辑模式&lt;/strong&gt; 下的 &lt;code&gt;ngg&lt;/code&gt; 或 &lt;code&gt;nG&lt;/code&gt; 相同）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;: n             将光标移到第 n 行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;命令模式下，可以规定命令操作的行号范围。数值用来指定绝对行号；字符“.”表示光标所在行的行号；字符符“$”表示正文最后一行的行号；简单的表达式，例如“.+5”表示当前行往下的第 5 行。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:345                  将光标移到第 345 行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:345w file            将第 345 行写入 file 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:3,5w file            将第 3 行至第 5 行写入 file 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:1,.w file            将第 1 行至当前行写入 file 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:.,$w file            将当前行至最后一行写入 file 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:.,.+5w file          从当前行开始将 6 行内容写入 file 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:1,$w file            将所有内容写入 file 文件，相当于 :w file 命令&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在命令模式下，允许从文件中读取正文，或将正文写入文件。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:w                 将编辑的内容写入原始文件，用来保存编辑的中间结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:wq                将编辑的内容写入原始文件并退出编辑程序（相当于 ZZ 命令）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:w file            将编辑的内容写入 file 文件，保持原有文件的内容不变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:a,bw file         将第 a 行至第 b 行的内容写入 file 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:r file            读取 file 文件的内容，插入当前光标所在行的后面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:e file            编辑新文件 file 代替原有内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:f file            将当前文件重命名为 file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:f                 打印当前文件名称和状态，如文件的行数、光标所在的行号等&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-3-字符串搜索&quot;&gt;&lt;a href=&quot;#4-3-字符串搜索&quot; class=&quot;headerlink&quot; title=&quot;4.3 字符串搜索&quot;&gt;&lt;/a&gt;4.3 字符串搜索&lt;/h3&gt;&lt;p&gt;在 &lt;strong&gt;编辑模式&lt;/strong&gt; 讲过字符串的搜索，此处的 &lt;strong&gt;命令模式&lt;/strong&gt; 也可以进行字符串搜索，给出一个字符串，可以通过搜索该字符串到达指定行。如果希望进行正向搜索，将待搜索的字符串置于两个 &lt;code&gt;/&lt;/code&gt; 之间；如果希望反向搜索，则将字符串放在两个 &lt;code&gt;?&lt;/code&gt; 之间。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:/str/                  正向搜索，将光标移到下一个包含字符串 str 的行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:?str?                  反向搜索，将光标移到上一个包含字符串 str 的行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:/str/w file            正向搜索，并将第一个包含字符串 str 的行写入 file 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:/str1/,/str2/w file    正向搜索，并将包含字符串 str1 的行至包含字符串 str2 的行写&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-4-Vim中的正则表达式&quot;&gt;&lt;a href=&quot;#4-4-Vim中的正则表达式&quot; class=&quot;headerlink&quot; title=&quot;4.4 Vim中的正则表达式&quot;&gt;&lt;/a&gt;4.4 Vim中的正则表达式&lt;/h3&gt;&lt;p&gt;当给Vim指定搜索字符串时，可以包含具有特殊含义的字符。包含这些特殊字符的搜索字符串称为正则表达式（Regular Expressions）。例如，要搜索一行正文，这行正文的开头包含 &lt;code&gt;struct&lt;/code&gt; 字。下面的命令做不到这一点：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:/struct/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为它只找出在行中任意位置包含 &lt;code&gt;struct&lt;/code&gt;的第一行，并不一定在行的开始包含 &lt;code&gt;struct&lt;/code&gt; 。解决问题的办法是在搜索字符串前面加上特殊字符^：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:/^struct/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt; 字符比较每行开头的字符串。所以上面的命令表示：找出以字符串 &lt;code&gt;struct&lt;/code&gt; 开头的行。&lt;br&gt;也可以用类似办法在搜索字符串后面加上表示行的末尾的特殊字符 来找出位于行末尾的字：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:/^struct/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下表给出大多数特殊字符和它们的含义：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;^                放在字符串前面，匹配行首的字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$                放在字符串后面，匹配行尾的字；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\&amp;lt;               匹配一个字的字头；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\&amp;gt;               匹配一个字的字尾；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.                匹配任何单个正文字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[str]            匹配 str 中的任何单个字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[^str]           匹配任何不在 str 中的单个字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[a-b]            匹配 a 到 b 之间的任一字符；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                匹配前一个字符的 0 次或多次出现；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\                转义后面的字符。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简单介绍这么多，正则表达式知识可以参考&lt;br&gt;《正则表达式30分钟入门》:&lt;a href=&quot;http://deerchao.net/tutorials/regex/regex.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://deerchao.net/tutorials/regex/regex.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://deerchao.net/tutorials/regex/regex.htm&lt;/a&gt;&lt;br&gt;另外，进阶的Vim正则表达式还有对Magic 模式的介绍，可以参考&lt;br&gt;《Vim正则表达式详解》:&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/salc3k/article/details/8222397&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.csdn.net/salc3k/article/details/8222397&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/salc3k/article/details/8222397&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-5-正文替换&quot;&gt;&lt;a href=&quot;#4-5-正文替换&quot; class=&quot;headerlink&quot; title=&quot;4.5 正文替换&quot;&gt;&lt;/a&gt;4.5 正文替换&lt;/h3&gt;&lt;p&gt;利用 &lt;code&gt;:s&lt;/code&gt; 命令可以实现字符串的替换。具体的用法包括：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:%s/str1/str2/        用字符串 str2 替换行中首次出现的字符串 str1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:s/str1/str2/g        用字符串 str2 替换行中所有出现的字符串 str1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:.,$ s/str1/str2/g    用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:1,$ s/str1/str2/g    用字符串 str2 替换正文中所有出现的字符串 str1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:g/str1/s//str2/g     功能同上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:m,ns/str1/str2/g     将从m行到n行的str1替换成str2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上述替换命令可以看到：&lt;br&gt;1. &lt;code&gt;g&lt;/code&gt; 放在命令末尾，表示对搜索字符串的每次出现进行替换,不止匹配每行中的第一次出现；不加 &lt;code&gt;g&lt;/code&gt;，表示只对搜索字符串的首次出现进行替换；&lt;code&gt;g&lt;/code&gt; 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作;&lt;br&gt;2. &lt;code&gt;s&lt;/code&gt; 表示后面跟着一串替换的命令；&lt;br&gt;3. &lt;code&gt;%&lt;/code&gt; 表示替换范围是所有行，即全文。&lt;/p&gt;
&lt;p&gt;另外一个实用的命令，在Vim中统计当前文件中字符串 &lt;code&gt;str1&lt;/code&gt; 出现的次数，可用替换命令的变形：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:%s/str1/&amp;amp;/gn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-6-删除正文&quot;&gt;&lt;a href=&quot;#4-6-删除正文&quot; class=&quot;headerlink&quot; title=&quot;4.6 删除正文&quot;&gt;&lt;/a&gt;4.6 删除正文&lt;/h3&gt;&lt;p&gt;在命令模式下，同样可以删除正文中的内容。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:d                              删除光标所在行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:3d                             删除 3 行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:.,$d                           删除当前行至正文的末尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:/str1/,/str2/d                 删除从字符串 str1 到 str2 的所有行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:g/^\(.*\)$\n\1$/d              删除连续相同的行，保留最后一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:g/\%(^\1$\n\)\@&amp;lt;=\(.*\)$/d     删除连续相同的行，保留最开始一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:g/^\s*$\n\s*$/d                删除连续多个空行，只保留一行空行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:5,20s/^#//g                    删除5到20行开头的 # 注释&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总之，Vim的初级删除命令是用 &lt;code&gt;d&lt;/code&gt; ，高级删除命令可以用 &lt;strong&gt;正则替换&lt;/strong&gt; 的方式执行。&lt;/p&gt;
&lt;h3 id=&quot;4-7-恢复文件&quot;&gt;&lt;a href=&quot;#4-7-恢复文件&quot; class=&quot;headerlink&quot; title=&quot;4.7 恢复文件&quot;&gt;&lt;/a&gt;4.7 恢复文件&lt;/h3&gt;&lt;p&gt;Vim 在编辑某个文件时，会另外生成一个临时文件，这个文件的名称通常以 &lt;code&gt;.&lt;/code&gt; 开头，并以 &lt;code&gt;.swp&lt;/code&gt; 结尾。Vim 在正常退出时，该文件被删除，若意外退出，而没有保存文件的最新修改内容，则可以使用恢复命令 &lt;code&gt;:recover&lt;/code&gt; 来恢复文件，也可以在启动Vim时用 &lt;code&gt;-r&lt;/code&gt; 选项。&lt;/p&gt;
&lt;h3 id=&quot;4-8-选项设置&quot;&gt;&lt;a href=&quot;#4-8-选项设置&quot; class=&quot;headerlink&quot; title=&quot;4.8 选项设置&quot;&gt;&lt;/a&gt;4.8 选项设置&lt;/h3&gt;&lt;p&gt;为控制不同的编辑功能，Vim 提供了很多内部选项。利用 &lt;code&gt;:set&lt;/code&gt; 命令可以设置选项。基本语法为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:set option         设置选项 option&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常见的功能选项包括：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;autoindent        设置该选项，则正文自动缩进&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ignorecase        设置该选项，则忽略规则表达式中大小写字母的区别&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;number            设置该选项，则显示正文行号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ruler             设置该选项，则在屏幕底部显示光标所在行、列的位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tabstop           设置按 Tab 键跳过的空格数。例如 :set tabstop=n，n 默认值为 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mk                将选项保存在当前目录的 .exrc 文件中&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-9-Shell切换&quot;&gt;&lt;a href=&quot;#4-9-Shell切换&quot; class=&quot;headerlink&quot; title=&quot;4.9 Shell切换&quot;&gt;&lt;/a&gt;4.9 Shell切换&lt;/h3&gt;&lt;p&gt;当处于编辑的对话过程中时，可能需要执行一些Linux命令。如果需要保存当前的结果，退出编辑程序，再执行所需的Linux命令，然后再回头继续编辑过程，就显得十分累赘。如果能在编辑的环境中运行Linux命令就要省事得多。在Vim中，可以用下面的命令来做到这一点：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:!shell_command   执行完 shell_command 后回到Vim&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这称为Shell切换。它允许执行任何可以在标准的Shell提示符下执行的命令。当这条命令执行完毕，控制返回给编辑程序。又可以继续编辑对话过程。&lt;/p&gt;
&lt;h3 id=&quot;4-10-分屏与标签页&quot;&gt;&lt;a href=&quot;#4-10-分屏与标签页&quot; class=&quot;headerlink&quot; title=&quot;4.10 分屏与标签页&quot;&gt;&lt;/a&gt;4.10 分屏与标签页&lt;/h3&gt;&lt;h4 id=&quot;分屏&quot;&gt;&lt;a href=&quot;#分屏&quot; class=&quot;headerlink&quot; title=&quot;分屏&quot;&gt;&lt;/a&gt;分屏&lt;/h4&gt;&lt;p&gt;普通的Vim模式，打开一个Vim程序只能查看一个文件，如果想同时查看多个文件，就需要用到Vim分屏与标签页功能。&lt;br&gt;Vim的分屏，主要有两种方式：上下分屏（水平分屏）和左右分屏（垂直分屏），在命令模式分别敲入以下命令即可：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:split（可用缩写 :sp）            上下分屏；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:vsplit（可用缩写 :vsp）          左右分屏。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，也可以在终端里启动vim时就开启分屏操作：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim -On file1 file2...   打开 file1 和 file2 ，垂直分屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vim -on file1 file2...   打开 file1 和 file2 ，水平分屏&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;理论上，一个Vim窗口，可以分为多个Vim屏幕，切换屏幕需要用键盘快捷键，命令分别有：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+w+h            切换到当前分屏的左边一屏；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+w+l            切换到当前分屏的右边一屏；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+w+j            切换到当前分屏的下方一屏；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+w+k            切换到当前分屏的上方一屏。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即键盘上的&lt;code&gt;h,j,k,l&lt;/code&gt; 四个Vim专用方向键，配合&lt;code&gt;Ctrl&lt;/code&gt;键和&lt;code&gt;w&lt;/code&gt;键（&lt;code&gt;window&lt;/code&gt;的缩写），就能跳转到目标分屏。另外，也可以直接按 &lt;code&gt;Ctrl+w+w&lt;/code&gt; 来跳转分屏，不过跳转方向则是在当前Vim窗口所有分屏中，按照&lt;code&gt;逆时针&lt;/code&gt;方向跳转。&lt;br&gt;下面是改变尺寸的一些操作，主要是高度，对于宽度你可以使用 &lt;code&gt;[Ctrl+W &amp;lt;]&lt;/code&gt; 或是 &lt;code&gt;[Ctrl+W &amp;gt;]&lt;/code&gt; ，但这可能需要最新的版本才支持。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+W =            让所有的屏都有一样的高度；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+W +            增加高度；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+W -            减少高度。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;标签页&quot;&gt;&lt;a href=&quot;#标签页&quot; class=&quot;headerlink&quot; title=&quot;标签页&quot;&gt;&lt;/a&gt;标签页&lt;/h4&gt;&lt;p&gt;Vim的标签（Tab）页，类似浏览器的标签页，一个标签页打开一个Vim的窗口，一个Vim的窗口可以支持N个分屏。&lt;br&gt;在Vim中新建一个标签的命令是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:tabnew&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果要在新建标签页的同时打开一个文件，则可以在命令后面直接附带文件路径：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:tabnew filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Vim中的每个标签页有一个唯一的数字序号，第一个标签页的序号是&lt;code&gt;0&lt;/code&gt;，从左向右依次加一。关于标签页有一系列操作命令，简介如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:tN[ext]                跳转到上一个匹配的标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabN[ext]              跳到上一个标签页&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabc[lose]             关闭当前标签页&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabdo                  为每个标签页执行命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabe[dit]              在新标签页里编辑文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabf[ind]              寻找 &amp;apos;path&amp;apos; 里的文件，在新标签页里编辑之&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabfir[st]             转到第一个标签页&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabl[ast]              转到最后一个标签页&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabm[ove]  N           把标签页移到序号为N位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabnew [filename]      在新标签页里编辑文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabn[ext]              转到下一个标签页&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabo[nly]              关闭所有除了当前标签页以外的所有标签页&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabp[revious]          转到前一个标签页&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:tabr[ewind]            转到第一个标签页&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-11-与外部工具集成&quot;&gt;&lt;a href=&quot;#4-11-与外部工具集成&quot; class=&quot;headerlink&quot; title=&quot;4.11 与外部工具集成&quot;&gt;&lt;/a&gt;4.11 与外部工具集成&lt;/h3&gt;&lt;p&gt;Vim可以与许多外部程序集成，功能十分强大，比如 &lt;code&gt;diff&lt;/code&gt; , &lt;code&gt;ctags&lt;/code&gt; , &lt;code&gt;sort&lt;/code&gt; , &lt;code&gt;xxd&lt;/code&gt; 等等，下面选取几个简单介绍一下。&lt;/p&gt;
&lt;h4 id=&quot;diff&quot;&gt;&lt;a href=&quot;#diff&quot; class=&quot;headerlink&quot; title=&quot;diff&quot;&gt;&lt;/a&gt;diff&lt;/h4&gt;&lt;p&gt;Linux命令 &lt;code&gt;diff&lt;/code&gt; 用来对比两个文件的内容，不过对比结果显示在终端里，可读性比较差。结合Vim，在终端里可以直接输入命令 &lt;code&gt;vimdiff&lt;/code&gt;，后面跟两个文件名作为参数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vimdiff file1 file2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即可在Vim里分屏显示两个文件内容的对比结果，对文件内容差异部分进行高亮标记，还可以同步滚动两个文件内容，更可以实时修改文件内容，方便程度和用户体验大大提高。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vimdiff a.txt b.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果直接给 &lt;code&gt;-d&lt;/code&gt; 选项是一样的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim -d a.txt b.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了在终端里开启vimdiff 功能，也可以在打开Vim后，在Vim的命令模式输入相关命令来开启 &lt;code&gt;vimdiff&lt;/code&gt; 功能：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:diffsplit abc.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你现在已经开启了一个文件，想Vim帮你区分你的文件跟 &lt;code&gt;abc.txt&lt;/code&gt; 有什么区别，可以在Vim中用 &lt;code&gt;diffsplit&lt;/code&gt; 的方式打开第二个文件，这个时 候Vim会用 &lt;code&gt;split&lt;/code&gt;（分&lt;strong&gt;上下&lt;/strong&gt;两屏）的方式开启第二个文件，并且通过颜色，&lt;code&gt;fold&lt;/code&gt;来显示两个文件的区别&lt;br&gt;这样Vim就会用颜色帮你区分开2个文件的区别。如果文件比较大（源码）重复的部分会帮你折叠起来。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:diffpatch filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 &lt;code&gt;:diffpatch&lt;/code&gt; 你的patch的文件名，就可以以当前文件加上你的patch来显示。vim会split一个新的屏，显示patch后的信息并且用颜色标明区别。&lt;br&gt;如果不喜欢上下对比，喜欢左右（比较符合视觉）可以在前面加 &lt;code&gt;vert&lt;/code&gt; ，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:vert diffsplit abc.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:vert diffpatch abc.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看完diff，用 &lt;code&gt;:only&lt;/code&gt; 回到原本编辑的文件，觉得diff的讨厌颜色还是在哪里，只要用 &lt;code&gt;:diffoff&lt;/code&gt; 关闭就好了。&lt;br&gt;还有个常用的diff中的就是 &lt;code&gt;:diffu&lt;/code&gt; ,这个是 &lt;code&gt;:diffupdate&lt;/code&gt; 的简写，更新的时候用。&lt;br&gt;Vim的&lt;code&gt;diff&lt;/code&gt;功能显示效果如下所示：&lt;br&gt;&lt;img src=&quot;http://blog.mc-zone.me/wp-content/uploads/2014/05/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2014-05-28-%E4%B8%8B%E5%8D%889.26.59.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图片来自 &lt;a href=&quot;http://blog.mc-zone.me/article/285&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.mc-zone.me/article/285&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;sort&quot;&gt;&lt;a href=&quot;#sort&quot; class=&quot;headerlink&quot; title=&quot;sort&quot;&gt;&lt;/a&gt;sort&lt;/h4&gt;&lt;p&gt;Linux命令 &lt;code&gt;sort&lt;/code&gt; 可以对文本内容进行按行中的字符比较、排序，但在终端里使用 &lt;code&gt;sort&lt;/code&gt; 命令处理文件，并不能实时查看文件内容。具体用法请自查手册。&lt;/p&gt;
&lt;h4 id=&quot;xxd&quot;&gt;&lt;a href=&quot;#xxd&quot; class=&quot;headerlink&quot; title=&quot;xxd&quot;&gt;&lt;/a&gt;xxd&lt;/h4&gt;&lt;p&gt;&lt;code&gt;vim+xxd&lt;/code&gt; 是Linux下最常用的二进制文本编辑工具，&lt;code&gt;xxd&lt;/code&gt;其实是Vim外部的一个转换程序，随Vim一起发布，在Vim里调用它来编辑二进制文本非常方便。&lt;br&gt;首先以二进制模式在终端里打开一个文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim -b filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Vim 的 &lt;code&gt;-b&lt;/code&gt; 选项是告诉 Vim 打开的是一个二进制文件，不指定的话，会在后面加上 &lt;code&gt;0x0a&lt;/code&gt; ，即一个换行符。&lt;br&gt;然后在Vim的命令模式下键入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:%!xxd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即可看到二进制模式显示出来的文本，看起来像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0000000: 1f8b 0808 39d7 173b 0203 7474 002b 4e49  ....9..;..tt.+NI &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0000010: 4b2c 8660 eb9c ecac c462 eb94 345e 2e30  K,......b..4^.0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0000020: 373b 2731 0b22 0ca6 c1a2 d669 1035 39d9  7;&amp;apos;1.&amp;quot;.....i.59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就可以在二进制模式下编辑该文件，编辑后保存，然后用下面命令从二进制模式转换到普通模式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:%!xxd -r&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，也可以调整二进制的显示模式，默认是 &lt;strong&gt;2&lt;/strong&gt; 个字节为一组，可以通过 &lt;code&gt;g&lt;/code&gt; 参数调整每组字节数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:%!xxd -g 1         表示每1个字节为1组 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:%!xxd -g 2         表示每2个字节为1组(默认) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:%!xxd -g 4         表示每4个字节为1组&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-Vim配置&quot;&gt;&lt;a href=&quot;#5-Vim配置&quot; class=&quot;headerlink&quot; title=&quot;5. Vim配置&quot;&gt;&lt;/a&gt;5. Vim配置&lt;/h2&gt;&lt;p&gt;最初安装的Vim功能、特性支持比较少，用起来比较费劲，想要稍微“好用”一点，需做一些初步的配置。Vim的配置主要分为Vim本身特性的配置和外部插件的配置两部分。&lt;br&gt;Vim的配置是通常是存放在用户主目录的 &lt;code&gt;.vimrc&lt;/code&gt; 的隐藏文件中的。就Vim本身特性来说，基础的配置有编程语言语法高亮、缩进设置、行号显示、搜索高亮、TAB键设置、字体设置、Vim主题设置等等，稍微高级一些的有编程语言缩进、自动补全设置等，具体配置项可以自行查资料，全面详细的配置项介绍可以参考：&lt;br&gt;《Vim Options》：&lt;br&gt;&lt;a href=&quot;http://vimcdoc.sourceforge.net/doc/options.html#%27completeopt%27&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://vimcdoc.sourceforge.net/doc/options.html#%27completeopt%27&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://vimcdoc.sourceforge.net/doc/options.html#%27completeopt%27&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-Vim插件&quot;&gt;&lt;a href=&quot;#6-Vim插件&quot; class=&quot;headerlink&quot; title=&quot;6. Vim插件&quot;&gt;&lt;/a&gt;6. Vim插件&lt;/h2&gt;&lt;p&gt;Vim“编辑器之神”的称号并不是浪得虚名，然而，这个荣誉的背后，或许近半的功劳要归功于强大的插件支持特性，以及社区开发的各种各样功能强大的插件。&lt;/p&gt;
&lt;p&gt;平时开发人员常用插件主要是目录（文件）查看和管理、编程语言缩进与自动补全、编程语言Docs支持、函数跳转、项目管理等等，简单配置可以参考下面：&lt;/p&gt;
&lt;p&gt;《Vim插件简单介绍》：&lt;br&gt;&lt;a href=&quot;http://blog.segmentfault.com/xuelang/1190000000630547&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.segmentfault.com/xuelang/1190000000630547&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.segmentfault.com/xuelang/1190000000630547&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《手把手教你把Vim改装成一个IDE编程环境(图文)》：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/wooin/article/details/1858917&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.csdn.net/wooin/article/details/1858917&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/wooin/article/details/1858917&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《将Vim改造为强大的IDE》：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/zhangsf/archive/2013/06/13/3134409.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.cnblogs.com/zhangsf/archive/2013/06/13/3134409.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/zhangsf/archive/2013/06/13/3134409.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然，这些插件都是拜Vim本身的插件支持特性所赐。Vim为了支持丰富的第三方插件，自身定义了一套简单的脚本开发语言，供程序员自行开发自己所需要的插件，插件开发介绍可以参考：&lt;/p&gt;
&lt;p&gt;《Writing Vim Plugins》：&lt;br&gt;&lt;a href=&quot;http://stevelosh.com/blog/2011/09/writing-vim-plugins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://stevelosh.com/blog/2011/09/writing-vim-plugins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stevelosh.com/blog/2011/09/writing-vim-plugins/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;7-Vim完整文档&quot;&gt;&lt;a href=&quot;#7-Vim完整文档&quot; class=&quot;headerlink&quot; title=&quot;7. Vim完整文档&quot;&gt;&lt;/a&gt;7. Vim完整文档&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Vim官方文档：&lt;a href=&quot;http://vimdoc.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://vimdoc.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://vimdoc.sourceforge.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vim中文用户手册7_3.pdf ：&lt;a href=&quot;http://pan.baidu.com/s/1jGzbTBo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://pan.baidu.com/s/1jGzbTBo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pan.baidu.com/s/1jGzbTBo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;文章转自&lt;a href=&quot;http://www.jianshu.com/p/bcbe916f97e1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;甲鱼 Vim入门基础&lt;/a&gt;,如需删除，联系本人删除，谢谢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http:/
    
    </summary>
    
    
      <category term="vim" scheme="http://wangdongen.cn/tags/vim/"/>
    
      <category term="linux" scheme="http://wangdongen.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Android源码设计模式分析</title>
    <link href="http://wangdongen.cn/2016/06/13/Android%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://wangdongen.cn/2016/06/13/Android源码设计模式/</id>
    <published>2016-06-13T15:27:20.000Z</published>
    <updated>2016-06-15T08:09:23.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;提示-引自simple-android-framework-exchange&quot;&gt;&lt;a href=&quot;#提示-引自simple-android-framework-exchange&quot; class=&quot;headerlink&quot; title=&quot;提示 (引自simple-android-framework-exchange)&quot;&gt;&lt;/a&gt;提示 (引自&lt;a href=&quot;https://github.com/simple-android-framework-exchange/android_design_patterns_analysis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;simple-android-framework-exchange&lt;/a&gt;)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;该开源库已经停止维护&lt;/strong&gt;，该系列文章我们会根据技术发展、实战需求以及读者您的反馈重写所有章节，并且加入更加深入的核心机制分析以及模式在Android开发中的实战，&lt;strong&gt;完善后的文稿将会编撰成书出版&lt;/strong&gt;，以便帮助大家更系统的学习，此时更真心地希望大家能够给出完善建议，以便本书更贴近您的需求，联系邮箱为 : simplecoder.h@gmail.com，谢谢。&lt;/p&gt;
&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;该项目通过分析Android系统中的设计模式来提升大家对设计模式的理解，从源码的角度来剖析既增加了对Android系统本身的了解，也从优秀的设计中领悟模式的实际运用以及它适用的场景，避免在实际开发中的生搬硬套。如果你对面向对象的六大开发原则还不太熟悉，那么在学习模式之前先学习一下&lt;a href=&quot;oop-principles/oop-principles.md&quot;&gt;面向对象的六大原则&lt;/a&gt;是非常有必要的。&lt;/p&gt;
&lt;p&gt;&lt;b id=&quot;schedule&quot;&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h2 id=&quot;任务表-一期截止-2015-3-20&quot;&gt;&lt;a href=&quot;#任务表-一期截止-2015-3-20&quot; class=&quot;headerlink&quot; title=&quot;任务表 ( 一期截止 2015.3.20 )&quot;&gt;&lt;/a&gt;任务表 ( 一期截止 2015.3.20 )&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模式名&lt;/th&gt;
&lt;th&gt;分析者&lt;/th&gt;
&lt;th&gt;状态&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;singleton/mr.simple&quot;&gt;单例模式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/hehonghui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mr.Simple&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;builder/mr.simple&quot;&gt;Builder模式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/hehonghui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mr.Simple&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;facade/elsdnwn&quot;&gt;外观模式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/hehonghui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mr.Simple&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;template-method/mr.simple&quot;&gt;模板方法&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/hehonghui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mr.Simple&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;strategy/gkerison&quot;&gt;策略模式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/GKerison&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GKerison&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;proxy/singwhatiwanna&quot;&gt;代理模式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/singwhatiwanna&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;singwhatiwanna&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;iterator/haoxiqiang&quot;&gt;迭代器模式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/Haoxiqiang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Haoxiqiang&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;chain-of-responsibility/AigeStudio&quot;&gt;责任链模式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/AigeStudio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AigeStudio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;command/lijunhuayc&quot;&gt;命令模式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/lijunhuayc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lijunhuayc&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;bridge/shen0834&quot;&gt;桥接模式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/shen0834&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shen0834&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;prototype/mr.simple&quot;&gt;原型模式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/hehonghui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mr.Simple&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完成&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://item.jd.com/10057319.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GOF的设计模式：可复用面向对象软件的基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://item.jd.com/11414555.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计模式之禅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://item.jd.com/10094286.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java与模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iluwatar/java-design-patterns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java-design-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/zhangerqing/article/details/8194653&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java之美[从菜鸟到高手演变]之设计模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提示-引自simple-android-framework-exchange&quot;&gt;&lt;a href=&quot;#提示-引自simple-android-framework-exchange&quot; class=&quot;headerlink&quot; title=&quot;提示 (引自simple-and
    
    </summary>
    
    
      <category term="Android" scheme="http://wangdongen.cn/tags/Android/"/>
    
      <category term="设计模式" scheme="http://wangdongen.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
